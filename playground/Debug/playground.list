
playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a1c  08009a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  2000000c  08009a30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08009a30  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cdcd  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005baa  00000000  00000000  0004ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  000529c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e8  00000000  00000000  00054e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033f2f  00000000  00000000  00056ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f36a  00000000  00000000  0008af1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ecec  00000000  00000000  000ba289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f8f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a54  00000000  00000000  001f8fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800997c 	.word	0x0800997c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	0800997c 	.word	0x0800997c

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
 8000574:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000578:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <MX_ADC1_Init+0xe4>)
 800057a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_ADC1_Init+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <MX_ADC1_Init+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000596:	2204      	movs	r2, #4
 8000598:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <MX_ADC1_Init+0xe0>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005d8:	f001 feee 	bl	80023b8 <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005e2:	f000 fd1b 	bl	800101c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005f2:	f002 fc43 	bl	8002e7c <HAL_ADCEx_MultiModeConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005fc:	f000 fd0e 	bl	800101c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_ADC1_Init+0xe8>)
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	2306      	movs	r3, #6
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060c:	237f      	movs	r3, #127	; 0x7f
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000610:	2304      	movs	r3, #4
 8000612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0xe0>)
 800061e:	f002 f81d 	bl	800265c <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000628:	f000 fcf8 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	42028000 	.word	0x42028000
 800063c:	25b00200 	.word	0x25b00200

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <HAL_ADC_MspInit+0x74>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d123      	bne.n	80006aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x7c>)
 80006a6:	f002 fe85 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42028000 	.word	0x42028000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	42020000 	.word	0x42020000

080006c0 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006c6:	4a49      	ldr	r2, [pc, #292]	; (80007ec <MX_DFSDM1_Init+0x12c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006d8:	2202      	movs	r2, #2
 80006da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006f0:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000704:	2201      	movs	r2, #1
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000710:	2200      	movs	r2, #0
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000714:	4834      	ldr	r0, [pc, #208]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000716:	f002 fd65 	bl	80031e4 <HAL_DFSDM_ChannelInit>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000720:	f000 fc7c 	bl	800101c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_DFSDM1_Init+0x134>)
 8000728:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800072c:	2201      	movs	r2, #1
 800072e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000738:	2202      	movs	r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000750:	2202      	movs	r2, #2
 8000752:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000762:	2201      	movs	r2, #1
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000772:	481f      	ldr	r0, [pc, #124]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000774:	f002 fd36 	bl	80031e4 <HAL_DFSDM_ChannelInit>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 800077e:	f000 fc4d 	bl	800101c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_DFSDM1_Init+0x13c>)
 8000786:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 800078a:	2201      	movs	r2, #1
 800078c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000796:	2202      	movs	r2, #2
 8000798:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 800079c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0x00;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007d4:	f002 fd06 	bl	80031e4 <HAL_DFSDM_ChannelInit>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_DFSDM1_Init+0x122>
  {
    Error_Handler();
 80007de:	f000 fc1d 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000090 	.word	0x20000090
 80007ec:	40016000 	.word	0x40016000
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	40016020 	.word	0x40016020
 80007f8:	20000100 	.word	0x20000100
 80007fc:	40016040 	.word	0x40016040

08000800 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0b0      	sub	sp, #192	; 0xc0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	2294      	movs	r2, #148	; 0x94
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f009 f8a3 	bl	800996c <memset>
  if(DFSDM1_Init == 0)
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d165      	bne.n	80008fa <HAL_DFSDM_ChannelMspInit+0xfa>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f004 faf6 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800084a:	f000 fbe7 	bl	800101c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a27      	ldr	r2, [pc, #156]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800087e:	f003 fae1 	bl	8003e44 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008b2:	2306      	movs	r3, #6
 80008b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008bc:	4619      	mov	r1, r3
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <HAL_DFSDM_ChannelMspInit+0x10c>)
 80008c0:	f002 fd78 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008de:	2306      	movs	r3, #6
 80008e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_DFSDM_ChannelMspInit+0x110>)
 80008ec:	f002 fd62 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a03      	ldr	r2, [pc, #12]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 80008f8:	6013      	str	r3, [r2, #0]
  }
}
 80008fa:	bf00      	nop
 80008fc:	37c0      	adds	r7, #192	; 0xc0
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000138 	.word	0x20000138
 8000908:	40021000 	.word	0x40021000
 800090c:	42021800 	.word	0x42021800
 8000910:	42020400 	.word	0x42020400

08000914 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2220      	movs	r2, #32
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f009 f823 	bl	800996c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_FMC_Init+0xc8>)
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <MX_FMC_Init+0xcc>)
 800092a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_FMC_Init+0xc8>)
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_FMC_Init+0xd0>)
 8000930:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_FMC_Init+0xc8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_FMC_Init+0xc8>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_FMC_Init+0xc8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_FMC_Init+0xc8>)
 8000946:	2210      	movs	r2, #16
 8000948:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_FMC_Init+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_FMC_Init+0xc8>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_FMC_Init+0xc8>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_FMC_Init+0xc8>)
 800095e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_FMC_Init+0xc8>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_FMC_Init+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_FMC_Init+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_FMC_Init+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_FMC_Init+0xc8>)
 800097e:	2200      	movs	r2, #0
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_FMC_Init+0xc8>)
 8000984:	2200      	movs	r2, #0
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_FMC_Init+0xc8>)
 800098a:	2200      	movs	r2, #0
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_FMC_Init+0xc8>)
 8000990:	2200      	movs	r2, #0
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_FMC_Init+0xc8>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 800099c:	230f      	movs	r3, #15
 800099e:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80009a0:	230f      	movs	r3, #15
 80009a2:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009ac:	230f      	movs	r3, #15
 80009ae:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009b4:	2311      	movs	r3, #17
 80009b6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_FMC_Init+0xc8>)
 80009c4:	f006 fb7d 	bl	80070c2 <HAL_SRAM_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 80009ce:	f000 fb25 	bl	800101c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000013c 	.word	0x2000013c
 80009e0:	44020000 	.word	0x44020000
 80009e4:	44020104 	.word	0x44020104

080009e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_FMC_MspInit+0xa4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d13e      	bne.n	8000a82 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_FMC_MspInit+0xa4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6513      	str	r3, [r2, #80]	; 0x50
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8000a22:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a34:	230c      	movs	r3, #12
 8000a36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <HAL_FMC_MspInit+0xac>)
 8000a3e:	f002 fcb9 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a42:	2301      	movs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <HAL_FMC_MspInit+0xb0>)
 8000a5c:	f002 fcaa 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8000a60:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <HAL_FMC_MspInit+0xb4>)
 8000a7c:	f002 fc9a 	bl	80033b4 <HAL_GPIO_Init>
 8000a80:	e000      	b.n	8000a84 <HAL_FMC_MspInit+0x9c>
    return;
 8000a82:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000194 	.word	0x20000194
 8000a90:	40021000 	.word	0x40021000
 8000a94:	42020c00 	.word	0x42020c00
 8000a98:	42021400 	.word	0x42021400
 8000a9c:	42021000 	.word	0x42021000

08000aa0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000aa8:	f7ff ff9e 	bl	80009e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PC9   ------> SDMMC1_D1
     PC8   ------> SDMMC1_D0
*/
void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4b98      	ldr	r3, [pc, #608]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a97      	ldr	r2, [pc, #604]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a91      	ldr	r2, [pc, #580]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b8f      	ldr	r3, [pc, #572]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a8b      	ldr	r2, [pc, #556]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b89      	ldr	r3, [pc, #548]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000b12:	f003 f997 	bl	8003e44 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a84      	ldr	r2, [pc, #528]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b82      	ldr	r3, [pc, #520]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b7f      	ldr	r3, [pc, #508]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a7e      	ldr	r2, [pc, #504]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b79      	ldr	r3, [pc, #484]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b73      	ldr	r3, [pc, #460]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a72      	ldr	r2, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a6c      	ldr	r2, [pc, #432]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f241 1102 	movw	r1, #4354	; 0x1102
 8000b94:	4866      	ldr	r0, [pc, #408]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000b96:	f002 fd8d 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4865      	ldr	r0, [pc, #404]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000ba0:	f002 fd88 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4863      	ldr	r0, [pc, #396]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000baa:	f002 fd83 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	4861      	ldr	r0, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x288>)
 8000bb6:	f002 fd7d 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4860      	ldr	r0, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x28c>)
 8000bc0:	f002 fd78 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 8000bca:	485e      	ldr	r0, [pc, #376]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000bcc:	f002 fd72 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 8000bd0:	f241 1302 	movw	r3, #4354	; 0x1102
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4851      	ldr	r0, [pc, #324]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000bea:	f002 fbe3 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	484a      	ldr	r0, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000c0a:	f002 fbd3 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 8000c0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c20:	230c      	movs	r3, #12
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x294>)
 8000c2c:	f002 fbc2 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4840      	ldr	r0, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x294>)
 8000c46:	f002 fbb5 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4834      	ldr	r0, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000c62:	f002 fba7 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8000c66:	230e      	movs	r3, #14
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <MX_GPIO_Init+0x298>)
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4832      	ldr	r0, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000c7a:	f002 fb9b 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4828      	ldr	r0, [pc, #160]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000c96:	f002 fb8d 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_GPIO_Init+0x288>)
 8000cb4:	f002 fb7e 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <MX_GPIO_Init+0x28c>)
 8000cd0:	f002 fb70 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_GPIO_Init+0x298>)
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000ce8:	f002 fb64 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8000cec:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000d06:	f002 fb55 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000d20:	f002 fb48 	bl	80033b4 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42021800 	.word	0x42021800
 8000d34:	42020c00 	.word	0x42020c00
 8000d38:	42020400 	.word	0x42020400
 8000d3c:	42020000 	.word	0x42020000
 8000d40:	42021c00 	.word	0x42021c00
 8000d44:	42021400 	.word	0x42021400
 8000d48:	42020800 	.word	0x42020800
 8000d4c:	10110000 	.word	0x10110000

08000d50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f002 fcaa 	bl	80036e4 <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 f941 	bl	800101c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f002 fd30 	bl	8003802 <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 f938 	bl	800101c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f002 fd72 	bl	8003898 <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 f92f 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000198 	.word	0x20000198
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	10707dbc 	.word	0x10707dbc

08000dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ae      	sub	sp, #184	; 0xb8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2294      	movs	r2, #148	; 0x94
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f008 fdbb 	bl	800996c <memset>
  if(i2cHandle->Instance==I2C1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_I2C_MspInit+0xb0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13a      	bne.n	8000e76 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 f80f 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f000 f900 	bl	800101c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0xb8>)
 8000e5a:	f002 faab 	bl	80033b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	37b8      	adds	r7, #184	; 0xb8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	42020400 	.word	0x42020400

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_TIM_PeriodElapsedCallback(&htim4);
 8000e90:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <main+0x5c>)
 8000e92:	f008 fcdd 	bl	8009850 <HAL_TIM_PeriodElapsedCallback>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f001 f878 	bl	8001f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f827 	bl	8000eec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e9e:	f000 f88d 	bl	8000fbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f7ff fe07 	bl	8000ab4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ea6:	f7ff fb55 	bl	8000554 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000eaa:	f7ff fc09 	bl	80006c0 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000eae:	f7ff fd31 	bl	8000914 <MX_FMC_Init>
  MX_I2C1_Init();
 8000eb2:	f7ff ff4d 	bl	8000d50 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000eb6:	f000 fe77 	bl	8001ba8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 fec3 	bl	8001c44 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000ebe:	f000 f8b3 	bl	8001028 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8000ec2:	f000 f9ab 	bl	800121c <MX_SAI1_Init>
  MX_SPI1_Init();
 8000ec6:	f000 faab 	bl	8001420 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000eca:	f000 fc43 	bl	8001754 <MX_TIM4_Init>
  MX_TIM16_Init();
 8000ece:	f000 fcb9 	bl	8001844 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000ed2:	f000 fcdd 	bl	8001890 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000ed6:	f000 fe31 	bl	8001b3c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000eda:	f000 ffa3 	bl	8001e24 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <main+0x5c>)
 8000ee0:	f006 f98e 	bl	8007200 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x58>
 8000ee6:	bf00      	nop
 8000ee8:	200003d4 	.word	0x200003d4

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b098      	sub	sp, #96	; 0x60
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	2248      	movs	r2, #72	; 0x48
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f008 fd36 	bl	800996c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f12:	f002 ff3b 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f1c:	f000 f87e 	bl	800101c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f20:	f002 ff16 	bl	8003d50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2a:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f2c:	f023 0318 	bic.w	r3, r3, #24
 8000f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000f34:	2316      	movs	r3, #22
 8000f36:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f38:	2381      	movs	r3, #129	; 0x81
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000f4e:	2370      	movs	r3, #112	; 0x70
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f62:	2307      	movs	r3, #7
 8000f64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ff9a 	bl	8003eac <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f7e:	f000 f84d 	bl	800101c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2303      	movs	r3, #3
 8000f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2103      	movs	r1, #3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fc68 	bl	8004870 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000fa6:	f000 f839 	bl	800101c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000faa:	f005 fa67 	bl	800647c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fae:	bf00      	nop
 8000fb0:	3760      	adds	r7, #96	; 0x60
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0a6      	sub	sp, #152	; 0x98
 8000fc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2294      	movs	r2, #148	; 0x94
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 fccf 	bl	800996c <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8000fce:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000fd2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000fe8:	2330      	movs	r3, #48	; 0x30
 8000fea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000fec:	2311      	movs	r3, #17
 8000fee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <PeriphCommonClock_Config+0x5c>)
 8000ffa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 ff16 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800100a:	f000 f807 	bl	800101c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3798      	adds	r7, #152	; 0x98
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	01010000 	.word	0x01010000

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_OCTOSPI1_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001034:	2201      	movs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001046:	2220      	movs	r2, #32
 8001048:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 800107c:	2208      	movs	r2, #8
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_OCTOSPI1_Init+0x74>)
 8001088:	f002 fc52 	bl	8003930 <HAL_OSPI_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8001092:	f7ff ffc3 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200001e4 	.word	0x200001e4
 80010a0:	44021000 	.word	0x44021000

080010a4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b0      	sub	sp, #192	; 0xc0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2294      	movs	r2, #148	; 0x94
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fc51 	bl	800996c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_OSPI_MspInit+0x164>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	f040 8094 	bne.w	80011fe <HAL_OSPI_MspInit+0x15a>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80010d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fea2 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 80010f2:	f7ff ff93 	bl	800101c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <HAL_OSPI_MspInit+0x168>)
 80010f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fa:	4a44      	ldr	r2, [pc, #272]	; (800120c <HAL_OSPI_MspInit+0x168>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6513      	str	r3, [r2, #80]	; 0x50
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_OSPI_MspInit+0x168>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a38      	ldr	r2, [pc, #224]	; (800120c <HAL_OSPI_MspInit+0x168>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_OSPI_MspInit+0x168>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_OSPI_MspInit+0x168>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8001156:	230e      	movs	r3, #14
 8001158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800116e:	230a      	movs	r3, #10
 8001170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <HAL_OSPI_MspInit+0x16c>)
 800117c:	f002 f91a 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001180:	2301      	movs	r3, #1
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011a2:	4619      	mov	r1, r3
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <HAL_OSPI_MspInit+0x16c>)
 80011a6:	f002 f905 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 80011aa:	23cc      	movs	r3, #204	; 0xcc
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011c2:	230a      	movs	r3, #10
 80011c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011cc:	4619      	mov	r1, r3
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <HAL_OSPI_MspInit+0x170>)
 80011d0:	f002 f8f0 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 80011d4:	2307      	movs	r3, #7
 80011d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011ec:	230a      	movs	r3, #10
 80011ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011f6:	4619      	mov	r1, r3
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_OSPI_MspInit+0x174>)
 80011fa:	f002 f8db 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	37c0      	adds	r7, #192	; 0xc0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	44021000 	.word	0x44021000
 800120c:	40021000 	.word	0x40021000
 8001210:	42020800 	.word	0x42020800
 8001214:	42020000 	.word	0x42020000
 8001218:	42020400 	.word	0x42020400

0800121c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <MX_SAI1_Init+0x124>)
 8001222:	4a48      	ldr	r2, [pc, #288]	; (8001344 <MX_SAI1_Init+0x128>)
 8001224:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <MX_SAI1_Init+0x124>)
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MX_SAI1_Init+0x124>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001232:	4b43      	ldr	r3, [pc, #268]	; (8001340 <MX_SAI1_Init+0x124>)
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MX_SAI1_Init+0x124>)
 800123a:	2200      	movs	r2, #0
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <MX_SAI1_Init+0x124>)
 8001240:	2200      	movs	r2, #0
 8001242:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_SAI1_Init+0x124>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MX_SAI1_Init+0x124>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_SAI1_Init+0x124>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <MX_SAI1_Init+0x124>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_SAI1_Init+0x124>)
 800125e:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <MX_SAI1_Init+0x12c>)
 8001260:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <MX_SAI1_Init+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_SAI1_Init+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_SAI1_Init+0x124>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <MX_SAI1_Init+0x124>)
 8001276:	2200      	movs	r2, #0
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <MX_SAI1_Init+0x124>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_SAI1_Init+0x124>)
 8001284:	2201      	movs	r2, #1
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <MX_SAI1_Init+0x124>)
 800128a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <MX_SAI1_Init+0x124>)
 8001292:	2208      	movs	r2, #8
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_SAI1_Init+0x124>)
 8001298:	2201      	movs	r2, #1
 800129a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_SAI1_Init+0x124>)
 800129e:	2200      	movs	r2, #0
 80012a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_SAI1_Init+0x124>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_SAI1_Init+0x124>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_SAI1_Init+0x124>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_SAI1_Init+0x124>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_SAI1_Init+0x124>)
 80012bc:	2201      	movs	r2, #1
 80012be:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_SAI1_Init+0x124>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80012c6:	481e      	ldr	r0, [pc, #120]	; (8001340 <MX_SAI1_Init+0x124>)
 80012c8:	f005 fc2e 	bl	8006b28 <HAL_SAI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 80012d2:	f7ff fea3 	bl	800101c <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_SAI1_Init+0x130>)
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <MX_SAI1_Init+0x134>)
 80012da:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_SAI1_Init+0x130>)
 80012de:	2204      	movs	r2, #4
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_SAI1_Init+0x130>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_SAI1_Init+0x130>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SAI1_Init+0x130>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_SAI1_Init+0x130>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SAI1_Init+0x130>)
 80012fc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001300:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SAI1_Init+0x130>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_SAI1_Init+0x130>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SAI1_Init+0x130>)
 8001310:	2200      	movs	r2, #0
 8001312:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_SAI1_Init+0x130>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_SAI1_Init+0x130>)
 800131e:	2201      	movs	r2, #1
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SAI1_Init+0x130>)
 8001324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_SAI1_Init+0x130>)
 800132c:	f005 fbfc 	bl	8006b28 <HAL_SAI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8001336:	f7ff fe71 	bl	800101c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000023c 	.word	0x2000023c
 8001344:	40015404 	.word	0x40015404
 8001348:	0002ee00 	.word	0x0002ee00
 800134c:	200002d4 	.word	0x200002d4
 8001350:	40015424 	.word	0x40015424

08001354 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_SAI_MspInit+0xb8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d124      	bne.n	80013b0 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10b      	bne.n	8001386 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 800138e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6;
 8001390:	2374      	movs	r3, #116	; 0x74
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013a0:	230d      	movs	r3, #13
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <HAL_SAI_MspInit+0xc4>)
 80013ac:	f002 f802 	bl	80033b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_SAI_MspInit+0xc8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d124      	bne.n	8001404 <HAL_SAI_MspInit+0xb0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10b      	bne.n	80013da <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_SAI_MspInit+0xc0>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_SAI_MspInit+0xbc>)
 80013e2:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013f4:	230d      	movs	r3, #13
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <HAL_SAI_MspInit+0xc4>)
 8001400:	f001 ffd8 	bl	80033b4 <HAL_GPIO_Init>

    }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40015404 	.word	0x40015404
 8001410:	2000036c 	.word	0x2000036c
 8001414:	40021000 	.word	0x40021000
 8001418:	42021000 	.word	0x42021000
 800141c:	40015424 	.word	0x40015424

08001420 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_SPI1_Init+0x70>)
 8001426:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_SPI1_Init+0x74>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_SPI1_Init+0x70>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_SPI1_Init+0x70>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_SPI1_Init+0x70>)
 800143a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800143e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_SPI1_Init+0x70>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_SPI1_Init+0x70>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_SPI1_Init+0x70>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_SPI1_Init+0x70>)
 8001454:	2210      	movs	r2, #16
 8001456:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_SPI1_Init+0x70>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_SPI1_Init+0x70>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_SPI1_Init+0x70>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_SPI1_Init+0x70>)
 800146c:	2207      	movs	r2, #7
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_SPI1_Init+0x70>)
 8001472:	2200      	movs	r2, #0
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_SPI1_Init+0x70>)
 8001478:	2208      	movs	r2, #8
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_SPI1_Init+0x70>)
 800147e:	f005 fd7d 	bl	8006f7c <HAL_SPI_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8001488:	f7ff fdc8 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000370 	.word	0x20000370
 8001494:	40013000 	.word	0x40013000

08001498 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d129      	bne.n	800150e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c4:	6613      	str	r3, [r2, #96]	; 0x60
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_SPI_MspInit+0x84>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80014ea:	f002 fcab 	bl	8003e44 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80014ee:	233c      	movs	r3, #60	; 0x3c
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fe:	2305      	movs	r3, #5
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <HAL_SPI_MspInit+0x88>)
 800150a:	f001 ff53 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40013000 	.word	0x40013000
 800151c:	40021000 	.word	0x40021000
 8001520:	42021800 	.word	0x42021800

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 fd3e 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM4_IRQHandler+0x10>)
 80015c6:	f005 ff4d 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200003d4 	.word	0x200003d4

080015d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <SystemCoreClockUpdate+0x144>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <SystemCoreClockUpdate+0x144>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e005      	b.n	8001626 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <SystemCoreClockUpdate+0x144>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001626:	4a46      	ldr	r2, [pc, #280]	; (8001740 <SystemCoreClockUpdate+0x148>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001630:	4b42      	ldr	r3, [pc, #264]	; (800173c <SystemCoreClockUpdate+0x144>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d866      	bhi.n	800170a <SystemCoreClockUpdate+0x112>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <SystemCoreClockUpdate+0x4c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	0800170b 	.word	0x0800170b
 800164c:	0800170b 	.word	0x0800170b
 8001650:	0800170b 	.word	0x0800170b
 8001654:	08001681 	.word	0x08001681
 8001658:	0800170b 	.word	0x0800170b
 800165c:	0800170b 	.word	0x0800170b
 8001660:	0800170b 	.word	0x0800170b
 8001664:	08001689 	.word	0x08001689
 8001668:	0800170b 	.word	0x0800170b
 800166c:	0800170b 	.word	0x0800170b
 8001670:	0800170b 	.word	0x0800170b
 8001674:	08001691 	.word	0x08001691
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001678:	4a32      	ldr	r2, [pc, #200]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6013      	str	r3, [r2, #0]
      break;
 800167e:	e048      	b.n	8001712 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 8001682:	4a31      	ldr	r2, [pc, #196]	; (8001748 <SystemCoreClockUpdate+0x150>)
 8001684:	601a      	str	r2, [r3, #0]
      break;
 8001686:	e044      	b.n	8001712 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 800168a:	4a30      	ldr	r2, [pc, #192]	; (800174c <SystemCoreClockUpdate+0x154>)
 800168c:	601a      	str	r2, [r3, #0]
      break;
 800168e:	e040      	b.n	8001712 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <SystemCoreClockUpdate+0x144>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <SystemCoreClockUpdate+0x144>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	3301      	adds	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d003      	beq.n	80016b6 <SystemCoreClockUpdate+0xbe>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d006      	beq.n	80016c2 <SystemCoreClockUpdate+0xca>
 80016b4:	e00b      	b.n	80016ce <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <SystemCoreClockUpdate+0x150>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
          break;
 80016c0:	e00b      	b.n	80016da <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016c2:	4a22      	ldr	r2, [pc, #136]	; (800174c <SystemCoreClockUpdate+0x154>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	613b      	str	r3, [r7, #16]
          break;
 80016cc:	e005      	b.n	80016da <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	613b      	str	r3, [r7, #16]
          break;
 80016d8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <SystemCoreClockUpdate+0x144>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <SystemCoreClockUpdate+0x144>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0e5b      	lsrs	r3, r3, #25
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 8001706:	6013      	str	r3, [r2, #0]
      break;
 8001708:	e003      	b.n	8001712 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	6013      	str	r3, [r2, #0]
      break;
 8001710:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <SystemCoreClockUpdate+0x144>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <SystemCoreClockUpdate+0x158>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemCoreClockUpdate+0x14c>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	080099ac 	.word	0x080099ac
 8001744:	20000000 	.word	0x20000000
 8001748:	00f42400 	.word	0x00f42400
 800174c:	007a1200 	.word	0x007a1200
 8001750:	08009994 	.word	0x08009994

08001754 <MX_TIM4_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM4_Init+0xe8>)
 8001788:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <MX_TIM4_Init+0xec>)
 800178a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM4_Init+0xe8>)
 800178e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <MX_TIM4_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM4_Init+0xe8>)
 800179c:	f242 720f 	movw	r2, #9999	; 0x270f
 80017a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM4_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_TIM4_Init+0xe8>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_TIM4_Init+0xe8>)
 80017b0:	f005 fccf 	bl	8007152 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f7ff fc2f 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_TIM4_Init+0xe8>)
 80017cc:	f006 f8f0 	bl	80079b0 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80017d6:	f7ff fc21 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM4_Init+0xe8>)
 80017dc:	f005 fd80 	bl	80072e0 <HAL_TIM_OC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80017e6:	f7ff fc19 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_TIM4_Init+0xe8>)
 80017fa:	f006 fdd3 	bl	80083a4 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001804:	f7ff fc0a 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001808:	2330      	movs	r3, #48	; 0x30
 800180a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM4_Init+0xe8>)
 8001820:	f005 ff40 	bl	80076a4 <HAL_TIM_OC_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800182a:	f7ff fbf7 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM4_Init+0xe8>)
 8001830:	f000 f8f6 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200003d4 	.word	0x200003d4
 8001840:	40000800 	.word	0x40000800

08001844 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_TIM16_Init+0x44>)
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <MX_TIM16_Init+0x48>)
 800184c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_TIM16_Init+0x44>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_TIM16_Init+0x44>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_TIM16_Init+0x44>)
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_TIM16_Init+0x44>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_TIM16_Init+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_TIM16_Init+0x44>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_TIM16_Init+0x44>)
 8001876:	f005 fc6c 	bl	8007152 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001880:	f7ff fbcc 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000420 	.word	0x20000420
 800188c:	40014400 	.word	0x40014400

08001890 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2234      	movs	r2, #52	; 0x34
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f008 f85b 	bl	800996c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <MX_TIM17_Init+0xec>)
 80018b8:	4a31      	ldr	r2, [pc, #196]	; (8001980 <MX_TIM17_Init+0xf0>)
 80018ba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <MX_TIM17_Init+0xec>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <MX_TIM17_Init+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_TIM17_Init+0xec>)
 80018ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <MX_TIM17_Init+0xec>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <MX_TIM17_Init+0xec>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <MX_TIM17_Init+0xec>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <MX_TIM17_Init+0xec>)
 80018e4:	f005 fc35 	bl	8007152 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80018ee:	f7ff fb95 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80018f2:	4822      	ldr	r0, [pc, #136]	; (800197c <MX_TIM17_Init+0xec>)
 80018f4:	f005 fd55 	bl	80073a2 <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80018fe:	f7ff fb8d 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001902:	2360      	movs	r3, #96	; 0x60
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190e:	2300      	movs	r3, #0
 8001910:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	4815      	ldr	r0, [pc, #84]	; (800197c <MX_TIM17_Init+0xec>)
 8001928:	f005 ff32 	bl	8007790 <HAL_TIM_PWM_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001932:	f7ff fb73 	bl	800101c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <MX_TIM17_Init+0xec>)
 800195e:	f006 fda9 	bl	80084b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001968:	f7ff fb58 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <MX_TIM17_Init+0xec>)
 800196e:	f000 f857 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	; 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000046c 	.word	0x2000046c
 8001980:	40014800 	.word	0x40014800

08001984 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_TIM_Base_MspInit+0x8c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d114      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	202f      	movs	r0, #47	; 0x2f
 80019b4:	f001 fbe1 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019b8:	202f      	movs	r0, #47	; 0x2f
 80019ba:	f001 fbf8 	bl	80031ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80019be:	e022      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_TIM_Base_MspInit+0x94>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10c      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6613      	str	r3, [r2, #96]	; 0x60
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
}
 80019e2:	e010      	b.n	8001a06 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM17)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x98>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_TIM_Base_MspInit+0x90>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40014400 	.word	0x40014400
 8001a1c:	40014800 	.word	0x40014800

08001a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_TIM_MspPostInit+0xa8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11d      	bne.n	8001a7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <HAL_TIM_MspPostInit+0xb0>)
 8001a78:	f001 fc9c 	bl	80033b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001a7c:	e020      	b.n	8001ac0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_TIM_MspPostInit+0xac>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001ab0:	230e      	movs	r3, #14
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001abc:	f001 fc7a 	bl	80033b4 <HAL_GPIO_Init>
}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	42020c00 	.word	0x42020c00
 8001ad4:	40014800 	.word	0x40014800
 8001ad8:	42021000 	.word	0x42021000

08001adc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40021000 	.word	0x40021000

08001b3c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001b52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b56:	f7ff ffd9 	bl	8001b0c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff ffbe 	bl	8001adc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7ff ffbb 	bl	8001adc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <MX_UCPD1_Init+0x64>)
 8001b7a:	f007 fdc0 	bl	80096fe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b84:	2303      	movs	r3, #3
 8001b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_UCPD1_Init+0x68>)
 8001b92:	f007 fdb4 	bl	80096fe <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	42020000 	.word	0x42020000
 8001ba4:	42020400 	.word	0x42020400

08001ba8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <MX_LPUART1_UART_Init+0x94>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <MX_LPUART1_UART_Init+0x98>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bcc:	220c      	movs	r2, #12
 8001bce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001bf0:	f006 fd1e 	bl	8008630 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001bfa:	f7ff fa0f 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001c02:	f007 fa0b 	bl	800901c <HAL_UARTEx_SetTxFifoThreshold>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c0c:	f7ff fa06 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001c14:	f007 fa40 	bl	8009098 <HAL_UARTEx_SetRxFifoThreshold>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c1e:	f7ff f9fd 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_LPUART1_UART_Init+0x90>)
 8001c24:	f007 f9c1 	bl	8008faa <HAL_UARTEx_DisableFifoMode>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c2e:	f7ff f9f5 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200004b8 	.word	0x200004b8
 8001c3c:	40008000 	.word	0x40008000
 8001c40:	00033324 	.word	0x00033324

08001c44 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <MX_USART1_UART_Init+0x94>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8c:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001c8e:	f006 fccf 	bl	8008630 <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c98:	f7ff f9c0 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001ca0:	f007 f9bc 	bl	800901c <HAL_UARTEx_SetTxFifoThreshold>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001caa:	f7ff f9b7 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001cb2:	f007 f9f1 	bl	8009098 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cbc:	f7ff f9ae 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_USART1_UART_Init+0x90>)
 8001cc2:	f007 f972 	bl	8008faa <HAL_UARTEx_DisableFifoMode>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f7ff f9a6 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000548 	.word	0x20000548
 8001cd8:	40013800 	.word	0x40013800

08001cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0b0      	sub	sp, #192	; 0xc0
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	2294      	movs	r2, #148	; 0x94
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 fe35 	bl	800996c <memset>
  if(uartHandle->Instance==LPUART1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <HAL_UART_MspInit+0x134>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d13c      	bne.n	8001d86 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f889 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d24:	f7ff f97a 	bl	800101c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d72:	2308      	movs	r3, #8
 8001d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4826      	ldr	r0, [pc, #152]	; (8001e18 <HAL_UART_MspInit+0x13c>)
 8001d80:	f001 fb18 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d84:	e040      	b.n	8001e08 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_UART_MspInit+0x140>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d13b      	bne.n	8001e08 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f847 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001da8:	f7ff f938 	bl	800101c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db0:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6613      	str	r3, [r2, #96]	; 0x60
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_UART_MspInit+0x138>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001ddc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df6:	2307      	movs	r3, #7
 8001df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <HAL_UART_MspInit+0x144>)
 8001e04:	f001 fad6 	bl	80033b4 <HAL_GPIO_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	37c0      	adds	r7, #192	; 0xc0
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40008000 	.word	0x40008000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	42020400 	.word	0x42020400
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	42020000 	.word	0x42020000

08001e24 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e2a:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <MX_USB_PCD_Init+0x4c>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e30:	2208      	movs	r2, #8
 8001e32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_USB_PCD_Init+0x48>)
 8001e5a:	f001 fe69 	bl	8003b30 <HAL_PCD_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001e64:	f7ff f8da 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200005d8 	.word	0x200005d8
 8001e70:	4000d400 	.word	0x4000d400

08001e74 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ae      	sub	sp, #184	; 0xb8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2294      	movs	r2, #148	; 0x94
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f007 fd69 	bl	800996c <memset>
  if(pcdHandle->Instance==USB)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_PCD_MspInit+0xb8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d13e      	bne.n	8001f22 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001eaa:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 ffba 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001ec2:	f7ff f8ab 	bl	800101c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f02:	4619      	mov	r1, r3
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <HAL_PCD_MspInit+0xc0>)
 8001f06:	f001 fa55 	bl	80033b4 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_PCD_MspInit+0xbc>)
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001f22:	bf00      	nop
 8001f24:	37b8      	adds	r7, #184	; 0xb8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	4000d400 	.word	0x4000d400
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42020000 	.word	0x42020000

08001f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f3c:	f7ff fb4a 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f42:	e003      	b.n	8001f4c <LoopCopyDataInit>

08001f44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f4a:	3104      	adds	r1, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f54:	d3f6      	bcc.n	8001f44 <CopyDataInit>
	ldr	r2, =_sbss
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f58:	e002      	b.n	8001f60 <LoopFillZerobss>

08001f5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f5c:	f842 3b04 	str.w	r3, [r2], #4

08001f60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <LoopForever+0x16>)
	cmp	r2, r3
 8001f62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f64:	d3f9      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f66:	f007 fcdd 	bl	8009924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f6a:	f7fe ff8f 	bl	8000e8c <main>

08001f6e <LoopForever>:

LoopForever:
    b LoopForever
 8001f6e:	e7fe      	b.n	8001f6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f70:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001f74:	08009a24 	.word	0x08009a24
	ldr	r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f7c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001f80:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001f84:	200008e8 	.word	0x200008e8

08001f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_2_IRQHandler>

08001f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f94:	2004      	movs	r0, #4
 8001f96:	f001 f8e5 	bl	8003164 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001f9a:	f7ff fb2d 	bl	80015f8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f80e 	bl	8001fc0 <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	e001      	b.n	8001fb4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb0:	f7ff fab8 	bl	8001524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_InitTick+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_InitTick+0x70>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_InitTick+0x6c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 f8ed 	bl	80031ca <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d809      	bhi.n	8002010 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f001 f8b9 	bl	800317a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_InitTick+0x74>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e007      	b.n	8002020 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e004      	b.n	8002020 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e001      	b.n	8002020 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008
 800205c:	200008cc 	.word	0x200008cc

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200008cc 	.word	0x200008cc

08002078 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3360      	adds	r3, #96	; 0x60
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <LL_ADC_SetOffset+0x44>)
 8002102:	4013      	ands	r3, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	4313      	orrs	r3, r2
 8002110:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	03fff000 	.word	0x03fff000

08002128 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3330      	adds	r3, #48	; 0x30
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	211f      	movs	r1, #31
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 011f 	and.w	r1, r3, #31
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	431a      	orrs	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3314      	adds	r3, #20
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	0e5b      	lsrs	r3, r3, #25
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	0d1b      	lsrs	r3, r3, #20
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2107      	movs	r1, #7
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	401a      	ands	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	0d1b      	lsrs	r3, r3, #20
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	431a      	orrs	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0318 	and.w	r3, r3, #24
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002284:	40d9      	lsrs	r1, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	400b      	ands	r3, r1
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	0007ffff 	.word	0x0007ffff

080022a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002330:	d101      	bne.n	8002336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <LL_ADC_IsEnabled+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_IsEnabled+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d101      	bne.n	8002382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d101      	bne.n	80023a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e134      	b.n	800263c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7fe f92d 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff67 	bl	80022cc <LL_ADC_IsDeepPowerDownEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff4d 	bl	80022a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff82 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff66 	bl	80022f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002428:	4b86      	ldr	r3, [pc, #536]	; (8002644 <HAL_ADC_Init+0x28c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	4a86      	ldr	r2, [pc, #536]	; (8002648 <HAL_ADC_Init+0x290>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800243c:	e002      	b.n	8002444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3b01      	subs	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff64 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff75 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80cd 	bne.w	800262a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80c9 	bne.w	800262a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a0:	f043 0202 	orr.w	r2, r3, #2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff49 	bl	8002344 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d110      	bne.n	80024da <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b8:	4864      	ldr	r0, [pc, #400]	; (800264c <HAL_ADC_Init+0x294>)
 80024ba:	f7ff ff43 	bl	8002344 <LL_ADC_IsEnabled>
 80024be:	4604      	mov	r4, r0
 80024c0:	4863      	ldr	r0, [pc, #396]	; (8002650 <HAL_ADC_Init+0x298>)
 80024c2:	f7ff ff3f 	bl	8002344 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4323      	orrs	r3, r4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4619      	mov	r1, r3
 80024d4:	485f      	ldr	r0, [pc, #380]	; (8002654 <HAL_ADC_Init+0x29c>)
 80024d6:	f7ff fdcf 	bl	8002078 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7e5b      	ldrb	r3, [r3, #25]
 80024de:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024ea:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024f0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	3b01      	subs	r3, #1
 800250e:	045b      	lsls	r3, r3, #17
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	69b9      	ldr	r1, [r7, #24]
 8002542:	430b      	orrs	r3, r1
 8002544:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff0d 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002550:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff1a 	bl	8002390 <LL_ADC_INJ_IsConversionOngoing>
 800255c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d140      	bne.n	80025e6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13d      	bne.n	80025e6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7e1b      	ldrb	r3, [r3, #24]
 8002572:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002574:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800257c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800258c:	f023 0306 	bic.w	r3, r3, #6
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	430b      	orrs	r3, r1
 8002598:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d118      	bne.n	80025d6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025c6:	430a      	orrs	r2, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	e007      	b.n	80025e6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10c      	bne.n	8002608 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f023 010f 	bic.w	r1, r3, #15
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e007      	b.n	8002618 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020f 	bic.w	r2, r2, #15
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	; 0x58
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3724      	adds	r7, #36	; 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	053e2d63 	.word	0x053e2d63
 800264c:	42028000 	.word	0x42028000
 8002650:	42028100 	.word	0x42028100
 8002654:	42028300 	.word	0x42028300
 8002658:	fff0c007 	.word	0xfff0c007

0800265c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b0b7      	sub	sp, #220	; 0xdc
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x22>
 800267a:	2302      	movs	r3, #2
 800267c:	e3c1      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x7a6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fe6d 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 83a6 	bne.w	8002de4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f7ff fd83 	bl	80021b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe5b 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 80026b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fe67 	bl	8002390 <LL_ADC_INJ_IsConversionOngoing>
 80026c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 81c1 	bne.w	8002a52 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 81bc 	bne.w	8002a52 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026e2:	d10f      	bne.n	8002704 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7ff fd8a 	bl	8002208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd44 	bl	800218a <LL_ADC_SetSamplingTimeCommonConfig>
 8002702:	e00e      	b.n	8002722 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	461a      	mov	r2, r3
 8002712:	f7ff fd79 	bl	8002208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fd34 	bl	800218a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00a      	beq.n	800275a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6919      	ldr	r1, [r3, #16]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002754:	f7ff fcc4 	bl	80020e0 <LL_ADC_SetOffset>
 8002758:	e17b      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fce1 	bl	8002128 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x12a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fcd6 	bl	8002128 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	e01e      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x168>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fccb 	bl	8002128 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e004      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80027b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x180>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	e018      	b.n	800280e <HAL_ADC_ConfigChannel+0x1b2>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e004      	b.n	800280e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fc9a 	bl	8002154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fc7e 	bl	8002128 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x1f0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fc73 	bl	8002128 <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 021f 	and.w	r2, r3, #31
 800284a:	e01e      	b.n	800288a <HAL_ADC_ConfigChannel+0x22e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc68 	bl	8002128 <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800286a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800286e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e004      	b.n	8002888 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800287e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x246>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	e018      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x278>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e004      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80028ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc37 	bl	8002154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fc1b 	bl	8002128 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x2b6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fc10 	bl	8002128 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	e01e      	b.n	8002950 <HAL_ADC_ConfigChannel+0x2f4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc05 	bl	8002128 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e004      	b.n	800294e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x30c>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	e016      	b.n	8002996 <HAL_ADC_ConfigChannel+0x33a>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800297a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800297c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800298c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002996:	429a      	cmp	r2, r3
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fbd6 	bl	8002154 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2103      	movs	r1, #3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fbba 	bl	8002128 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x378>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2103      	movs	r1, #3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fbaf 	bl	8002128 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	e017      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x3a8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2103      	movs	r1, #3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fba4 	bl	8002128 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x3c0>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	e011      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x3e4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d106      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fb81 	bl	8002154 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fc74 	bl	8002344 <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 81c9 	bne.w	8002df6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f7ff fbf5 	bl	8002260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a8f      	ldr	r2, [pc, #572]	; (8002cb8 <HAL_ADC_ConfigChannel+0x65c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	f040 8131 	bne.w	8002ce4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x44e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	bf94      	ite	ls
 8002aa2:	2301      	movls	r3, #1
 8002aa4:	2300      	movhi	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e019      	b.n	8002ade <HAL_ADC_ConfigChannel+0x482>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aba:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d079      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x4a2>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afc:	e015      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x4ce>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	069b      	lsls	r3, r3, #26
 8002b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4ee>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	e017      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x51e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x544>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	051b      	lsls	r3, r3, #20
 8002b9e:	e018      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x576>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	e081      	b.n	8002cda <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x596>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	069b      	lsls	r3, r3, #26
 8002bec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf0:	e015      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x5c2>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e003      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	069b      	lsls	r3, r3, #26
 8002c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x5e2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	e017      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x612>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	ea42 0103 	orr.w	r1, r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x63e>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 021f 	and.w	r2, r3, #31
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	051b      	lsls	r3, r3, #20
 8002c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c98:	e01e      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x67c>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	613b      	str	r3, [r7, #16]
  return result;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e006      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x668>
 8002cb6:	bf00      	nop
 8002cb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b1e      	subs	r3, #30
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	6892      	ldr	r2, [r2, #8]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7ff fa92 	bl	8002208 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_ADC_ConfigChannel+0x7b0>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8082 	beq.w	8002df6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf2:	4847      	ldr	r0, [pc, #284]	; (8002e10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cf4:	f7ff f9e6 	bl	80020c4 <LL_ADC_GetCommonPathInternalCh>
 8002cf8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cfc:	4845      	ldr	r0, [pc, #276]	; (8002e14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cfe:	f7ff fb21 	bl	8002344 <LL_ADC_IsEnabled>
 8002d02:	4604      	mov	r4, r0
 8002d04:	4844      	ldr	r0, [pc, #272]	; (8002e18 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d06:	f7ff fb1d 	bl	8002344 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4323      	orrs	r3, r4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d15e      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a41      	ldr	r2, [pc, #260]	; (8002e1c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d127      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d121      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d161      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4834      	ldr	r0, [pc, #208]	; (8002e10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d3e:	f7ff f9ae 	bl	800209e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d6a:	e044      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d113      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x742>
 8002d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d134      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d94:	4619      	mov	r1, r3
 8002d96:	481e      	ldr	r0, [pc, #120]	; (8002e10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d98:	f7ff f981 	bl	800209e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d9c:	e02b      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_ADC_ConfigChannel+0x7d0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d126      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d120      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4811      	ldr	r0, [pc, #68]	; (8002e10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002dca:	f7ff f968 	bl	800209e <LL_ADC_SetCommonPathInternalCh>
 8002dce:	e012      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002de2:	e008      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	37dc      	adds	r7, #220	; 0xdc
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	80080000 	.word	0x80080000
 8002e10:	42028300 	.word	0x42028300
 8002e14:	42028000 	.word	0x42028000
 8002e18:	42028100 	.word	0x42028100
 8002e1c:	c7520000 	.word	0xc7520000
 8002e20:	20000000 	.word	0x20000000
 8002e24:	053e2d63 	.word	0x053e2d63
 8002e28:	cb840000 	.word	0xcb840000
 8002e2c:	80000001 	.word	0x80000001

08002e30 <LL_ADC_IsEnabled>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <LL_ADC_IsEnabled+0x18>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <LL_ADC_IsEnabled+0x1a>
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d101      	bne.n	8002e6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b0a1      	sub	sp, #132	; 0x84
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e089      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a42      	ldr	r2, [pc, #264]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e001      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e068      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ffb9 	bl	8002e56 <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ffb3 	bl	8002e56 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d14a      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d147      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002efe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d027      	beq.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1a:	035b      	lsls	r3, r3, #13
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f24:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f26:	f7ff ff83 	bl	8002e30 <LL_ADC_IsEnabled>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4823      	ldr	r0, [pc, #140]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f2e:	f7ff ff7f 	bl	8002e30 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4323      	orrs	r3, r4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d132      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f42:	f023 030f 	bic.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6892      	ldr	r2, [r2, #8]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f54:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f56:	e023      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f64:	4814      	ldr	r0, [pc, #80]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f66:	f7ff ff63 	bl	8002e30 <LL_ADC_IsEnabled>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4813      	ldr	r0, [pc, #76]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f6e:	f7ff ff5f 	bl	8002e30 <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4323      	orrs	r3, r4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f82:	f023 030f 	bic.w	r3, r3, #15
 8002f86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8a:	e009      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002faa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3784      	adds	r7, #132	; 0x84
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	42028000 	.word	0x42028000
 8002fbc:	42028100 	.word	0x42028100
 8002fc0:	42028300 	.word	0x42028300

08002fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff6:	4a04      	ldr	r2, [pc, #16]	; (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60d3      	str	r3, [r2, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <__NVIC_GetPriorityGrouping+0x18>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0307 	and.w	r3, r3, #7
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db0b      	blt.n	8003052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4907      	ldr	r1, [pc, #28]	; (8003060 <__NVIC_EnableIRQ+0x38>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2001      	movs	r0, #1
 800304a:	fa00 f202 	lsl.w	r2, r0, r2
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <__NVIC_SetPriority+0x4c>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	0152      	lsls	r2, r2, #5
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <__NVIC_SetPriority+0x50>)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3b04      	subs	r3, #4
 800309c:	0152      	lsls	r2, r2, #5
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	bf28      	it	cs
 80030d6:	2303      	movcs	r3, #3
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3303      	adds	r3, #3
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b04      	subs	r3, #4
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003100:	f04f 31ff 	mov.w	r1, #4294967295
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43d9      	mvns	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	4313      	orrs	r3, r2
         );
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003130:	d301      	bcc.n	8003136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <SysTick_Config+0x40>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313e:	2107      	movs	r1, #7
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f7ff ff8e 	bl	8003064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SysTick_Config+0x40>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <SysTick_Config+0x40>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000e010 	.word	0xe000e010

08003164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff29 	bl	8002fc4 <__NVIC_SetPriorityGrouping>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003188:	f7ff ff40 	bl	800300c <__NVIC_GetPriorityGrouping>
 800318c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7ff ff90 	bl	80030b8 <NVIC_EncodePriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff5f 	bl	8003064 <__NVIC_SetPriority>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff33 	bl	8003028 <__NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffa4 	bl	8003120 <SysTick_Config>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0ac      	b.n	8003350 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f8b2 	bl	8003364 <DFSDM_GetChannelFromInstance>
 8003200:	4603      	mov	r3, r0
 8003202:	4a55      	ldr	r2, [pc, #340]	; (8003358 <HAL_DFSDM_ChannelInit+0x174>)
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e09f      	b.n	8003350 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd faf5 	bl	8000800 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003216:	4b51      	ldr	r3, [pc, #324]	; (800335c <HAL_DFSDM_ChannelInit+0x178>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_DFSDM_ChannelInit+0x178>)
 800321e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003220:	4b4e      	ldr	r3, [pc, #312]	; (800335c <HAL_DFSDM_ChannelInit+0x178>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d125      	bne.n	8003274 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 800322e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003232:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003234:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4948      	ldr	r1, [pc, #288]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 8003248:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800324c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	791b      	ldrb	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	493f      	ldr	r1, [pc, #252]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <HAL_DFSDM_ChannelInit+0x17c>)
 800326e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003272:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003282:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003292:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003298:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 020f 	bic.w	r2, r2, #15
 80032b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80032d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 0207 	and.w	r2, r2, #7
 8003304:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003330:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f810 	bl	8003364 <DFSDM_GetChannelFromInstance>
 8003344:	4602      	mov	r2, r0
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_DFSDM_ChannelInit+0x174>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200008d4 	.word	0x200008d4
 800335c:	200008d0 	.word	0x200008d0
 8003360:	40016000 	.word	0x40016000

08003364 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <DFSDM_GetChannelFromInstance+0x44>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d102      	bne.n	800337a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e00f      	b.n	800339a <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <DFSDM_GetChannelFromInstance+0x48>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d102      	bne.n	8003388 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e008      	b.n	800339a <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <DFSDM_GetChannelFromInstance+0x4c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d102      	bne.n	8003396 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003390:	2302      	movs	r3, #2
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003396:	2303      	movs	r3, #3
 8003398:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40016000 	.word	0x40016000
 80033ac:	40016020 	.word	0x40016020
 80033b0:	40016040 	.word	0x40016040

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033c2:	e158      	b.n	8003676 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 814a 	beq.w	8003670 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d00b      	beq.n	80033fc <HAL_GPIO_Init+0x48>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d007      	beq.n	80033fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f0:	2b11      	cmp	r3, #17
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b12      	cmp	r3, #18
 80033fa:	d130      	bne.n	800345e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003432:	2201      	movs	r2, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 0201 	and.w	r2, r3, #1
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0xea>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b12      	cmp	r3, #18
 800349c:	d123      	bne.n	80034e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	08da      	lsrs	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3208      	adds	r2, #8
 80034e0:	6939      	ldr	r1, [r7, #16]
 80034e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80a4 	beq.w	8003670 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003528:	4a5a      	ldr	r2, [pc, #360]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3318      	adds	r3, #24
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_GPIO_Init+0x2e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d025      	beq.n	80035a0 <HAL_GPIO_Init+0x1ec>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a51      	ldr	r2, [pc, #324]	; (800369c <HAL_GPIO_Init+0x2e8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01f      	beq.n	800359c <HAL_GPIO_Init+0x1e8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a50      	ldr	r2, [pc, #320]	; (80036a0 <HAL_GPIO_Init+0x2ec>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d019      	beq.n	8003598 <HAL_GPIO_Init+0x1e4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a4f      	ldr	r2, [pc, #316]	; (80036a4 <HAL_GPIO_Init+0x2f0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_GPIO_Init+0x1e0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a4e      	ldr	r2, [pc, #312]	; (80036a8 <HAL_GPIO_Init+0x2f4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00d      	beq.n	8003590 <HAL_GPIO_Init+0x1dc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a4d      	ldr	r2, [pc, #308]	; (80036ac <HAL_GPIO_Init+0x2f8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <HAL_GPIO_Init+0x1d8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a4c      	ldr	r2, [pc, #304]	; (80036b0 <HAL_GPIO_Init+0x2fc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d101      	bne.n	8003588 <HAL_GPIO_Init+0x1d4>
 8003584:	2306      	movs	r3, #6
 8003586:	e00c      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 8003588:	2307      	movs	r3, #7
 800358a:	e00a      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 800358c:	2305      	movs	r3, #5
 800358e:	e008      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 8003590:	2304      	movs	r3, #4
 8003592:	e006      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 8003594:	2303      	movs	r3, #3
 8003596:	e004      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 8003598:	2302      	movs	r3, #2
 800359a:	e002      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_GPIO_Init+0x1ee>
 80035a0:	2300      	movs	r3, #0
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	f002 0203 	and.w	r2, r2, #3
 80035a8:	00d2      	lsls	r2, r2, #3
 80035aa:	4093      	lsls	r3, r2
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80035b2:	4938      	ldr	r1, [pc, #224]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3318      	adds	r3, #24
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3301      	adds	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f ae9f 	bne.w	80033c4 <HAL_GPIO_Init+0x10>
  }
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	4002f400 	.word	0x4002f400
 8003698:	42020000 	.word	0x42020000
 800369c:	42020400 	.word	0x42020400
 80036a0:	42020800 	.word	0x42020800
 80036a4:	42020c00 	.word	0x42020c00
 80036a8:	42021000 	.word	0x42021000
 80036ac:	42021400 	.word	0x42021400
 80036b0:	42021800 	.word	0x42021800

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e081      	b.n	80037fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fb60 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e006      	b.n	800376c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800376a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d104      	bne.n	800377e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d138      	bne.n	800388a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003822:	2302      	movs	r3, #2
 8003824:	e032      	b.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003854:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d139      	bne.n	8003922 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e033      	b.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7fe fb90 	bl	8002060 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e0a2      	b.n	8003a94 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 809b 	bne.w	8003a94 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fba0 	bl	80010a4 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003964:	f241 3188 	movw	r1, #5000	; 0x1388
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f89b 	bl	8003aa4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_OSPI_Init+0x170>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68d1      	ldr	r1, [r2, #12]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6912      	ldr	r2, [r2, #16]
 8003980:	3a01      	subs	r2, #1
 8003982:	0412      	lsls	r2, r2, #16
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6952      	ldr	r2, [r2, #20]
 800398a:	3a01      	subs	r2, #1
 800398c:	0212      	lsls	r2, r2, #8
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	69d2      	ldr	r2, [r2, #28]
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0412      	lsls	r2, r2, #16
 80039c4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039ce:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	021a      	lsls	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2120      	movs	r1, #32
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f863 	bl	8003ac2 <OSPI_WaitFlagStateUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d146      	bne.n	8003a94 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a3c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d107      	bne.n	8003a7c <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0202 	orr.w	r2, r2, #2
 8003a7a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a84:	d103      	bne.n	8003a8e <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a8c:	e002      	b.n	8003a94 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	f8e0f8f4 	.word	0xf8e0f8f4

08003aa4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ad2:	e01a      	b.n	8003b0a <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d016      	beq.n	8003b0a <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fac0 	bl	8002060 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00e      	b.n	8003b28 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d1d6      	bne.n	8003ad4 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b08b      	sub	sp, #44	; 0x2c
 8003b34:	af06      	add	r7, sp, #24
 8003b36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0d7      	b.n	8003cf2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fe f98c 	bl	8001e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f005 fe35 	bl	80097d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e04c      	b.n	8003c0e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	3301      	adds	r3, #1
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	b298      	uxth	r0, r3
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	3336      	adds	r3, #54	; 0x36
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3303      	adds	r3, #3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	3338      	adds	r3, #56	; 0x38
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	333c      	adds	r3, #60	; 0x3c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3340      	adds	r3, #64	; 0x40
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3ad      	bcc.n	8003b74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e044      	b.n	8003ca8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3b5      	bcc.n	8003c1e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	687e      	ldr	r6, [r7, #4]
 8003cba:	466d      	mov	r5, sp
 8003cbc:	f106 0410 	add.w	r4, r6, #16
 8003cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	1d33      	adds	r3, r6, #4
 8003cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f005 fd9e 	bl	800980e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f805 	bl	8003cfa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40007000 	.word	0x40007000

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003d9e:	f000 f861 	bl	8003e64 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d101      	bne.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e03e      	b.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dba:	d101      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e035      	b.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d101      	bne.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e02f      	b.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003dd4:	4917      	ldr	r1, [pc, #92]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003ddc:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	09db      	lsrs	r3, r3, #7
 8003dea:	2232      	movs	r2, #50	; 0x32
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfc:	e002      	b.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d102      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f2      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e24:	d101      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40007000 	.word	0x40007000
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003e40:	cccccccd 	.word	0xcccccccd

08003e44 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e52:	6053      	str	r3, [r2, #4]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40007000 	.word	0x40007000

08003e64 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	e00a      	b.n	8003e98 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	e001      	b.n	8003e98 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f000 bcd0 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec0:	4b99      	ldr	r3, [pc, #612]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eca:	4b97      	ldr	r3, [pc, #604]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80e9 	beq.w	80040b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4a>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	f040 8083 	bne.w	8003ff6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d17f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef6:	4b8c      	ldr	r3, [pc, #560]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_RCC_OscConfig+0x64>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f000 bca8 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f14:	4b84      	ldr	r3, [pc, #528]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_RCC_OscConfig+0x7e>
 8003f20:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	e005      	b.n	8003f36 <HAL_RCC_OscConfig+0x8a>
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d224      	bcs.n	8003f84 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fe98 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f000 bc88 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a74      	ldr	r2, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f56:	f043 0308 	orr.w	r3, r3, #8
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	496f      	ldr	r1, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6e:	4b6e      	ldr	r3, [pc, #440]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	496a      	ldr	r1, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
 8003f82:	e026      	b.n	8003fd2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a67      	ldr	r2, [pc, #412]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	4962      	ldr	r1, [pc, #392]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa2:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	495d      	ldr	r1, [pc, #372]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fe57 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f000 bc47 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fd2:	f000 fe13 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003fda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b54      	ldr	r3, [pc, #336]	; (8004130 <HAL_RCC_OscConfig+0x284>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd ffed 	bl	8001fc0 <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d060      	beq.n	80040b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	f000 bc35 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d039      	beq.n	8004072 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a49      	ldr	r2, [pc, #292]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800400a:	f7fe f829 	bl	8002060 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004010:	e00f      	b.n	8004032 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004012:	f7fe f825 	bl	8002060 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d908      	bls.n	8004032 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f000 bc17 	b.w	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0e9      	beq.n	8004012 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403e:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	4934      	ldr	r1, [pc, #208]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	492f      	ldr	r1, [pc, #188]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
 8004070:	e020      	b.n	80040b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004072:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800407e:	f7fd ffef 	bl	8002060 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004084:	e00e      	b.n	80040a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004086:	f7fd ffeb 	bl	8002060 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d907      	bls.n	80040a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e3dd      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ea      	bne.n	8004086 <HAL_RCC_OscConfig+0x1da>
 80040b0:	e000      	b.n	80040b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d07e      	beq.n	80041be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x226>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d10e      	bne.n	80040ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d10b      	bne.n	80040ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d06e      	beq.n	80041bc <HAL_RCC_OscConfig+0x310>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d16a      	bne.n	80041bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e3ba      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x256>
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e024      	b.n	800414c <HAL_RCC_OscConfig+0x2a0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410a:	d113      	bne.n	8004134 <HAL_RCC_OscConfig+0x288>
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a05      	ldr	r2, [pc, #20]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 8004112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a02      	ldr	r2, [pc, #8]	; (8004128 <HAL_RCC_OscConfig+0x27c>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e012      	b.n	800414c <HAL_RCC_OscConfig+0x2a0>
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	20000000 	.word	0x20000000
 8004130:	20000004 	.word	0x20000004
 8004134:	4b8b      	ldr	r3, [pc, #556]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a8a      	ldr	r2, [pc, #552]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a87      	ldr	r2, [pc, #540]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d019      	beq.n	8004188 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd ff84 	bl	8002060 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415a:	e00e      	b.n	800417a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd ff80 	bl	8002060 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d907      	bls.n	800417a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416a:	4b7e      	ldr	r3, [pc, #504]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e372      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417a:	4b7a      	ldr	r3, [pc, #488]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ea      	beq.n	800415c <HAL_RCC_OscConfig+0x2b0>
 8004186:	e01a      	b.n	80041be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd ff6a 	bl	8002060 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418e:	e00e      	b.n	80041ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd ff66 	bl	8002060 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d907      	bls.n	80041ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800419e:	4b71      	ldr	r3, [pc, #452]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e358      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ae:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ea      	bne.n	8004190 <HAL_RCC_OscConfig+0x2e4>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d06c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x330>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d119      	bne.n	800420a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d116      	bne.n	800420a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x348>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e335      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	4958      	ldr	r1, [pc, #352]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004208:	e04c      	b.n	80042a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d029      	beq.n	8004266 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a53      	ldr	r2, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd ff1f 	bl	8002060 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004224:	e00e      	b.n	8004244 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004226:	f7fd ff1b 	bl	8002060 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d907      	bls.n	8004244 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e30d      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ea      	beq.n	8004226 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b44      	ldr	r3, [pc, #272]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	4941      	ldr	r1, [pc, #260]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	e01e      	b.n	80042a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3e      	ldr	r2, [pc, #248]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd fef5 	bl	8002060 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004278:	e00e      	b.n	8004298 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427a:	f7fd fef1 	bl	8002060 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d907      	bls.n	8004298 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004288:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e2e3      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ea      	bne.n	800427a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d062      	beq.n	8004376 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d038      	beq.n	800432a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80042c0:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042d0:	e007      	b.n	80042e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f043 0310 	orr.w	r3, r3, #16
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e8:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd feb5 	bl	8002060 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f8:	e00f      	b.n	800431a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fd feb1 	bl	8002060 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b07      	cmp	r3, #7
 8004306:	d908      	bls.n	800431a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e2a2      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0e8      	beq.n	80042fa <HAL_RCC_OscConfig+0x44e>
 8004328:	e025      	b.n	8004376 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fe91 	bl	8002060 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004340:	e012      	b.n	8004368 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd fe8d 	bl	8002060 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b07      	cmp	r3, #7
 800434e:	d90b      	bls.n	8004368 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCC_OscConfig+0x4b8>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e27e      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004368:	4ba8      	ldr	r3, [pc, #672]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 812d 	beq.w	80045de <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004388:	4ba0      	ldr	r3, [pc, #640]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b9d      	ldr	r3, [pc, #628]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a9c      	ldr	r2, [pc, #624]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
 80043a0:	4b9a      	ldr	r3, [pc, #616]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	4b97      	ldr	r3, [pc, #604]	; (8004610 <HAL_RCC_OscConfig+0x764>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d11e      	bne.n	80043fa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043bc:	4b94      	ldr	r3, [pc, #592]	; (8004610 <HAL_RCC_OscConfig+0x764>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a93      	ldr	r2, [pc, #588]	; (8004610 <HAL_RCC_OscConfig+0x764>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c8:	f7fd fe4a 	bl	8002060 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ce:	e00e      	b.n	80043ee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fd fe46 	bl	8002060 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d907      	bls.n	80043ee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043de:	4b8c      	ldr	r3, [pc, #560]	; (8004610 <HAL_RCC_OscConfig+0x764>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e238      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	4b88      	ldr	r3, [pc, #544]	; (8004610 <HAL_RCC_OscConfig+0x764>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ea      	beq.n	80043d0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01f      	beq.n	8004446 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004412:	4b7e      	ldr	r3, [pc, #504]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	4a7c      	ldr	r2, [pc, #496]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	4a78      	ldr	r2, [pc, #480]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004432:	e018      	b.n	8004466 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004434:	4b75      	ldr	r3, [pc, #468]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a74      	ldr	r2, [pc, #464]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004444:	e00f      	b.n	8004466 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004446:	4b71      	ldr	r3, [pc, #452]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	4a6f      	ldr	r2, [pc, #444]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004456:	4b6d      	ldr	r3, [pc, #436]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	4a6b      	ldr	r2, [pc, #428]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800445e:	f023 0304 	bic.w	r3, r3, #4
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d068      	beq.n	8004540 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fd fdf7 	bl	8002060 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004474:	e011      	b.n	800449a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd fdf3 	bl	8002060 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d908      	bls.n	800449a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1e2      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	4b5c      	ldr	r3, [pc, #368]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0e6      	beq.n	8004476 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044b4:	4b55      	ldr	r3, [pc, #340]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	4a54      	ldr	r2, [pc, #336]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044c4:	e011      	b.n	80044ea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fdcb 	bl	8002060 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d908      	bls.n	80044ea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044d8:	4b4c      	ldr	r3, [pc, #304]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1ba      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0e6      	beq.n	80044c6 <HAL_RCC_OscConfig+0x61a>
 80044f8:	e068      	b.n	80045cc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044fa:	4b44      	ldr	r3, [pc, #272]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	4a42      	ldr	r2, [pc, #264]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800450a:	e011      	b.n	8004530 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd fda8 	bl	8002060 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d908      	bls.n	8004530 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e197      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <HAL_RCC_OscConfig+0x660>
 800453e:	e045      	b.n	80045cc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd fd8e 	bl	8002060 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004546:	e011      	b.n	800456c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd fd8a 	bl	8002060 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d908      	bls.n	800456c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455a:	4b2c      	ldr	r3, [pc, #176]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e179      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e6      	bne.n	8004548 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d021      	beq.n	80045cc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_OscConfig+0x760>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_RCC_OscConfig+0x760>)
 8004590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004598:	e011      	b.n	80045be <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fd fd61 	bl	8002060 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d908      	bls.n	80045be <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ac:	4b17      	ldr	r3, [pc, #92]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e150      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e6      	bne.n	800459a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b0e      	ldr	r3, [pc, #56]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	4a0d      	ldr	r2, [pc, #52]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d04f      	beq.n	800468a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_RCC_OscConfig+0x760>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004602:	f7fd fd2d 	bl	8002060 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x788>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004614:	f7fd fd24 	bl	8002060 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d908      	bls.n	8004634 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004622:	4b91      	ldr	r3, [pc, #580]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e115      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004634:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0e8      	beq.n	8004614 <HAL_RCC_OscConfig+0x768>
 8004642:	e022      	b.n	800468a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004644:	4b88      	ldr	r3, [pc, #544]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464a:	4a87      	ldr	r2, [pc, #540]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd fd04 	bl	8002060 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800465a:	e00f      	b.n	800467c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465c:	f7fd fd00 	bl	8002060 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d908      	bls.n	800467c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800466a:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800466c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0f1      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800467c:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e8      	bne.n	800465c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80e5 	beq.w	800485e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004694:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f000 809f 	beq.w	80047e0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d166      	bne.n	8004778 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b6f      	ldr	r3, [pc, #444]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6e      	ldr	r2, [pc, #440]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80046b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fd fcd3 	bl	8002060 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046bc:	e00e      	b.n	80046dc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fd fccf 	bl	8002060 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d907      	bls.n	80046dc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	4b66      	ldr	r3, [pc, #408]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0c1      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ea      	bne.n	80046be <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b5f      	ldr	r3, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x9c0>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f8:	3a01      	subs	r2, #1
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004702:	0212      	lsls	r2, r2, #8
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800470a:	0852      	lsrs	r2, r2, #1
 800470c:	3a01      	subs	r2, #1
 800470e:	0552      	lsls	r2, r2, #21
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	3a01      	subs	r2, #1
 800471a:	0652      	lsls	r2, r2, #25
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004722:	06d2      	lsls	r2, r2, #27
 8004724:	430a      	orrs	r2, r1
 8004726:	4950      	ldr	r1, [pc, #320]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472c:	4b4e      	ldr	r3, [pc, #312]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004738:	4b4b      	ldr	r3, [pc, #300]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd fc8c 	bl	8002060 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e00e      	b.n	800476a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fd fc88 	bl	8002060 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d907      	bls.n	800476a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475a:	4b43      	ldr	r3, [pc, #268]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e07a      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ea      	beq.n	800474c <HAL_RCC_OscConfig+0x8a0>
 8004776:	e072      	b.n	800485e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004784:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004790:	4b35      	ldr	r3, [pc, #212]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a34      	ldr	r2, [pc, #208]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a31      	ldr	r2, [pc, #196]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80047a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fc58 	bl	8002060 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b2:	e00e      	b.n	80047d2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd fc54 	bl	8002060 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d907      	bls.n	80047d2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c2:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e046      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d2:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ea      	bne.n	80047b4 <HAL_RCC_OscConfig+0x908>
 80047de:	e03e      	b.n	800485e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e039      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80047ec:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_RCC_OscConfig+0x9bc>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d12c      	bne.n	800485a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	3b01      	subs	r3, #1
 800480c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d123      	bne.n	800485a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d11b      	bne.n	800485a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d113      	bne.n	800485a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	3b01      	subs	r3, #1
 8004840:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d109      	bne.n	800485a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	019f800c 	.word	0x019f800c

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e10d      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b88      	ldr	r3, [pc, #544]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d910      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	4983      	ldr	r1, [pc, #524]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b81      	ldr	r3, [pc, #516]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0f5      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8094 	beq.w	80049ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d134      	bne.n	8004938 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	4b78      	ldr	r3, [pc, #480]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0e2      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048de:	f000 fa2d 	bl	8004d3c <RCC_GetSysClockFreqFromPLLSource>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_RCC_ClockConfig+0x244>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d956      	bls.n	800499a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048ec:	4b70      	ldr	r3, [pc, #448]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f8:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004900:	4a6b      	ldr	r2, [pc, #428]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e045      	b.n	800499a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d03f      	beq.n	800499a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13b      	bne.n	800499a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004922:	4b63      	ldr	r3, [pc, #396]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	4a61      	ldr	r2, [pc, #388]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 800492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004930:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e030      	b.n	800499a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d107      	bne.n	8004950 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004940:	4b5b      	ldr	r3, [pc, #364]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0a9      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e09d      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e095      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004978:	f000 f8a2 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 800497c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a4c      	ldr	r2, [pc, #304]	; (8004ab4 <HAL_RCC_ClockConfig+0x244>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d909      	bls.n	800499a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004986:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498e:	4a48      	ldr	r2, [pc, #288]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b45      	ldr	r3, [pc, #276]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4942      	ldr	r1, [pc, #264]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd fb58 	bl	8002060 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e013      	b.n	80049dc <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fd fb54 	bl	8002060 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d90a      	bls.n	80049dc <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	4b3a      	ldr	r3, [pc, #232]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 020c 	and.w	r2, r3, #12
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e063      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049dc:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 020c 	and.w	r2, r3, #12
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d1e2      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fa:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	492a      	ldr	r1, [pc, #168]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d210      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 020f 	bic.w	r2, r3, #15
 8004a36:	491d      	ldr	r1, [pc, #116]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e029      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a8e:	f000 f8b5 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <HAL_RCC_ClockConfig+0x248>)
 8004a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HAL_RCC_ClockConfig+0x24c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fd fa8f 	bl	8001fc0 <HAL_InitTick>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	04c4b400 	.word	0x04c4b400
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	20000004 	.word	0x20000004

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	; 0x24
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b44      	ldr	r3, [pc, #272]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d121      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d11e      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004af4:	4b3d      	ldr	r3, [pc, #244]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004b1c:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x130>)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b38:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e004      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b44:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d146      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d003      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0xb4>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d00d      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0xce>
 8004b72:	e019      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b7e:	68d2      	ldr	r2, [r2, #12]
 8004b80:	0a12      	lsrs	r2, r2, #8
 8004b82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	617b      	str	r3, [r7, #20]
        break;
 8004b8c:	e019      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	0a12      	lsrs	r2, r2, #8
 8004b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
        break;
 8004ba6:	e00c      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bb2:	68d2      	ldr	r2, [r2, #12]
 8004bb4:	0a12      	lsrs	r2, r2, #8
 8004bb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	617b      	str	r3, [r7, #20]
        break;
 8004bc0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	0e5b      	lsrs	r3, r3, #25
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	080099ac 	.word	0x080099ac
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004c00:	f7ff ff5e 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_GetHCLKFreq+0x20>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08009994 	.word	0x08009994

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff ffe8 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	080099a4 	.word	0x080099a4

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffd4 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0adb      	lsrs	r3, r3, #11
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	080099a4 	.word	0x080099a4

08004c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c80:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c8c:	f7ff f870 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 8004c90:	6138      	str	r0, [r7, #16]
 8004c92:	e014      	b.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca0:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cac:	f7ff f860 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 8004cb0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cca:	d10b      	bne.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d919      	bls.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2ba0      	cmp	r3, #160	; 0xa0
 8004cd6:	d902      	bls.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cd8:	2302      	movs	r3, #2
 8004cda:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004cdc:	e013      	b.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cde:	2301      	movs	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004ce2:	e010      	b.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d902      	bls.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cea:	2303      	movs	r3, #3
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e00a      	b.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d102      	bne.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e004      	b.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b70      	cmp	r3, #112	; 0x70
 8004d00:	d101      	bne.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 020f 	bic.w	r2, r3, #15
 8004d0e:	490a      	ldr	r1, [pc, #40]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40022000 	.word	0x40022000

08004d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004d46:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d118      	bne.n	8004d84 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d52:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d5e:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e005      	b.n	8004d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d6e:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d84:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d003      	beq.n	8004daa <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d00d      	beq.n	8004dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004da8:	e019      	b.n	8004dde <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004daa:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	0a12      	lsrs	r2, r2, #8
 8004db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	613b      	str	r3, [r7, #16]
      break;
 8004dc2:	e019      	b.n	8004df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004dce:	68d2      	ldr	r2, [r2, #12]
 8004dd0:	0a12      	lsrs	r2, r2, #8
 8004dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	613b      	str	r3, [r7, #16]
      break;
 8004ddc:	e00c      	b.n	8004df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0a12      	lsrs	r2, r2, #8
 8004dec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
      break;
 8004df6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0e5b      	lsrs	r3, r3, #25
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	3301      	adds	r3, #1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e12:	683b      	ldr	r3, [r7, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40021000 	.word	0x40021000
 8004e24:	080099ac 	.word	0x080099ac
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	007a1200 	.word	0x007a1200

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d040      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d02a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d825      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e58:	2b60      	cmp	r3, #96	; 0x60
 8004e5a:	d026      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e5c:	2b60      	cmp	r3, #96	; 0x60
 8004e5e:	d821      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d006      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d81d      	bhi.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e70:	e018      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e72:	4b8f      	ldr	r3, [pc, #572]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4a8e      	ldr	r2, [pc, #568]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e7e:	e015      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fb08 	bl	800649c <RCCEx_PLLSAI1_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e90:	e00c      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3320      	adds	r3, #32
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fbe5 	bl	8006668 <RCCEx_PLLSAI2_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
        break;
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb2:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	497b      	ldr	r1, [pc, #492]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ec8:	e001      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d047      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee2:	d030      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d82a      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d02a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef4:	d824      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d81e      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d010      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f0c:	e018      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f0e:	4b68      	ldr	r3, [pc, #416]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4a67      	ldr	r2, [pc, #412]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f1a:	e015      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 faba 	bl	800649c <RCCEx_PLLSAI1_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3320      	adds	r3, #32
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fb97 	bl	8006668 <RCCEx_PLLSAI2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	77fb      	strb	r3, [r7, #31]
        break;
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f4e:	4b58      	ldr	r3, [pc, #352]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4954      	ldr	r1, [pc, #336]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f64:	e001      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80ab 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10d      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f88:	4b49      	ldr	r3, [pc, #292]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	4a48      	ldr	r2, [pc, #288]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f92:	6593      	str	r3, [r2, #88]	; 0x58
 8004f94:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd f856 	bl	8002060 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb8:	f7fd f852 	bl	8002060 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d908      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc6:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd8:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0e9      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004fe6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d164      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01f      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d019      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800500c:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01f      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd f809 	bl	8002060 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005050:	e012      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fd f805 	bl	8002060 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005060:	4293      	cmp	r3, r2
 8005062:	d909      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005076:	e007      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0e5      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005088:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10c      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	77bb      	strb	r3, [r7, #30]
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7ffb      	ldrb	r3, [r7, #31]
 80050ba:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b9c      	ldr	r3, [pc, #624]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	4a9b      	ldr	r2, [pc, #620]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050da:	4b96      	ldr	r3, [pc, #600]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	4992      	ldr	r1, [pc, #584]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b8d      	ldr	r3, [pc, #564]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	498a      	ldr	r1, [pc, #552]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511e:	4b85      	ldr	r3, [pc, #532]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	4981      	ldr	r1, [pc, #516]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005140:	4b7c      	ldr	r3, [pc, #496]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	4979      	ldr	r1, [pc, #484]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005162:	4b74      	ldr	r3, [pc, #464]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	4970      	ldr	r1, [pc, #448]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005184:	4b6b      	ldr	r3, [pc, #428]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005192:	4968      	ldr	r1, [pc, #416]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	495f      	ldr	r1, [pc, #380]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	4957      	ldr	r1, [pc, #348]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80051ea:	4b52      	ldr	r3, [pc, #328]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f8:	494e      	ldr	r1, [pc, #312]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d031      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005214:	d00e      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521a:	d814      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005224:	d10f      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005226:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800522c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005230:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f001 f92e 	bl	800649c <RCCEx_PLLSAI1_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	77fb      	strb	r3, [r7, #31]
        break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005254:	4b37      	ldr	r3, [pc, #220]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005262:	4934      	ldr	r1, [pc, #208]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800526a:	e001      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	7ffb      	ldrb	r3, [r7, #31]
 800526e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527c:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	492a      	ldr	r1, [pc, #168]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800529e:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	4921      	ldr	r1, [pc, #132]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	4919      	ldr	r1, [pc, #100]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e8:	f023 0203 	bic.w	r2, r3, #3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f0:	4910      	ldr	r1, [pc, #64]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02b      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	4908      	ldr	r1, [pc, #32]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005322:	d109      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a02      	ldr	r2, [pc, #8]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532e:	60d3      	str	r3, [r2, #12]
 8005330:	e014      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f001 f8a7 	bl	800649c <RCCEx_PLLSAI1_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005352:	7ffb      	ldrb	r3, [r7, #31]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d04a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005370:	d108      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005372:	4b70      	ldr	r3, [pc, #448]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005378:	4a6e      	ldr	r2, [pc, #440]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800537a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005382:	e012      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005384:	4b6b      	ldr	r3, [pc, #428]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005392:	4968      	ldr	r1, [pc, #416]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800539a:	4b66      	ldr	r3, [pc, #408]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800539c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053a0:	4a64      	ldr	r2, [pc, #400]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b2:	d10d      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	2101      	movs	r1, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 f86e 	bl	800649c <RCCEx_PLLSAI1_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d019      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	77bb      	strb	r3, [r7, #30]
 80053ce:	e016      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053d8:	d106      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053da:	4b56      	ldr	r3, [pc, #344]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a55      	ldr	r2, [pc, #340]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e4:	60d3      	str	r3, [r2, #12]
 80053e6:	e00a      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f0:	d105      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a4f      	ldr	r2, [pc, #316]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d028      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005418:	4946      	ldr	r1, [pc, #280]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005428:	d106      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a41      	ldr	r2, [pc, #260]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005434:	60d3      	str	r3, [r2, #12]
 8005436:	e011      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005440:	d10c      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f827 	bl	800649c <RCCEx_PLLSAI1_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005452:	7ffb      	ldrb	r3, [r7, #31]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005478:	492e      	ldr	r1, [pc, #184]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548a:	d10c      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f802 	bl	800649c <RCCEx_PLLSAI1_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800549c:	7ffb      	ldrb	r3, [r7, #31]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80054a2:	7ffb      	ldrb	r3, [r7, #31]
 80054a4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b8:	f023 0204 	bic.w	r2, r3, #4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c2:	491c      	ldr	r1, [pc, #112]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054dc:	f023 0218 	bic.w	r2, r3, #24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	4913      	ldr	r1, [pc, #76]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550a:	490a      	ldr	r1, [pc, #40]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800551c:	d105      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005528:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800552a:	7fbb      	ldrb	r3, [r7, #30]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000

08005538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800554a:	d13e      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800554c:	4b45      	ldr	r3, [pc, #276]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555e:	d028      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	f200 8773 	bhi.w	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005570:	d005      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005578:	d00e      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800557a:	f000 bf69 	b.w	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	f040 8763 	bne.w	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	f000 bf5e 	b.w	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005598:	4b32      	ldr	r3, [pc, #200]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	f040 8758 	bne.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 80055a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055ac:	61fb      	str	r3, [r7, #28]
        break;
 80055ae:	f000 bf53 	b.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055be:	f040 874d 	bne.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 80055c4:	61fb      	str	r3, [r7, #28]
        break;
 80055c6:	f000 bf49 	b.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ca:	4b26      	ldr	r3, [pc, #152]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d036      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d84b      	bhi.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d003      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d020      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80055ec:	e044      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d116      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	e005      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	4a13      	ldr	r2, [pc, #76]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8005620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005624:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8005626:	e02a      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
        break;
 800562c:	e027      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d102      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 800563e:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8005640:	e01d      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
        break;
 8005646:	e01a      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005654:	d102      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 8005658:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800565a:	e010      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
        break;
 8005660:	e00d      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	0003d090 	.word	0x0003d090
 800566c:	080099ac 	.word	0x080099ac
 8005670:	00f42400 	.word	0x00f42400
 8005674:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
        break;
 800567c:	bf00      	nop
    }

    switch (PeriphClk)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005684:	f000 8659 	beq.w	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800568e:	f200 86e7 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005698:	f000 8605 	beq.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a2:	f200 86dd 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ac:	f000 8468 	beq.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b6:	f200 86d3 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c0:	f000 8530 	beq.w	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ca:	f200 86c9 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056d4:	f000 8180 	beq.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056de:	f200 86bf 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056e8:	f000 80c2 	beq.w	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f2:	f200 86b5 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	f000 842f 	beq.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	f200 86ab 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005710:	f000 83e7 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800571a:	f200 86a1 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005724:	f000 80a4 	beq.w	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	f200 8697 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	f000 8092 	beq.w	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	f200 868d 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	f000 8080 	beq.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005756:	f200 8683 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	f000 8553 	beq.w	800620a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	f200 8679 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005774:	f000 84ff 	beq.w	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577e:	f200 866f 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005788:	f000 84a0 	beq.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005792:	f200 8665 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	f000 846b 	beq.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	f200 865d 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d84b      	bhi.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8656 	beq.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	2b1f      	cmp	r3, #31
 80057ba:	f200 8651 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	08005bdd 	.word	0x08005bdd
 80057c8:	08005c51 	.word	0x08005c51
 80057cc:	08006461 	.word	0x08006461
 80057d0:	08005ce3 	.word	0x08005ce3
 80057d4:	08006461 	.word	0x08006461
 80057d8:	08006461 	.word	0x08006461
 80057dc:	08006461 	.word	0x08006461
 80057e0:	08005d5b 	.word	0x08005d5b
 80057e4:	08006461 	.word	0x08006461
 80057e8:	08006461 	.word	0x08006461
 80057ec:	08006461 	.word	0x08006461
 80057f0:	08006461 	.word	0x08006461
 80057f4:	08006461 	.word	0x08006461
 80057f8:	08006461 	.word	0x08006461
 80057fc:	08006461 	.word	0x08006461
 8005800:	08005ddf 	.word	0x08005ddf
 8005804:	08006461 	.word	0x08006461
 8005808:	08006461 	.word	0x08006461
 800580c:	08006461 	.word	0x08006461
 8005810:	08006461 	.word	0x08006461
 8005814:	08006461 	.word	0x08006461
 8005818:	08006461 	.word	0x08006461
 800581c:	08006461 	.word	0x08006461
 8005820:	08006461 	.word	0x08006461
 8005824:	08006461 	.word	0x08006461
 8005828:	08006461 	.word	0x08006461
 800582c:	08006461 	.word	0x08006461
 8005830:	08006461 	.word	0x08006461
 8005834:	08006461 	.word	0x08006461
 8005838:	08006461 	.word	0x08006461
 800583c:	08006461 	.word	0x08006461
 8005840:	08005e61 	.word	0x08005e61
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	f000 83e8 	beq.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 800584c:	f000 be08 	b.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005856:	f001 f867 	bl	8006928 <RCCEx_GetSAIxPeriphCLKFreq>
 800585a:	61f8      	str	r0, [r7, #28]
        break;
 800585c:	f000 be03 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005860:	69b9      	ldr	r1, [r7, #24]
 8005862:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005866:	f001 f85f 	bl	8006928 <RCCEx_GetSAIxPeriphCLKFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	f000 bdfb 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005870:	4b9c      	ldr	r3, [pc, #624]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005882:	d015      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800588a:	f200 8096 	bhi.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005894:	d02a      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	f200 808d 	bhi.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d07f      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ac:	d04b      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80058ae:	e084      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058b0:	4b8c      	ldr	r3, [pc, #560]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f040 8081 	bne.w	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058be:	4b89      	ldr	r3, [pc, #548]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80058ca:	4b86      	ldr	r3, [pc, #536]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	e005      	b.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80058d6:	4b83      	ldr	r3, [pc, #524]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	4a81      	ldr	r2, [pc, #516]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80058e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e8:	61fb      	str	r3, [r7, #28]
            break;
 80058ea:	e069      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058ec:	4b7d      	ldr	r3, [pc, #500]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f8:	d165      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80058fa:	4b7a      	ldr	r3, [pc, #488]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d15e      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005908:	4b76      	ldr	r3, [pc, #472]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	3301      	adds	r3, #1
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800591c:	4b71      	ldr	r3, [pc, #452]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005926:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	fb03 f202 	mul.w	r2, r3, r2
 8005930:	4b6c      	ldr	r3, [pc, #432]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	0d5b      	lsrs	r3, r3, #21
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	3301      	adds	r3, #1
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	61fb      	str	r3, [r7, #28]
            break;
 8005944:	e03f      	b.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005946:	4b67      	ldr	r3, [pc, #412]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d13b      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005954:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800595c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005960:	d134      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005962:	f000 ff2d 	bl	80067c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8005966:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005968:	4b5e      	ldr	r3, [pc, #376]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	3301      	adds	r3, #1
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800597c:	4b59      	ldr	r3, [pc, #356]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005986:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	fb03 f202 	mul.w	r2, r3, r2
 8005990:	4b54      	ldr	r3, [pc, #336]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	0d5b      	lsrs	r3, r3, #21
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	3301      	adds	r3, #1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	61fb      	str	r3, [r7, #28]
            break;
 80059a4:	e012      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d10e      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 80059b4:	4b4d      	ldr	r3, [pc, #308]	; (8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80059b6:	61fb      	str	r3, [r7, #28]
            break;
 80059b8:	e00b      	b.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 80059ba:	bf00      	nop
 80059bc:	f000 bd53 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059c0:	bf00      	nop
 80059c2:	f000 bd50 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059c6:	bf00      	nop
 80059c8:	f000 bd4d 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059cc:	bf00      	nop
 80059ce:	f000 bd4a 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059d2:	bf00      	nop
        break;
 80059d4:	f000 bd47 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e6:	d13d      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059e8:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f4:	f040 8536 	bne.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80059f8:	4b3a      	ldr	r3, [pc, #232]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	f040 852e 	bne.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a08:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	3301      	adds	r3, #1
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a26:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a28:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0edb      	lsrs	r3, r3, #27
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 8005a46:	2311      	movs	r3, #17
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e001      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8005a4c:	2307      	movs	r3, #7
 8005a4e:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	fb03 f202 	mul.w	r2, r3, r2
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
        break;
 8005a60:	f000 bd00 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005a64:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a76:	d016      	beq.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a7e:	f200 809e 	bhi.w	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a88:	d032      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a90:	f200 8095 	bhi.w	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8087 	beq.w	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aa2:	d052      	beq.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005aa4:	e08b      	b.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f040 8088 	bne.w	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8005ac0:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	e005      	b.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	4a03      	ldr	r2, [pc, #12]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	61fb      	str	r3, [r7, #28]
              break;
 8005ae0:	e070      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	080099ac 	.word	0x080099ac
 8005aec:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005af0:	4baa      	ldr	r3, [pc, #680]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afc:	d165      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005afe:	4ba7      	ldr	r3, [pc, #668]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0a:	d15e      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b0c:	4ba3      	ldr	r3, [pc, #652]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	3301      	adds	r3, #1
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b20:	4b9e      	ldr	r3, [pc, #632]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2a:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	fb03 f202 	mul.w	r2, r3, r2
 8005b34:	4b99      	ldr	r3, [pc, #612]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	0d5b      	lsrs	r3, r3, #21
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	61fb      	str	r3, [r7, #28]
              break;
 8005b48:	e03f      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005b4a:	4b94      	ldr	r3, [pc, #592]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d13b      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005b58:	4b90      	ldr	r3, [pc, #576]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b64:	d134      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b66:	f000 fe2b 	bl	80067c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8005b6a:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b6c:	4b8b      	ldr	r3, [pc, #556]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3301      	adds	r3, #1
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b80:	4b86      	ldr	r3, [pc, #536]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8a:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	fb03 f202 	mul.w	r2, r3, r2
 8005b94:	4b81      	ldr	r3, [pc, #516]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	0d5b      	lsrs	r3, r3, #21
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	61fb      	str	r3, [r7, #28]
              break;
 8005ba8:	e012      	b.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005baa:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005bb8:	4b79      	ldr	r3, [pc, #484]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005bba:	61fb      	str	r3, [r7, #28]
              break;
 8005bbc:	e00b      	b.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8005bbe:	bf00      	nop
 8005bc0:	f000 bc50 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005bc4:	bf00      	nop
 8005bc6:	f000 bc4d 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005bca:	bf00      	nop
 8005bcc:	f000 bc4a 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005bd0:	bf00      	nop
 8005bd2:	f000 bc47 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005bd6:	bf00      	nop
        break;
 8005bd8:	f000 bc44 	b.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bdc:	4b6f      	ldr	r3, [pc, #444]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d827      	bhi.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c0d 	.word	0x08005c0d
 8005bfc:	08005c15 	.word	0x08005c15
 8005c00:	08005c29 	.word	0x08005c29
            frequency = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7ff f822 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
            break;
 8005c0a:	e01f      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c0c:	f7fe ff58 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005c10:	61f8      	str	r0, [r7, #28]
            break;
 8005c12:	e01b      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c14:	4b61      	ldr	r3, [pc, #388]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c20:	d110      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8005c22:	4b60      	ldr	r3, [pc, #384]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005c24:	61fb      	str	r3, [r7, #28]
            break;
 8005c26:	e00d      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c28:	4b5c      	ldr	r3, [pc, #368]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d109      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	61fb      	str	r3, [r7, #28]
            break;
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8005c3e:	bf00      	nop
 8005c40:	f000 bc11 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c44:	bf00      	nop
 8005c46:	f000 bc0e 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c4a:	bf00      	nop
        break;
 8005c4c:	f000 bc0b 	b.w	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c50:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d839      	bhi.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005cd7 	.word	0x08005cd7
 8005c70:	08005cd7 	.word	0x08005cd7
 8005c74:	08005cd7 	.word	0x08005cd7
 8005c78:	08005ca5 	.word	0x08005ca5
 8005c7c:	08005cd7 	.word	0x08005cd7
 8005c80:	08005cd7 	.word	0x08005cd7
 8005c84:	08005cd7 	.word	0x08005cd7
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cd7 	.word	0x08005cd7
 8005c90:	08005cd7 	.word	0x08005cd7
 8005c94:	08005cd7 	.word	0x08005cd7
 8005c98:	08005cc1 	.word	0x08005cc1
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fe ffc2 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005ca0:	61f8      	str	r0, [r7, #28]
            break;
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ca4:	f7fe ff0c 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005ca8:	61f8      	str	r0, [r7, #28]
            break;
 8005caa:	e019      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cac:	4b3b      	ldr	r3, [pc, #236]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb8:	d10f      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005cba:	4b3a      	ldr	r3, [pc, #232]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005cbc:	61fb      	str	r3, [r7, #28]
            break;
 8005cbe:	e00c      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cc0:	4b36      	ldr	r3, [pc, #216]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d107      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	61fb      	str	r3, [r7, #28]
            break;
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005cd6:	bf00      	nop
 8005cd8:	e3c5      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cda:	bf00      	nop
 8005cdc:	e3c3      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cde:	bf00      	nop
        break;
 8005ce0:	e3c1      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d021      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b30      	cmp	r3, #48	; 0x30
 8005cf8:	d829      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d011      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d823      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d004      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8005d12:	e01c      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fe ff86 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005d18:	61f8      	str	r0, [r7, #28]
            break;
 8005d1a:	e01d      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d1c:	f7fe fed0 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005d20:	61f8      	str	r0, [r7, #28]
            break;
 8005d22:	e019      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d24:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d10f      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005d34:	61fb      	str	r3, [r7, #28]
            break;
 8005d36:	e00c      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d38:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d107      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61fb      	str	r3, [r7, #28]
            break;
 8005d4c:	e003      	b.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8005d4e:	bf00      	nop
 8005d50:	e389      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d52:	bf00      	nop
 8005d54:	e387      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d56:	bf00      	nop
        break;
 8005d58:	e385      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d5a:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2bc0      	cmp	r3, #192	; 0xc0
 8005d6a:	d027      	beq.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d70:	d82f      	bhi.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d017      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d829      	bhi.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d004      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8005d8a:	e022      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d8c:	f7fe ff4a 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005d90:	61f8      	str	r0, [r7, #28]
            break;
 8005d92:	e023      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d94:	f7fe fe94 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005d98:	61f8      	str	r0, [r7, #28]
            break;
 8005d9a:	e01f      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	02dc6c00 	.word	0x02dc6c00
 8005da4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da8:	4b99      	ldr	r3, [pc, #612]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db4:	d10f      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005db6:	4b97      	ldr	r3, [pc, #604]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005db8:	61fb      	str	r3, [r7, #28]
            break;
 8005dba:	e00c      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dbc:	4b94      	ldr	r3, [pc, #592]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d107      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	61fb      	str	r3, [r7, #28]
            break;
 8005dd0:	e003      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005dd2:	bf00      	nop
 8005dd4:	e347      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dd6:	bf00      	nop
 8005dd8:	e345      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dda:	bf00      	nop
        break;
 8005ddc:	e343      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005dde:	4b8c      	ldr	r3, [pc, #560]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d025      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df8:	d82c      	bhi.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d013      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e08:	d824      	bhi.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e16:	d004      	beq.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005e18:	e01c      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7fe ff03 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005e1e:	61f8      	str	r0, [r7, #28]
            break;
 8005e20:	e01d      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fe fe4d 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005e26:	61f8      	str	r0, [r7, #28]
            break;
 8005e28:	e019      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e2a:	4b79      	ldr	r3, [pc, #484]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	d10f      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005e38:	4b76      	ldr	r3, [pc, #472]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005e3a:	61fb      	str	r3, [r7, #28]
            break;
 8005e3c:	e00c      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e3e:	4b74      	ldr	r3, [pc, #464]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d107      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e50:	61fb      	str	r3, [r7, #28]
            break;
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005e54:	bf00      	nop
 8005e56:	e306      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e58:	bf00      	nop
 8005e5a:	e304      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e5c:	bf00      	nop
        break;
 8005e5e:	e302      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e60:	4b6b      	ldr	r3, [pc, #428]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e72:	d025      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7a:	d82c      	bhi.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e82:	d013      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d824      	bhi.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d004      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005e9a:	e01c      	b.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7fe fec2 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005ea0:	61f8      	str	r0, [r7, #28]
            break;
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ea4:	f7fe fe0c 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005ea8:	61f8      	str	r0, [r7, #28]
            break;
 8005eaa:	e019      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b58      	ldr	r3, [pc, #352]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	d10f      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005eba:	4b56      	ldr	r3, [pc, #344]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005ebc:	61fb      	str	r3, [r7, #28]
            break;
 8005ebe:	e00c      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ec0:	4b53      	ldr	r3, [pc, #332]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d107      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	61fb      	str	r3, [r7, #28]
            break;
 8005ed4:	e003      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005ed6:	bf00      	nop
 8005ed8:	e2c5      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005eda:	bf00      	nop
 8005edc:	e2c3      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005ede:	bf00      	nop
        break;
 8005ee0:	e2c1      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef4:	d007      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005efc:	d12b      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fe fddf 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005f02:	61f8      	str	r0, [r7, #28]
            break;
 8005f04:	e02a      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005f06:	4b42      	ldr	r3, [pc, #264]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d023      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005f12:	f000 fc55 	bl	80067c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8005f16:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f18:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	3301      	adds	r3, #1
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	fb03 f202 	mul.w	r2, r3, r2
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	0e5b      	lsrs	r3, r3, #25
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	61fb      	str	r3, [r7, #28]
            break;
 8005f54:	e001      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005f56:	bf00      	nop
 8005f58:	e285      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005f5a:	bf00      	nop
        break;
 8005f5c:	e283      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe fe6c 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005f74:	61f8      	str	r0, [r7, #28]
        break;
 8005f76:	e276      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f78:	f7fe fda2 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005f7c:	61f8      	str	r0, [r7, #28]
        break;
 8005f7e:	e272      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f80:	4b23      	ldr	r3, [pc, #140]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f86:	f003 0318 	and.w	r3, r3, #24
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d010      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d834      	bhi.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d024      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005fa4:	e02d      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fac:	f000 fcbc 	bl	8006928 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fb0:	61f8      	str	r0, [r7, #28]
            break;
 8005fb2:	e02b      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d122      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fc0:	4b13      	ldr	r3, [pc, #76]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	61fb      	str	r3, [r7, #28]
            break;
 8005fec:	e00b      	b.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffa:	d106      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005ffe:	61fb      	str	r3, [r7, #28]
            break;
 8006000:	e003      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8006002:	bf00      	nop
 8006004:	e22f      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006006:	bf00      	nop
 8006008:	e22d      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800600a:	bf00      	nop
        break;
 800600c:	e22b      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	00f42400 	.word	0x00f42400
 8006018:	080099ac 	.word	0x080099ac
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800601c:	4b96      	ldr	r3, [pc, #600]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	d013      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d819      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d004      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8006046:	e011      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006048:	f7fe fdec 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800604c:	61f8      	str	r0, [r7, #28]
            break;
 800604e:	e010      	b.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8006050:	f7fe fd36 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8006054:	61f8      	str	r0, [r7, #28]
            break;
 8006056:	e00c      	b.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006058:	4b87      	ldr	r3, [pc, #540]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006064:	d104      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 8006066:	4b85      	ldr	r3, [pc, #532]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006068:	61fb      	str	r3, [r7, #28]
            break;
 800606a:	e001      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 800606c:	bf00      	nop
 800606e:	e1fa      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006070:	bf00      	nop
        break;
 8006072:	e1f8      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006074:	4b80      	ldr	r3, [pc, #512]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006086:	d013      	beq.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	d819      	bhi.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 800609e:	e011      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fdc0 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61f8      	str	r0, [r7, #28]
            break;
 80060a6:	e010      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 80060a8:	f7fe fd0a 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 80060ac:	61f8      	str	r0, [r7, #28]
            break;
 80060ae:	e00c      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b0:	4b71      	ldr	r3, [pc, #452]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d104      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 80060be:	4b6f      	ldr	r3, [pc, #444]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80060c0:	61fb      	str	r3, [r7, #28]
            break;
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 80060c4:	bf00      	nop
 80060c6:	e1ce      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060c8:	bf00      	nop
        break;
 80060ca:	e1cc      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060cc:	4b6a      	ldr	r3, [pc, #424]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060de:	d013      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060e6:	d819      	bhi.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d004      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fe fd94 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80060fc:	61f8      	str	r0, [r7, #28]
            break;
 80060fe:	e010      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8006100:	f7fe fcde 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8006104:	61f8      	str	r0, [r7, #28]
            break;
 8006106:	e00c      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006114:	d104      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8006116:	4b59      	ldr	r3, [pc, #356]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006118:	61fb      	str	r3, [r7, #28]
            break;
 800611a:	e001      	b.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 800611c:	bf00      	nop
 800611e:	e1a2      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006120:	bf00      	nop
        break;
 8006122:	e1a0      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006124:	4b54      	ldr	r3, [pc, #336]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d011      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d818      	bhi.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d004      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8006148:	e011      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 800614a:	f7fe fd6b 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800614e:	61f8      	str	r0, [r7, #28]
            break;
 8006150:	e010      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8006152:	f7fe fcb5 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8006156:	61f8      	str	r0, [r7, #28]
            break;
 8006158:	e00c      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800615a:	4b47      	ldr	r3, [pc, #284]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006166:	d104      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8006168:	4b44      	ldr	r3, [pc, #272]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800616a:	61fb      	str	r3, [r7, #28]
            break;
 800616c:	e001      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 800616e:	bf00      	nop
 8006170:	e179      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006172:	bf00      	nop
        break;
 8006174:	e177      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006176:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006188:	d02c      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006190:	d833      	bhi.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006198:	d01a      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061a0:	d82b      	bhi.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ae:	d004      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 80061b0:	e023      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80061b2:	f7fe fd37 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80061b6:	61f8      	str	r0, [r7, #28]
            break;
 80061b8:	e026      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d11a      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 80061c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061cc:	61fb      	str	r3, [r7, #28]
            break;
 80061ce:	e016      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061dc:	d111      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80061e0:	61fb      	str	r3, [r7, #28]
            break;
 80061e2:	e00e      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061e4:	4b24      	ldr	r3, [pc, #144]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d109      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	61fb      	str	r3, [r7, #28]
            break;
 80061f8:	e005      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 80061fa:	bf00      	nop
 80061fc:	e133      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061fe:	bf00      	nop
 8006200:	e131      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006202:	bf00      	nop
 8006204:	e12f      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006206:	bf00      	nop
        break;
 8006208:	e12d      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800621c:	d030      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006224:	d837      	bhi.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800622c:	d01a      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006234:	d82f      	bhi.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d004      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8006244:	e027      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006246:	f7fe fced 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800624a:	61f8      	str	r0, [r7, #28]
            break;
 800624c:	e02a      	b.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d11e      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 800625c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006260:	61fb      	str	r3, [r7, #28]
            break;
 8006262:	e01a      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d115      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8006272:	4b02      	ldr	r3, [pc, #8]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006274:	61fb      	str	r3, [r7, #28]
            break;
 8006276:	e012      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8006278:	40021000 	.word	0x40021000
 800627c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006280:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d109      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 800628e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006292:	61fb      	str	r3, [r7, #28]
            break;
 8006294:	e005      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8006296:	bf00      	nop
 8006298:	e0e5      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800629a:	bf00      	nop
 800629c:	e0e3      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800629e:	bf00      	nop
 80062a0:	e0e1      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062a2:	bf00      	nop
        break;
 80062a4:	e0df      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80062a6:	4b72      	ldr	r3, [pc, #456]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062b8:	d02c      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062c0:	d833      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062c8:	d01a      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d0:	d82b      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062de:	d004      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 80062e0:	e023      	b.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fe fc9f 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80062e6:	61f8      	str	r0, [r7, #28]
            break;
 80062e8:	e026      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80062ea:	4b61      	ldr	r3, [pc, #388]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d11a      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 80062f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062fc:	61fb      	str	r3, [r7, #28]
            break;
 80062fe:	e016      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006300:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630c:	d111      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8006310:	61fb      	str	r3, [r7, #28]
            break;
 8006312:	e00e      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006314:	4b56      	ldr	r3, [pc, #344]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b02      	cmp	r3, #2
 8006320:	d109      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	61fb      	str	r3, [r7, #28]
            break;
 8006328:	e005      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 800632a:	bf00      	nop
 800632c:	e09b      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800632e:	bf00      	nop
 8006330:	e099      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006332:	bf00      	nop
 8006334:	e097      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006336:	bf00      	nop
        break;
 8006338:	e095      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800633a:	4b4d      	ldr	r3, [pc, #308]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634c:	d042      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006354:	d874      	bhi.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8006364:	e06c      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006366:	4b42      	ldr	r3, [pc, #264]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006372:	d167      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8006374:	4b40      	ldr	r3, [pc, #256]	; (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 8006376:	61fb      	str	r3, [r7, #28]
            break;
 8006378:	e064      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800637a:	4b3d      	ldr	r3, [pc, #244]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006386:	d15f      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006394:	d158      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	3301      	adds	r3, #1
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063aa:	4b31      	ldr	r3, [pc, #196]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b4:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	fb03 f202 	mul.w	r2, r3, r2
 80063be:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	0d5b      	lsrs	r3, r3, #21
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	3301      	adds	r3, #1
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	61fb      	str	r3, [r7, #28]
            break;
 80063d2:	e039      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80063d4:	4b26      	ldr	r3, [pc, #152]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d035      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80063e0:	f000 f9ee 	bl	80067c0 <RCCEx_PLLSAI1_GetVCOFreq>
 80063e4:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	3301      	adds	r3, #1
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006404:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	0edb      	lsrs	r3, r3, #27
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8006424:	2311      	movs	r3, #17
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e001      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 800642a:	2307      	movs	r3, #7
 800642c:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	fb03 f202 	mul.w	r2, r3, r2
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	61fb      	str	r3, [r7, #28]
            break;
 800643e:	e005      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8006440:	bf00      	nop
 8006442:	e010      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006444:	bf00      	nop
 8006446:	e00e      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006448:	bf00      	nop
 800644a:	e00c      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800644c:	bf00      	nop
        break;
 800644e:	e00a      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006450:	bf00      	nop
 8006452:	e008      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006454:	bf00      	nop
 8006456:	e006      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006458:	bf00      	nop
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800645c:	bf00      	nop
 800645e:	e002      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006460:	bf00      	nop
 8006462:	e000      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006464:	bf00      	nop
    }
  }

  return (frequency);
 8006466:	69fb      	ldr	r3, [r7, #28]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40021000 	.word	0x40021000
 8006474:	00f42400 	.word	0x00f42400
 8006478:	007a1200 	.word	0x007a1200

0800647c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	6013      	str	r3, [r2, #0]
}
 800648c:	bf00      	nop
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000

0800649c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d018      	beq.n	80064e4 <RCCEx_PLLSAI1_Config+0x48>
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d81f      	bhi.n	80064f6 <RCCEx_PLLSAI1_Config+0x5a>
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d002      	beq.n	80064c0 <RCCEx_PLLSAI1_Config+0x24>
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d009      	beq.n	80064d2 <RCCEx_PLLSAI1_Config+0x36>
 80064be:	e01a      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064c0:	4b65      	ldr	r3, [pc, #404]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d117      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d0:	e014      	b.n	80064fc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064d2:	4b61      	ldr	r3, [pc, #388]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d110      	bne.n	8006500 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e2:	e00d      	b.n	8006500 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80064e4:	4b5c      	ldr	r3, [pc, #368]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f4:	e006      	b.n	8006504 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
      break;
 80064fa:	e004      	b.n	8006506 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064fc:	bf00      	nop
 80064fe:	e002      	b.n	8006506 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006504:	bf00      	nop
  }

  if (status == HAL_OK)
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 809f 	bne.w	800664c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800650e:	4b52      	ldr	r3, [pc, #328]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a51      	ldr	r2, [pc, #324]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651a:	f7fb fda1 	bl	8002060 <HAL_GetTick>
 800651e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006520:	e00f      	b.n	8006542 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006522:	f7fb fd9d 	bl	8002060 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d908      	bls.n	8006542 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006530:	4b49      	ldr	r3, [pc, #292]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006540:	e006      	b.n	8006550 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006542:	4b45      	ldr	r3, [pc, #276]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e9      	bne.n	8006522 <RCCEx_PLLSAI1_Config+0x86>
 800654e:	e000      	b.n	8006552 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006550:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d179      	bne.n	800664c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d116      	bne.n	800658c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800655e:	4b3e      	ldr	r3, [pc, #248]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	4b3e      	ldr	r3, [pc, #248]	; (800665c <RCCEx_PLLSAI1_Config+0x1c0>)
 8006564:	4013      	ands	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	0211      	lsls	r1, r2, #8
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68d2      	ldr	r2, [r2, #12]
 8006570:	06d2      	lsls	r2, r2, #27
 8006572:	4311      	orrs	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6852      	ldr	r2, [r2, #4]
 8006578:	3a01      	subs	r2, #1
 800657a:	0112      	lsls	r2, r2, #4
 800657c:	4311      	orrs	r1, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	4934      	ldr	r1, [pc, #208]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	610b      	str	r3, [r1, #16]
 800658a:	e033      	b.n	80065f4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d118      	bne.n	80065c4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006592:	4b31      	ldr	r3, [pc, #196]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	4b32      	ldr	r3, [pc, #200]	; (8006660 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006598:	4013      	ands	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6892      	ldr	r2, [r2, #8]
 800659e:	0211      	lsls	r1, r2, #8
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6912      	ldr	r2, [r2, #16]
 80065a4:	0852      	lsrs	r2, r2, #1
 80065a6:	3a01      	subs	r2, #1
 80065a8:	0552      	lsls	r2, r2, #21
 80065aa:	4311      	orrs	r1, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6852      	ldr	r2, [r2, #4]
 80065b0:	3a01      	subs	r2, #1
 80065b2:	0112      	lsls	r2, r2, #4
 80065b4:	4311      	orrs	r1, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	4926      	ldr	r1, [pc, #152]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	610b      	str	r3, [r1, #16]
 80065c2:	e017      	b.n	80065f4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	4b26      	ldr	r3, [pc, #152]	; (8006664 <RCCEx_PLLSAI1_Config+0x1c8>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6892      	ldr	r2, [r2, #8]
 80065d0:	0211      	lsls	r1, r2, #8
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6952      	ldr	r2, [r2, #20]
 80065d6:	0852      	lsrs	r2, r2, #1
 80065d8:	3a01      	subs	r2, #1
 80065da:	0652      	lsls	r2, r2, #25
 80065dc:	4311      	orrs	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6852      	ldr	r2, [r2, #4]
 80065e2:	3a01      	subs	r2, #1
 80065e4:	0112      	lsls	r2, r2, #4
 80065e6:	4311      	orrs	r1, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	491a      	ldr	r1, [pc, #104]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a17      	ldr	r2, [pc, #92]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 80065fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006600:	f7fb fd2e 	bl	8002060 <HAL_GetTick>
 8006604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006606:	e00f      	b.n	8006628 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006608:	f7fb fd2a 	bl	8002060 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d908      	bls.n	8006628 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006626:	e006      	b.n	8006636 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0e9      	beq.n	8006608 <RCCEx_PLLSAI1_Config+0x16c>
 8006634:	e000      	b.n	8006638 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006636:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	4904      	ldr	r1, [pc, #16]	; (8006658 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006648:	4313      	orrs	r3, r2
 800664a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000
 800665c:	07ff800c 	.word	0x07ff800c
 8006660:	ff9f800c 	.word	0xff9f800c
 8006664:	f9ff800c 	.word	0xf9ff800c

08006668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d018      	beq.n	80066b0 <RCCEx_PLLSAI2_Config+0x48>
 800667e:	2b03      	cmp	r3, #3
 8006680:	d81f      	bhi.n	80066c2 <RCCEx_PLLSAI2_Config+0x5a>
 8006682:	2b01      	cmp	r3, #1
 8006684:	d002      	beq.n	800668c <RCCEx_PLLSAI2_Config+0x24>
 8006686:	2b02      	cmp	r3, #2
 8006688:	d009      	beq.n	800669e <RCCEx_PLLSAI2_Config+0x36>
 800668a:	e01a      	b.n	80066c2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800668c:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d117      	bne.n	80066c8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800669c:	e014      	b.n	80066c8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800669e:	4b46      	ldr	r3, [pc, #280]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d110      	bne.n	80066cc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ae:	e00d      	b.n	80066cc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80066b0:	4b41      	ldr	r3, [pc, #260]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066c0:	e006      	b.n	80066d0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
      break;
 80066c6:	e004      	b.n	80066d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80066c8:	bf00      	nop
 80066ca:	e002      	b.n	80066d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80066d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d169      	bne.n	80067ac <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066d8:	4b37      	ldr	r3, [pc, #220]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a36      	ldr	r2, [pc, #216]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80066de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fb fcbc 	bl	8002060 <HAL_GetTick>
 80066e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ea:	e00f      	b.n	800670c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066ec:	f7fb fcb8 	bl	8002060 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d908      	bls.n	800670c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066fa:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800670a:	e006      	b.n	800671a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800670c:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e9      	bne.n	80066ec <RCCEx_PLLSAI2_Config+0x84>
 8006718:	e000      	b.n	800671c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800671a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d144      	bne.n	80067ac <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d115      	bne.n	8006754 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006728:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	4b23      	ldr	r3, [pc, #140]	; (80067bc <RCCEx_PLLSAI2_Config+0x154>)
 800672e:	4013      	ands	r3, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6892      	ldr	r2, [r2, #8]
 8006734:	0211      	lsls	r1, r2, #8
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68d2      	ldr	r2, [r2, #12]
 800673a:	06d2      	lsls	r2, r2, #27
 800673c:	4311      	orrs	r1, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6852      	ldr	r2, [r2, #4]
 8006742:	3a01      	subs	r2, #1
 8006744:	0112      	lsls	r2, r2, #4
 8006746:	4311      	orrs	r1, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	491a      	ldr	r1, [pc, #104]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 8006750:	4313      	orrs	r3, r2
 8006752:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006754:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fb fc7e 	bl	8002060 <HAL_GetTick>
 8006764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006766:	e00f      	b.n	8006788 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006768:	f7fb fc7a 	bl	8002060 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d908      	bls.n	8006788 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006786:	e006      	b.n	8006796 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0e9      	beq.n	8006768 <RCCEx_PLLSAI2_Config+0x100>
 8006794:	e000      	b.n	8006798 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006796:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	4904      	ldr	r1, [pc, #16]	; (80067b8 <RCCEx_PLLSAI2_Config+0x150>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000
 80067bc:	07ff800c 	.word	0x07ff800c

080067c0 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d02d      	beq.n	8006832 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d835      	bhi.n	8006846 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d002      	beq.n	80067e4 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d01d      	beq.n	800681e <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80067e2:	e030      	b.n	8006846 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067e4:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d12c      	bne.n	800684a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067f0:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80067fc:	4b19      	ldr	r3, [pc, #100]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	e005      	b.n	8006814 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8006808:	4b16      	ldr	r3, [pc, #88]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800680a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	4a14      	ldr	r2, [pc, #80]	; (8006868 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8006816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681a:	607b      	str	r3, [r7, #4]
      break;
 800681c:	e015      	b.n	800684a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d110      	bne.n	800684e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800682e:	607b      	str	r3, [r7, #4]
      break;
 8006830:	e00d      	b.n	800684e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800683e:	d108      	bne.n	8006852 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8006842:	607b      	str	r3, [r7, #4]
      break;
 8006844:	e005      	b.n	8006852 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8006846:	bf00      	nop
 8006848:	e004      	b.n	8006854 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8006852:	bf00      	nop
  }

  return pllvco;
 8006854:	687b      	ldr	r3, [r7, #4]
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40021000 	.word	0x40021000
 8006868:	080099ac 	.word	0x080099ac
 800686c:	00f42400 	.word	0x00f42400
 8006870:	007a1200 	.word	0x007a1200

08006874 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 800687e:	4b26      	ldr	r3, [pc, #152]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b03      	cmp	r3, #3
 8006888:	d02d      	beq.n	80068e6 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800688a:	2b03      	cmp	r3, #3
 800688c:	d835      	bhi.n	80068fa <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 800688e:	2b01      	cmp	r3, #1
 8006890:	d002      	beq.n	8006898 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8006892:	2b02      	cmp	r3, #2
 8006894:	d01d      	beq.n	80068d2 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8006896:	e030      	b.n	80068fa <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006898:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d12c      	bne.n	80068fe <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80068b0:	4b19      	ldr	r3, [pc, #100]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	091b      	lsrs	r3, r3, #4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	e005      	b.n	80068c8 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80068bc:	4b16      	ldr	r3, [pc, #88]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80068be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	4a14      	ldr	r2, [pc, #80]	; (800691c <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80068ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ce:	607b      	str	r3, [r7, #4]
      break;
 80068d0:	e015      	b.n	80068fe <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	d110      	bne.n	8006902 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 80068e2:	607b      	str	r3, [r7, #4]
      break;
 80068e4:	e00d      	b.n	8006902 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f2:	d108      	bne.n	8006906 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 80068f6:	607b      	str	r3, [r7, #4]
      break;
 80068f8:	e005      	b.n	8006906 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 80068fa:	bf00      	nop
 80068fc:	e004      	b.n	8006908 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068fe:	bf00      	nop
 8006900:	e002      	b.n	8006908 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8006906:	bf00      	nop
  }

  return pllvco;
 8006908:	687b      	ldr	r3, [r7, #4]
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40021000 	.word	0x40021000
 800691c:	080099ac 	.word	0x080099ac
 8006920:	00f42400 	.word	0x00f42400
 8006924:	007a1200 	.word	0x007a1200

08006928 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693c:	d10c      	bne.n	8006958 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800693e:	4b78      	ldr	r3, [pc, #480]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006944:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006948:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b60      	cmp	r3, #96	; 0x60
 800694e:	d110      	bne.n	8006972 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006950:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e00c      	b.n	8006972 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006958:	4b71      	ldr	r3, [pc, #452]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800695a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006962:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696a:	d102      	bne.n	8006972 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800696c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006970:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 80cd 	bne.w	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d003      	beq.n	800698c <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698a:	d13b      	bne.n	8006a04 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800698c:	4b64      	ldr	r3, [pc, #400]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006998:	f040 80bb 	bne.w	8006b12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800699c:	4b60      	ldr	r3, [pc, #384]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80b4 	beq.w	8006b12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069aa:	4b5d      	ldr	r3, [pc, #372]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	3301      	adds	r3, #1
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069be:	4b58      	ldr	r3, [pc, #352]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80069ca:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	0edb      	lsrs	r3, r3, #27
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80069dc:	4b50      	ldr	r3, [pc, #320]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 80069e8:	2311      	movs	r3, #17
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e001      	b.n	80069f2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 80069ee:	2307      	movs	r3, #7
 80069f0:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	fb03 f202 	mul.w	r2, r3, r2
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a02:	e086      	b.n	8006b12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d003      	beq.n	8006a12 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d109      	bne.n	8006a26 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a12:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1e:	d179      	bne.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8006a20:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006a22:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a24:	e076      	b.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d135      	bne.n	8006a98 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006a2c:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d06d      	beq.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006a38:	f7ff fec2 	bl	80067c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8006a3c:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a3e:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	091b      	lsrs	r3, r3, #4
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	3301      	adds	r3, #1
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a52:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5c:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006a5e:	4b30      	ldr	r3, [pc, #192]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	0edb      	lsrs	r3, r3, #27
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8006a7c:	2311      	movs	r3, #17
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e001      	b.n	8006a86 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8006a82:	2307      	movs	r3, #7
 8006a84:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	fb03 f202 	mul.w	r2, r3, r2
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e03d      	b.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d003      	beq.n	8006aa6 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa4:	d136      	bne.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006aa6:	4b1e      	ldr	r3, [pc, #120]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d030      	beq.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8006ab2:	f7ff fedf 	bl	8006874 <RCCEx_PLLSAI2_GetVCOFreq>
 8006ab6:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006acc:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	0a1b      	lsrs	r3, r3, #8
 8006ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad6:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006ad8:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	0edb      	lsrs	r3, r3, #27
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006af6:	2311      	movs	r3, #17
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e001      	b.n	8006b00 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006afc:	2307      	movs	r3, #7
 8006afe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	fb03 f202 	mul.w	r2, r3, r2
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e000      	b.n	8006b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b12:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000
 8006b24:	00f42400 	.word	0x00f42400

08006b28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e1da      	b.n	8006ef0 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10e      	bne.n	8006b62 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a87      	ldr	r2, [pc, #540]	; (8006d68 <HAL_SAI_Init+0x240>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d107      	bne.n	8006b5e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d103      	bne.n	8006b5e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e1c6      	b.n	8006ef0 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fa fbec 	bl	8001354 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f9c3 	bl	8006f08 <SAI_Disable>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e1b1      	b.n	8006ef0 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_SAI_Init+0x8e>
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d80d      	bhi.n	8006bbc <HAL_SAI_Init+0x94>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_SAI_Init+0x82>
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d003      	beq.n	8006bb0 <HAL_SAI_Init+0x88>
 8006ba8:	e008      	b.n	8006bbc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bae:	e008      	b.n	8006bc2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bb4:	e005      	b.n	8006bc2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bba:	e002      	b.n	8006bc2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006bc0:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d81d      	bhi.n	8006c06 <HAL_SAI_Init+0xde>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <HAL_SAI_Init+0xa8>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006be7 	.word	0x08006be7
 8006bd8:	08006bef 	.word	0x08006bef
 8006bdc:	08006bf7 	.word	0x08006bf7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
      break;
 8006be4:	e012      	b.n	8006c0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bea:	61fb      	str	r3, [r7, #28]
      break;
 8006bec:	e00e      	b.n	8006c0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bf2:	61fb      	str	r3, [r7, #28]
      break;
 8006bf4:	e00a      	b.n	8006c0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bfa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
      break;
 8006c0a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a55      	ldr	r2, [pc, #340]	; (8006d68 <HAL_SAI_Init+0x240>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <HAL_SAI_Init+0xf8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a54      	ldr	r2, [pc, #336]	; (8006d6c <HAL_SAI_Init+0x244>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d103      	bne.n	8006c28 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006c20:	4a53      	ldr	r2, [pc, #332]	; (8006d70 <HAL_SAI_Init+0x248>)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e002      	b.n	8006c2e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006c28:	4a52      	ldr	r2, [pc, #328]	; (8006d74 <HAL_SAI_Init+0x24c>)
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d07e      	beq.n	8006d34 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <HAL_SAI_Init+0x240>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_SAI_Init+0x126>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a48      	ldr	r2, [pc, #288]	; (8006d6c <HAL_SAI_Init+0x244>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d104      	bne.n	8006c58 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006c4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c52:	f7fe fc71 	bl	8005538 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c56:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a46      	ldr	r2, [pc, #280]	; (8006d78 <HAL_SAI_Init+0x250>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_SAI_Init+0x144>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a45      	ldr	r2, [pc, #276]	; (8006d7c <HAL_SAI_Init+0x254>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d104      	bne.n	8006c76 <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006c6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c70:	f7fe fc62 	bl	8005538 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c74:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c7e:	d120      	bne.n	8006cc2 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d102      	bne.n	8006c8e <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	e00a      	b.n	8006ca4 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d103      	bne.n	8006c9e <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	e002      	b.n	8006ca4 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4619      	mov	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	fb02 f303 	mul.w	r3, r2, r3
 8006cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e017      	b.n	8006cf2 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cca:	d101      	bne.n	8006cd0 <HAL_SAI_Init+0x1a8>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e000      	b.n	8006cd2 <HAL_SAI_Init+0x1aa>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4619      	mov	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cf0:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <HAL_SAI_Init+0x258>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	08da      	lsrs	r2, r3, #3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	4b1f      	ldr	r3, [pc, #124]	; (8006d80 <HAL_SAI_Init+0x258>)
 8006d04:	fba3 2301 	umull	r2, r3, r3, r1
 8006d08:	08da      	lsrs	r2, r3, #3
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	1aca      	subs	r2, r1, r3
 8006d14:	2a08      	cmp	r2, #8
 8006d16:	d904      	bls.n	8006d22 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d104      	bne.n	8006d34 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	085a      	lsrs	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_SAI_Init+0x21c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d109      	bne.n	8006d58 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_SAI_Init+0x228>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e001      	b.n	8006d54 <HAL_SAI_Init+0x22c>
 8006d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	e017      	b.n	8006d88 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d111      	bne.n	8006d84 <HAL_SAI_Init+0x25c>
 8006d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d64:	e00f      	b.n	8006d86 <HAL_SAI_Init+0x25e>
 8006d66:	bf00      	nop
 8006d68:	40015404 	.word	0x40015404
 8006d6c:	40015424 	.word	0x40015424
 8006d70:	40015400 	.word	0x40015400
 8006d74:	40015800 	.word	0x40015800
 8006d78:	40015804 	.word	0x40015804
 8006d7c:	40015824 	.word	0x40015824
 8006d80:	cccccccd 	.word	0xcccccccd
 8006d84:	2300      	movs	r3, #0
 8006d86:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6819      	ldr	r1, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b59      	ldr	r3, [pc, #356]	; (8006ef8 <HAL_SAI_Init+0x3d0>)
 8006d94:	400b      	ands	r3, r1
 8006d96:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006dac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	431a      	orrs	r2, r3
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006dc0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006dcc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	051b      	lsls	r3, r3, #20
 8006dd4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006dda:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006df8:	f023 030f 	bic.w	r3, r3, #15
 8006dfc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6899      	ldr	r1, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	4b35      	ldr	r3, [pc, #212]	; (8006efc <HAL_SAI_Init+0x3d4>)
 8006e28:	400b      	ands	r3, r1
 8006e2a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6899      	ldr	r1, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006e3c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006e42:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006e48:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006e52:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68d9      	ldr	r1, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68d9      	ldr	r1, [r3, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e84:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <HAL_SAI_Init+0x3d8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d119      	bne.n	8006ed6 <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006ea2:	4b18      	ldr	r3, [pc, #96]	; (8006f04 <HAL_SAI_Init+0x3dc>)
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <HAL_SAI_Init+0x3dc>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10e      	bne.n	8006ed6 <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006ec4:	490f      	ldr	r1, [pc, #60]	; (8006f04 <HAL_SAI_Init+0x3dc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <HAL_SAI_Init+0x3dc>)
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <HAL_SAI_Init+0x3dc>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	f005c010 	.word	0xf005c010
 8006efc:	fff88000 	.word	0xfff88000
 8006f00:	40015404 	.word	0x40015404
 8006f04:	40015400 	.word	0x40015400

08006f08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <SAI_Disable+0x6c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <SAI_Disable+0x70>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	0b1b      	lsrs	r3, r3, #12
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4e:	e009      	b.n	8006f64 <SAI_Disable+0x5c>
    }
    count--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e7      	bne.n	8006f34 <SAI_Disable+0x2c>

  return status;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000000 	.word	0x20000000
 8006f78:	95cbec1b 	.word	0x95cbec1b

08006f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e095      	b.n	80070ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f9e:	d009      	beq.n	8006fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	61da      	str	r2, [r3, #28]
 8006fa6:	e005      	b.n	8006fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fa fa62 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ff4:	d902      	bls.n	8006ffc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e002      	b.n	8007002 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007000:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800700a:	d007      	beq.n	800701c <HAL_SPI_Init+0xa0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007014:	d002      	beq.n	800701c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705e:	ea42 0103 	orr.w	r1, r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	f003 0204 	and.w	r2, r3, #4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007098:	ea42 0103 	orr.w	r1, r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e038      	b.n	800714a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7f9 fcd7 	bl	8000aa0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3308      	adds	r3, #8
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f002 f857 	bl	80091b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	461a      	mov	r2, r3
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	f002 f91f 	bl	8009350 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6858      	ldr	r0, [r3, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	f002 f968 	bl	80093f4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	6892      	ldr	r2, [r2, #8]
 800712c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	6892      	ldr	r2, [r2, #8]
 8007138:	f041 0101 	orr.w	r1, r1, #1
 800713c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e049      	b.n	80071f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fa fc03 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 fcfb 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d001      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e04f      	b.n	80072b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a23      	ldr	r2, [pc, #140]	; (80072c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01d      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d018      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d013      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_TIM_Base_Start_IT+0x76>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d115      	bne.n	80072a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	4b17      	ldr	r3, [pc, #92]	; (80072dc <HAL_TIM_Base_Start_IT+0xdc>)
 800727e:	4013      	ands	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d015      	beq.n	80072b4 <HAL_TIM_Base_Start_IT+0xb4>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728e:	d011      	beq.n	80072b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	e008      	b.n	80072b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e000      	b.n	80072b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40000400 	.word	0x40000400
 80072cc:	40000800 	.word	0x40000800
 80072d0:	40000c00 	.word	0x40000c00
 80072d4:	40013400 	.word	0x40013400
 80072d8:	40014000 	.word	0x40014000
 80072dc:	00010007 	.word	0x00010007

080072e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e049      	b.n	8007386 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f841 	bl	800738e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f000 fc34 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e049      	b.n	8007448 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f841 	bl	8007450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f000 fbd3 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d122      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d11b      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0202 	mvn.w	r2, #2
 8007490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb52 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fb44 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb55 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d122      	bne.n	8007514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d11b      	bne.n	8007514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0204 	mvn.w	r2, #4
 80074e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb28 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 8007500:	e005      	b.n	800750e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb1a 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb2b 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b08      	cmp	r3, #8
 8007520:	d122      	bne.n	8007568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b08      	cmp	r3, #8
 800752e:	d11b      	bne.n	8007568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0208 	mvn.w	r2, #8
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2204      	movs	r2, #4
 800753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fafe 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 8007554:	e005      	b.n	8007562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 faf0 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fb01 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0310 	and.w	r3, r3, #16
 8007572:	2b10      	cmp	r3, #16
 8007574:	d122      	bne.n	80075bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b10      	cmp	r3, #16
 8007582:	d11b      	bne.n	80075bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2208      	movs	r2, #8
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fad4 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fac6 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fad7 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10e      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d107      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0201 	mvn.w	r2, #1
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f002 f934 	bl	8009850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d10e      	bne.n	8007614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d107      	bne.n	8007614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fffa 	bl	8008608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007622:	d10e      	bne.n	8007642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762e:	2b80      	cmp	r3, #128	; 0x80
 8007630:	d107      	bne.n	8007642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 ffed 	bl	800861c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d10e      	bne.n	800766e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d107      	bne.n	800766e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa85 	bl	8007b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d10e      	bne.n	800769a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b20      	cmp	r3, #32
 8007688:	d107      	bne.n	800769a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f06f 0220 	mvn.w	r2, #32
 8007692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ffad 	bl	80085f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_TIM_OC_ConfigChannel+0x1a>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e064      	b.n	8007788 <HAL_TIM_OC_ConfigChannel+0xe4>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b14      	cmp	r3, #20
 80076ca:	d857      	bhi.n	800777c <HAL_TIM_OC_ConfigChannel+0xd8>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	08007729 	.word	0x08007729
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	0800777d 	.word	0x0800777d
 80076e0:	0800777d 	.word	0x0800777d
 80076e4:	08007737 	.word	0x08007737
 80076e8:	0800777d 	.word	0x0800777d
 80076ec:	0800777d 	.word	0x0800777d
 80076f0:	0800777d 	.word	0x0800777d
 80076f4:	08007745 	.word	0x08007745
 80076f8:	0800777d 	.word	0x0800777d
 80076fc:	0800777d 	.word	0x0800777d
 8007700:	0800777d 	.word	0x0800777d
 8007704:	08007753 	.word	0x08007753
 8007708:	0800777d 	.word	0x0800777d
 800770c:	0800777d 	.word	0x0800777d
 8007710:	0800777d 	.word	0x0800777d
 8007714:	08007761 	.word	0x08007761
 8007718:	0800777d 	.word	0x0800777d
 800771c:	0800777d 	.word	0x0800777d
 8007720:	0800777d 	.word	0x0800777d
 8007724:	0800776f 	.word	0x0800776f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fac6 	bl	8007cc0 <TIM_OC1_SetConfig>
      break;
 8007734:	e023      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fb4f 	bl	8007de0 <TIM_OC2_SetConfig>
      break;
 8007742:	e01c      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fbd2 	bl	8007ef4 <TIM_OC3_SetConfig>
      break;
 8007750:	e015      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fc53 	bl	8008004 <TIM_OC4_SetConfig>
      break;
 800775e:	e00e      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fcb6 	bl	80080d8 <TIM_OC5_SetConfig>
      break;
 800776c:	e007      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fd13 	bl	80081a0 <TIM_OC6_SetConfig>
      break;
 800777a:	e000      	b.n	800777e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800777c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e0fd      	b.n	80079a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b14      	cmp	r3, #20
 80077b6:	f200 80f0 	bhi.w	800799a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007815 	.word	0x08007815
 80077c4:	0800799b 	.word	0x0800799b
 80077c8:	0800799b 	.word	0x0800799b
 80077cc:	0800799b 	.word	0x0800799b
 80077d0:	08007855 	.word	0x08007855
 80077d4:	0800799b 	.word	0x0800799b
 80077d8:	0800799b 	.word	0x0800799b
 80077dc:	0800799b 	.word	0x0800799b
 80077e0:	08007897 	.word	0x08007897
 80077e4:	0800799b 	.word	0x0800799b
 80077e8:	0800799b 	.word	0x0800799b
 80077ec:	0800799b 	.word	0x0800799b
 80077f0:	080078d7 	.word	0x080078d7
 80077f4:	0800799b 	.word	0x0800799b
 80077f8:	0800799b 	.word	0x0800799b
 80077fc:	0800799b 	.word	0x0800799b
 8007800:	08007919 	.word	0x08007919
 8007804:	0800799b 	.word	0x0800799b
 8007808:	0800799b 	.word	0x0800799b
 800780c:	0800799b 	.word	0x0800799b
 8007810:	08007959 	.word	0x08007959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fa50 	bl	8007cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0208 	orr.w	r2, r2, #8
 800782e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0204 	bic.w	r2, r2, #4
 800783e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6999      	ldr	r1, [r3, #24]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	619a      	str	r2, [r3, #24]
      break;
 8007852:	e0a3      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fac0 	bl	8007de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800786e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6999      	ldr	r1, [r3, #24]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	021a      	lsls	r2, r3, #8
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	619a      	str	r2, [r3, #24]
      break;
 8007894:	e082      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fb29 	bl	8007ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0208 	orr.w	r2, r2, #8
 80078b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69da      	ldr	r2, [r3, #28]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0204 	bic.w	r2, r2, #4
 80078c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69d9      	ldr	r1, [r3, #28]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	61da      	str	r2, [r3, #28]
      break;
 80078d4:	e062      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fb91 	bl	8008004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69d9      	ldr	r1, [r3, #28]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	021a      	lsls	r2, r3, #8
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	61da      	str	r2, [r3, #28]
      break;
 8007916:	e041      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fbda 	bl	80080d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0208 	orr.w	r2, r2, #8
 8007932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0204 	bic.w	r2, r2, #4
 8007942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007956:	e021      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fc1e 	bl	80081a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007998:	e000      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800799a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_TIM_ConfigClockSource+0x18>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e0b5      	b.n	8007b34 <HAL_TIM_ConfigClockSource+0x184>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80079e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a04:	d03e      	beq.n	8007a84 <HAL_TIM_ConfigClockSource+0xd4>
 8007a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0a:	f200 8087 	bhi.w	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	f000 8085 	beq.w	8007b20 <HAL_TIM_ConfigClockSource+0x170>
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1a:	d87f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a1c:	2b70      	cmp	r3, #112	; 0x70
 8007a1e:	d01a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0xa6>
 8007a20:	2b70      	cmp	r3, #112	; 0x70
 8007a22:	d87b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a24:	2b60      	cmp	r3, #96	; 0x60
 8007a26:	d050      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x11a>
 8007a28:	2b60      	cmp	r3, #96	; 0x60
 8007a2a:	d877      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a2c:	2b50      	cmp	r3, #80	; 0x50
 8007a2e:	d03c      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0xfa>
 8007a30:	2b50      	cmp	r3, #80	; 0x50
 8007a32:	d873      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d058      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x13a>
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d86f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a3c:	2b30      	cmp	r3, #48	; 0x30
 8007a3e:	d064      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d86b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d060      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d867      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05c      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d05a      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a54:	e062      	b.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6899      	ldr	r1, [r3, #8]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f000 fc7d 	bl	8008364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	609a      	str	r2, [r3, #8]
      break;
 8007a82:	e04e      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f000 fc66 	bl	8008364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa6:	609a      	str	r2, [r3, #8]
      break;
 8007aa8:	e03b      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fbd8 	bl	800826c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2150      	movs	r1, #80	; 0x50
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fc31 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e02b      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f000 fbf7 	bl	80082ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2160      	movs	r1, #96	; 0x60
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fc21 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007ae8:	e01b      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 fbb8 	bl	800826c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fc11 	bl	800832a <TIM_ITRx_SetConfig>
      break;
 8007b08:	e00b      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f000 fc08 	bl	800832a <TIM_ITRx_SetConfig>
        break;
 8007b1a:	e002      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007b20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a40      	ldr	r2, [pc, #256]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d00f      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3d      	ldr	r2, [pc, #244]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3c      	ldr	r2, [pc, #240]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3b      	ldr	r2, [pc, #236]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3a      	ldr	r2, [pc, #232]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d108      	bne.n	8007bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01f      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bec:	d01b      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d017      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2b      	ldr	r2, [pc, #172]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a28      	ldr	r2, [pc, #160]	; (8007cb4 <TIM_Base_SetConfig+0x128>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <TIM_Base_SetConfig+0x12c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_Base_SetConfig+0x9a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <TIM_Base_SetConfig+0x130>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d108      	bne.n	8007c38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a12      	ldr	r2, [pc, #72]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <TIM_Base_SetConfig+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a10      	ldr	r2, [pc, #64]	; (8007cb8 <TIM_Base_SetConfig+0x12c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a0f      	ldr	r2, [pc, #60]	; (8007cbc <TIM_Base_SetConfig+0x130>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d103      	bne.n	8007c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	615a      	str	r2, [r3, #20]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	40000800 	.word	0x40000800
 8007cac:	40000c00 	.word	0x40000c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800

08007cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	f023 0201 	bic.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f023 0302 	bic.w	r3, r3, #2
 8007d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a2c      	ldr	r2, [pc, #176]	; (8007dcc <TIM_OC1_SetConfig+0x10c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00f      	beq.n	8007d40 <TIM_OC1_SetConfig+0x80>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a2b      	ldr	r2, [pc, #172]	; (8007dd0 <TIM_OC1_SetConfig+0x110>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <TIM_OC1_SetConfig+0x80>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <TIM_OC1_SetConfig+0x114>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <TIM_OC1_SetConfig+0x80>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a29      	ldr	r2, [pc, #164]	; (8007dd8 <TIM_OC1_SetConfig+0x118>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC1_SetConfig+0x80>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a28      	ldr	r2, [pc, #160]	; (8007ddc <TIM_OC1_SetConfig+0x11c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10c      	bne.n	8007d5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0308 	bic.w	r3, r3, #8
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	; (8007dcc <TIM_OC1_SetConfig+0x10c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00f      	beq.n	8007d82 <TIM_OC1_SetConfig+0xc2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1a      	ldr	r2, [pc, #104]	; (8007dd0 <TIM_OC1_SetConfig+0x110>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00b      	beq.n	8007d82 <TIM_OC1_SetConfig+0xc2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <TIM_OC1_SetConfig+0x114>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d007      	beq.n	8007d82 <TIM_OC1_SetConfig+0xc2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <TIM_OC1_SetConfig+0x118>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC1_SetConfig+0xc2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <TIM_OC1_SetConfig+0x11c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d111      	bne.n	8007da6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	621a      	str	r2, [r3, #32]
}
 8007dc0:	bf00      	nop
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40013400 	.word	0x40013400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800

08007de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0210 	bic.w	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a28      	ldr	r2, [pc, #160]	; (8007ee0 <TIM_OC2_SetConfig+0x100>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_OC2_SetConfig+0x6c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a27      	ldr	r2, [pc, #156]	; (8007ee4 <TIM_OC2_SetConfig+0x104>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10d      	bne.n	8007e68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <TIM_OC2_SetConfig+0x100>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00f      	beq.n	8007e90 <TIM_OC2_SetConfig+0xb0>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <TIM_OC2_SetConfig+0x104>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <TIM_OC2_SetConfig+0xb0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <TIM_OC2_SetConfig+0x108>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d007      	beq.n	8007e90 <TIM_OC2_SetConfig+0xb0>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <TIM_OC2_SetConfig+0x10c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_OC2_SetConfig+0xb0>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <TIM_OC2_SetConfig+0x110>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d113      	bne.n	8007eb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40013400 	.word	0x40013400
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	40014400 	.word	0x40014400
 8007ef0:	40014800 	.word	0x40014800

08007ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <TIM_OC3_SetConfig+0xfc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_OC3_SetConfig+0x6a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <TIM_OC3_SetConfig+0x100>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d10d      	bne.n	8007f7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a1c      	ldr	r2, [pc, #112]	; (8007ff0 <TIM_OC3_SetConfig+0xfc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00f      	beq.n	8007fa2 <TIM_OC3_SetConfig+0xae>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <TIM_OC3_SetConfig+0x100>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_OC3_SetConfig+0xae>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ff8 <TIM_OC3_SetConfig+0x104>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_OC3_SetConfig+0xae>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a19      	ldr	r2, [pc, #100]	; (8007ffc <TIM_OC3_SetConfig+0x108>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_OC3_SetConfig+0xae>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a18      	ldr	r2, [pc, #96]	; (8008000 <TIM_OC3_SetConfig+0x10c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d113      	bne.n	8007fca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40013400 	.word	0x40013400
 8007ff8:	40014000 	.word	0x40014000
 8007ffc:	40014400 	.word	0x40014400
 8008000:	40014800 	.word	0x40014800

08008004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	031b      	lsls	r3, r3, #12
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a18      	ldr	r2, [pc, #96]	; (80080c4 <TIM_OC4_SetConfig+0xc0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_OC4_SetConfig+0x84>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <TIM_OC4_SetConfig+0xc4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_OC4_SetConfig+0x84>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a16      	ldr	r2, [pc, #88]	; (80080cc <TIM_OC4_SetConfig+0xc8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_OC4_SetConfig+0x84>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <TIM_OC4_SetConfig+0xcc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC4_SetConfig+0x84>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a14      	ldr	r2, [pc, #80]	; (80080d4 <TIM_OC4_SetConfig+0xd0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d109      	bne.n	800809c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800808e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	40013400 	.word	0x40013400
 80080cc:	40014000 	.word	0x40014000
 80080d0:	40014400 	.word	0x40014400
 80080d4:	40014800 	.word	0x40014800

080080d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800811c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a17      	ldr	r2, [pc, #92]	; (800818c <TIM_OC5_SetConfig+0xb4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00f      	beq.n	8008152 <TIM_OC5_SetConfig+0x7a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a16      	ldr	r2, [pc, #88]	; (8008190 <TIM_OC5_SetConfig+0xb8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00b      	beq.n	8008152 <TIM_OC5_SetConfig+0x7a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a15      	ldr	r2, [pc, #84]	; (8008194 <TIM_OC5_SetConfig+0xbc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d007      	beq.n	8008152 <TIM_OC5_SetConfig+0x7a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a14      	ldr	r2, [pc, #80]	; (8008198 <TIM_OC5_SetConfig+0xc0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d003      	beq.n	8008152 <TIM_OC5_SetConfig+0x7a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a13      	ldr	r2, [pc, #76]	; (800819c <TIM_OC5_SetConfig+0xc4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d109      	bne.n	8008166 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40013400 	.word	0x40013400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800

080081a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <TIM_OC6_SetConfig+0xb8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00f      	beq.n	800821c <TIM_OC6_SetConfig+0x7c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <TIM_OC6_SetConfig+0xbc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00b      	beq.n	800821c <TIM_OC6_SetConfig+0x7c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	; (8008260 <TIM_OC6_SetConfig+0xc0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_OC6_SetConfig+0x7c>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <TIM_OC6_SetConfig+0xc4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_OC6_SetConfig+0x7c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a14      	ldr	r2, [pc, #80]	; (8008268 <TIM_OC6_SetConfig+0xc8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d109      	bne.n	8008230 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	029b      	lsls	r3, r3, #10
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	621a      	str	r2, [r3, #32]
}
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40012c00 	.word	0x40012c00
 800825c:	40013400 	.word	0x40013400
 8008260:	40014000 	.word	0x40014000
 8008264:	40014400 	.word	0x40014400
 8008268:	40014800 	.word	0x40014800

0800826c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f023 030a 	bic.w	r3, r3, #10
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b087      	sub	sp, #28
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f023 0210 	bic.w	r2, r3, #16
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	031b      	lsls	r3, r3, #12
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	f043 0307 	orr.w	r3, r3, #7
 8008350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	609a      	str	r2, [r3, #8]
}
 8008358:	bf00      	nop
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800837e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	021a      	lsls	r2, r3, #8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	431a      	orrs	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4313      	orrs	r3, r2
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	609a      	str	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e068      	b.n	800848e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a2e      	ldr	r2, [pc, #184]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d004      	beq.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2d      	ldr	r2, [pc, #180]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d108      	bne.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01d      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	d018      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d013      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00e      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a18      	ldr	r2, [pc, #96]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d009      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d004      	beq.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10c      	bne.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4313      	orrs	r3, r2
 8008472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	40000400 	.word	0x40000400
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40000c00 	.word	0x40000c00
 80084b0:	40014000 	.word	0x40014000

080084b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e087      	b.n	80085e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	041b      	lsls	r3, r3, #16
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a27      	ldr	r2, [pc, #156]	; (80085ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d106      	bne.n	800856c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d126      	bne.n	80085ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0e      	ldr	r2, [pc, #56]	; (80085ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d004      	beq.n	80085c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d106      	bne.n	80085ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40013400 	.word	0x40013400

080085f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e042      	b.n	80086c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7f9 fb41 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2224      	movs	r2, #36	; 0x24
 800865e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0201 	bic.w	r2, r2, #1
 8008670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f82c 	bl	80086d0 <UART_SetConfig>
 8008678:	4603      	mov	r3, r0
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e022      	b.n	80086c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb20 	bl	8008cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800869e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0201 	orr.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fba7 	bl	8008e14 <UART_CheckIdleState>
 80086c6:	4603      	mov	r3, r0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086d4:	b08c      	sub	sp, #48	; 0x30
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	431a      	orrs	r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4baa      	ldr	r3, [pc, #680]	; (80089a8 <UART_SetConfig+0x2d8>)
 8008700:	4013      	ands	r3, r2
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008708:	430b      	orrs	r3, r1
 800870a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a9f      	ldr	r2, [pc, #636]	; (80089ac <UART_SetConfig+0x2dc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008738:	4313      	orrs	r3, r2
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008746:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008750:	430b      	orrs	r3, r1
 8008752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	f023 010f 	bic.w	r1, r3, #15
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a90      	ldr	r2, [pc, #576]	; (80089b0 <UART_SetConfig+0x2e0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d125      	bne.n	80087c0 <UART_SetConfig+0xf0>
 8008774:	4b8f      	ldr	r3, [pc, #572]	; (80089b4 <UART_SetConfig+0x2e4>)
 8008776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2b03      	cmp	r3, #3
 8008780:	d81a      	bhi.n	80087b8 <UART_SetConfig+0xe8>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <UART_SetConfig+0xb8>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	08008799 	.word	0x08008799
 800878c:	080087a9 	.word	0x080087a9
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087b1 	.word	0x080087b1
 8008798:	2301      	movs	r3, #1
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e116      	b.n	80089ce <UART_SetConfig+0x2fe>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a6:	e112      	b.n	80089ce <UART_SetConfig+0x2fe>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ae:	e10e      	b.n	80089ce <UART_SetConfig+0x2fe>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b6:	e10a      	b.n	80089ce <UART_SetConfig+0x2fe>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087be:	e106      	b.n	80089ce <UART_SetConfig+0x2fe>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a7c      	ldr	r2, [pc, #496]	; (80089b8 <UART_SetConfig+0x2e8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d138      	bne.n	800883c <UART_SetConfig+0x16c>
 80087ca:	4b7a      	ldr	r3, [pc, #488]	; (80089b4 <UART_SetConfig+0x2e4>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d0:	f003 030c 	and.w	r3, r3, #12
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d82d      	bhi.n	8008834 <UART_SetConfig+0x164>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x110>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008815 	.word	0x08008815
 80087e4:	08008835 	.word	0x08008835
 80087e8:	08008835 	.word	0x08008835
 80087ec:	08008835 	.word	0x08008835
 80087f0:	08008825 	.word	0x08008825
 80087f4:	08008835 	.word	0x08008835
 80087f8:	08008835 	.word	0x08008835
 80087fc:	08008835 	.word	0x08008835
 8008800:	0800881d 	.word	0x0800881d
 8008804:	08008835 	.word	0x08008835
 8008808:	08008835 	.word	0x08008835
 800880c:	08008835 	.word	0x08008835
 8008810:	0800882d 	.word	0x0800882d
 8008814:	2300      	movs	r3, #0
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e0d8      	b.n	80089ce <UART_SetConfig+0x2fe>
 800881c:	2302      	movs	r3, #2
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008822:	e0d4      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800882a:	e0d0      	b.n	80089ce <UART_SetConfig+0x2fe>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008832:	e0cc      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883a:	e0c8      	b.n	80089ce <UART_SetConfig+0x2fe>
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a5e      	ldr	r2, [pc, #376]	; (80089bc <UART_SetConfig+0x2ec>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d125      	bne.n	8008892 <UART_SetConfig+0x1c2>
 8008846:	4b5b      	ldr	r3, [pc, #364]	; (80089b4 <UART_SetConfig+0x2e4>)
 8008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008850:	2b30      	cmp	r3, #48	; 0x30
 8008852:	d016      	beq.n	8008882 <UART_SetConfig+0x1b2>
 8008854:	2b30      	cmp	r3, #48	; 0x30
 8008856:	d818      	bhi.n	800888a <UART_SetConfig+0x1ba>
 8008858:	2b20      	cmp	r3, #32
 800885a:	d00a      	beq.n	8008872 <UART_SetConfig+0x1a2>
 800885c:	2b20      	cmp	r3, #32
 800885e:	d814      	bhi.n	800888a <UART_SetConfig+0x1ba>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <UART_SetConfig+0x19a>
 8008864:	2b10      	cmp	r3, #16
 8008866:	d008      	beq.n	800887a <UART_SetConfig+0x1aa>
 8008868:	e00f      	b.n	800888a <UART_SetConfig+0x1ba>
 800886a:	2300      	movs	r3, #0
 800886c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008870:	e0ad      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008872:	2302      	movs	r3, #2
 8008874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008878:	e0a9      	b.n	80089ce <UART_SetConfig+0x2fe>
 800887a:	2304      	movs	r3, #4
 800887c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008880:	e0a5      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008882:	2308      	movs	r3, #8
 8008884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008888:	e0a1      	b.n	80089ce <UART_SetConfig+0x2fe>
 800888a:	2310      	movs	r3, #16
 800888c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008890:	e09d      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a4a      	ldr	r2, [pc, #296]	; (80089c0 <UART_SetConfig+0x2f0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d125      	bne.n	80088e8 <UART_SetConfig+0x218>
 800889c:	4b45      	ldr	r3, [pc, #276]	; (80089b4 <UART_SetConfig+0x2e4>)
 800889e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088a6:	2bc0      	cmp	r3, #192	; 0xc0
 80088a8:	d016      	beq.n	80088d8 <UART_SetConfig+0x208>
 80088aa:	2bc0      	cmp	r3, #192	; 0xc0
 80088ac:	d818      	bhi.n	80088e0 <UART_SetConfig+0x210>
 80088ae:	2b80      	cmp	r3, #128	; 0x80
 80088b0:	d00a      	beq.n	80088c8 <UART_SetConfig+0x1f8>
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d814      	bhi.n	80088e0 <UART_SetConfig+0x210>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <UART_SetConfig+0x1f0>
 80088ba:	2b40      	cmp	r3, #64	; 0x40
 80088bc:	d008      	beq.n	80088d0 <UART_SetConfig+0x200>
 80088be:	e00f      	b.n	80088e0 <UART_SetConfig+0x210>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c6:	e082      	b.n	80089ce <UART_SetConfig+0x2fe>
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ce:	e07e      	b.n	80089ce <UART_SetConfig+0x2fe>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d6:	e07a      	b.n	80089ce <UART_SetConfig+0x2fe>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088de:	e076      	b.n	80089ce <UART_SetConfig+0x2fe>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e6:	e072      	b.n	80089ce <UART_SetConfig+0x2fe>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a35      	ldr	r2, [pc, #212]	; (80089c4 <UART_SetConfig+0x2f4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d12a      	bne.n	8008948 <UART_SetConfig+0x278>
 80088f2:	4b30      	ldr	r3, [pc, #192]	; (80089b4 <UART_SetConfig+0x2e4>)
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008900:	d01a      	beq.n	8008938 <UART_SetConfig+0x268>
 8008902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008906:	d81b      	bhi.n	8008940 <UART_SetConfig+0x270>
 8008908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800890c:	d00c      	beq.n	8008928 <UART_SetConfig+0x258>
 800890e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008912:	d815      	bhi.n	8008940 <UART_SetConfig+0x270>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <UART_SetConfig+0x250>
 8008918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891c:	d008      	beq.n	8008930 <UART_SetConfig+0x260>
 800891e:	e00f      	b.n	8008940 <UART_SetConfig+0x270>
 8008920:	2300      	movs	r3, #0
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008926:	e052      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008928:	2302      	movs	r3, #2
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892e:	e04e      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008930:	2304      	movs	r3, #4
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008936:	e04a      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008938:	2308      	movs	r3, #8
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893e:	e046      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008940:	2310      	movs	r3, #16
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008946:	e042      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a17      	ldr	r2, [pc, #92]	; (80089ac <UART_SetConfig+0x2dc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d13a      	bne.n	80089c8 <UART_SetConfig+0x2f8>
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <UART_SetConfig+0x2e4>)
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800895c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008960:	d01a      	beq.n	8008998 <UART_SetConfig+0x2c8>
 8008962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008966:	d81b      	bhi.n	80089a0 <UART_SetConfig+0x2d0>
 8008968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800896c:	d00c      	beq.n	8008988 <UART_SetConfig+0x2b8>
 800896e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008972:	d815      	bhi.n	80089a0 <UART_SetConfig+0x2d0>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <UART_SetConfig+0x2b0>
 8008978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897c:	d008      	beq.n	8008990 <UART_SetConfig+0x2c0>
 800897e:	e00f      	b.n	80089a0 <UART_SetConfig+0x2d0>
 8008980:	2300      	movs	r3, #0
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e022      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008988:	2302      	movs	r3, #2
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898e:	e01e      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008996:	e01a      	b.n	80089ce <UART_SetConfig+0x2fe>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899e:	e016      	b.n	80089ce <UART_SetConfig+0x2fe>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a6:	e012      	b.n	80089ce <UART_SetConfig+0x2fe>
 80089a8:	cfff69f3 	.word	0xcfff69f3
 80089ac:	40008000 	.word	0x40008000
 80089b0:	40013800 	.word	0x40013800
 80089b4:	40021000 	.word	0x40021000
 80089b8:	40004400 	.word	0x40004400
 80089bc:	40004800 	.word	0x40004800
 80089c0:	40004c00 	.word	0x40004c00
 80089c4:	40005000 	.word	0x40005000
 80089c8:	2310      	movs	r3, #16
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4ab0      	ldr	r2, [pc, #704]	; (8008c94 <UART_SetConfig+0x5c4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f040 809b 	bne.w	8008b10 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d827      	bhi.n	8008a32 <UART_SetConfig+0x362>
 80089e2:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <UART_SetConfig+0x318>)
 80089e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	08008a33 	.word	0x08008a33
 80089f8:	08008a23 	.word	0x08008a23
 80089fc:	08008a33 	.word	0x08008a33
 8008a00:	08008a33 	.word	0x08008a33
 8008a04:	08008a33 	.word	0x08008a33
 8008a08:	08008a2b 	.word	0x08008a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a0c:	f7fc f90a 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8008a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a12:	e014      	b.n	8008a3e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a14:	f7fc f91a 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8008a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1a:	e010      	b.n	8008a3e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a1c:	4b9e      	ldr	r3, [pc, #632]	; (8008c98 <UART_SetConfig+0x5c8>)
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a20:	e00d      	b.n	8008a3e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a22:	f7fc f84d 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8008a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a30:	e005      	b.n	8008a3e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8130 	beq.w	8008ca6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	4a94      	ldr	r2, [pc, #592]	; (8008c9c <UART_SetConfig+0x5cc>)
 8008a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d305      	bcc.n	8008a76 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d903      	bls.n	8008a7e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a7c:	e113      	b.n	8008ca6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2200      	movs	r2, #0
 8008a82:	60bb      	str	r3, [r7, #8]
 8008a84:	60fa      	str	r2, [r7, #12]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	4a84      	ldr	r2, [pc, #528]	; (8008c9c <UART_SetConfig+0x5cc>)
 8008a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2200      	movs	r2, #0
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aa0:	f7f7 fbc8 	bl	8000234 <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	020b      	lsls	r3, r1, #8
 8008ab6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008aba:	0202      	lsls	r2, r0, #8
 8008abc:	6979      	ldr	r1, [r7, #20]
 8008abe:	6849      	ldr	r1, [r1, #4]
 8008ac0:	0849      	lsrs	r1, r1, #1
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	eb12 0804 	adds.w	r8, r2, r4
 8008acc:	eb43 0905 	adc.w	r9, r3, r5
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	4693      	mov	fp, r2
 8008ada:	4652      	mov	r2, sl
 8008adc:	465b      	mov	r3, fp
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f7 fba7 	bl	8000234 <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4613      	mov	r3, r2
 8008aec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008af4:	d308      	bcc.n	8008b08 <UART_SetConfig+0x438>
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afc:	d204      	bcs.n	8008b08 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	e0ce      	b.n	8008ca6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b0e:	e0ca      	b.n	8008ca6 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b18:	d167      	bne.n	8008bea <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8008b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d827      	bhi.n	8008b72 <UART_SetConfig+0x4a2>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <UART_SetConfig+0x458>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b4d 	.word	0x08008b4d
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b73 	.word	0x08008b73
 8008b38:	08008b63 	.word	0x08008b63
 8008b3c:	08008b73 	.word	0x08008b73
 8008b40:	08008b73 	.word	0x08008b73
 8008b44:	08008b73 	.word	0x08008b73
 8008b48:	08008b6b 	.word	0x08008b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4c:	f7fc f86a 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8008b50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b52:	e014      	b.n	8008b7e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b54:	f7fc f87a 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8008b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b5a:	e010      	b.n	8008b7e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b5c:	4b4e      	ldr	r3, [pc, #312]	; (8008c98 <UART_SetConfig+0x5c8>)
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b60:	e00d      	b.n	8008b7e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b62:	f7fb ffad 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8008b66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b68:	e009      	b.n	8008b7e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b70:	e005      	b.n	8008b7e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8090 	beq.w	8008ca6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	4a44      	ldr	r2, [pc, #272]	; (8008c9c <UART_SetConfig+0x5cc>)
 8008b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b98:	005a      	lsls	r2, r3, #1
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	441a      	add	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	2b0f      	cmp	r3, #15
 8008bb2:	d916      	bls.n	8008be2 <UART_SetConfig+0x512>
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bba:	d212      	bcs.n	8008be2 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	f023 030f 	bic.w	r3, r3, #15
 8008bc4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	8bfb      	ldrh	r3, [r7, #30]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	8bfa      	ldrh	r2, [r7, #30]
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	e061      	b.n	8008ca6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008be8:	e05d      	b.n	8008ca6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d827      	bhi.n	8008c42 <UART_SetConfig+0x572>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <UART_SetConfig+0x528>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c2d 	.word	0x08008c2d
 8008c04:	08008c43 	.word	0x08008c43
 8008c08:	08008c33 	.word	0x08008c33
 8008c0c:	08008c43 	.word	0x08008c43
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c43 	.word	0x08008c43
 8008c18:	08008c3b 	.word	0x08008c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1c:	f7fc f802 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8008c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c22:	e014      	b.n	8008c4e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c24:	f7fc f812 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c2a:	e010      	b.n	8008c4e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <UART_SetConfig+0x5c8>)
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c30:	e00d      	b.n	8008c4e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c32:	f7fb ff45 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8008c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c38:	e009      	b.n	8008c4e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c40:	e005      	b.n	8008c4e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d028      	beq.n	8008ca6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	4a10      	ldr	r2, [pc, #64]	; (8008c9c <UART_SetConfig+0x5cc>)
 8008c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	441a      	add	r2, r3
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	2b0f      	cmp	r3, #15
 8008c7e:	d90f      	bls.n	8008ca0 <UART_SetConfig+0x5d0>
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c86:	d20b      	bcs.n	8008ca0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a3a      	ldr	r2, [r7, #32]
 8008c8e:	60da      	str	r2, [r3, #12]
 8008c90:	e009      	b.n	8008ca6 <UART_SetConfig+0x5d6>
 8008c92:	bf00      	nop
 8008c94:	40008000 	.word	0x40008000
 8008c98:	00f42400 	.word	0x00f42400
 8008c9c:	080099ec 	.word	0x080099ec
      }
      else
      {
        ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3730      	adds	r7, #48	; 0x30
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01a      	beq.n	8008de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dce:	d10a      	bne.n	8008de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	605a      	str	r2, [r3, #4]
  }
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e24:	f7f9 f91c 	bl	8002060 <HAL_GetTick>
 8008e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0308 	and.w	r3, r3, #8
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d10e      	bne.n	8008e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f82f 	bl	8008eaa <UART_WaitOnFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e025      	b.n	8008ea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d10e      	bne.n	8008e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f819 	bl	8008eaa <UART_WaitOnFlagUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e00f      	b.n	8008ea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eba:	e062      	b.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d05e      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec4:	f7f9 f8cc 	bl	8002060 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d302      	bcc.n	8008eda <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d11d      	bne.n	8008f16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ee8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0201 	bic.w	r2, r2, #1
 8008ef8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e045      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d02e      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f32:	d126      	bne.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e00f      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	bf0c      	ite	eq
 8008f92:	2301      	moveq	r3, #1
 8008f94:	2300      	movne	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d08d      	beq.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e027      	b.n	8009010 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2224      	movs	r2, #36	; 0x24
 8008fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009030:	2302      	movs	r3, #2
 8009032:	e02d      	b.n	8009090 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2224      	movs	r2, #36	; 0x24
 8009040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f84f 	bl	8009114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e02d      	b.n	800910c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2224      	movs	r2, #36	; 0x24
 80090bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0201 	bic.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f811 	bl	8009114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009120:	2b00      	cmp	r3, #0
 8009122:	d108      	bne.n	8009136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009134:	e031      	b.n	800919a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009136:	2308      	movs	r3, #8
 8009138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800913a:	2308      	movs	r3, #8
 800913c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	0e5b      	lsrs	r3, r3, #25
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	0f5b      	lsrs	r3, r3, #29
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	7b3a      	ldrb	r2, [r7, #12]
 8009162:	4911      	ldr	r1, [pc, #68]	; (80091a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009164:	5c8a      	ldrb	r2, [r1, r2]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	7b3a      	ldrb	r2, [r7, #12]
 800916c:	490f      	ldr	r1, [pc, #60]	; (80091ac <UARTEx_SetNbDataToProcess+0x98>)
 800916e:	5c8a      	ldrb	r2, [r1, r2]
 8009170:	fb93 f3f2 	sdiv	r3, r3, r2
 8009174:	b29a      	uxth	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	7b7a      	ldrb	r2, [r7, #13]
 8009180:	4909      	ldr	r1, [pc, #36]	; (80091a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009182:	5c8a      	ldrb	r2, [r1, r2]
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	7b7a      	ldrb	r2, [r7, #13]
 800918a:	4908      	ldr	r1, [pc, #32]	; (80091ac <UARTEx_SetNbDataToProcess+0x98>)
 800918c:	5c8a      	ldrb	r2, [r1, r2]
 800918e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009192:	b29a      	uxth	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	08009a04 	.word	0x08009a04
 80091ac:	08009a0c 	.word	0x08009a0c

080091b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	f023 0101 	bic.w	r1, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d102      	bne.n	80091e0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80091da:	2340      	movs	r3, #64	; 0x40
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e001      	b.n	80091e4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80091f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80091f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80091fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009202:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009208:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800920e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009214:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800921a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009220:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	4313      	orrs	r3, r2
 8009246:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009252:	4b3e      	ldr	r3, [pc, #248]	; (800934c <FMC_NORSRAM_Init+0x19c>)
 8009254:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800925c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009264:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800926c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009274:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	43db      	mvns	r3, r3
 8009284:	ea02 0103 	and.w	r1, r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4319      	orrs	r1, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929e:	d10c      	bne.n	80092ba <FMC_NORSRAM_Init+0x10a>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d006      	beq.n	80092d0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d12f      	bne.n	800933a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d014      	beq.n	800931e <FMC_NORSRAM_Init+0x16e>
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d819      	bhi.n	800932c <FMC_NORSRAM_Init+0x17c>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <FMC_NORSRAM_Init+0x152>
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d007      	beq.n	8009310 <FMC_NORSRAM_Init+0x160>
 8009300:	e014      	b.n	800932c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	621a      	str	r2, [r3, #32]
        break;
 800930e:	e015      	b.n	800933c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	621a      	str	r2, [r3, #32]
        break;
 800931c:	e00e      	b.n	800933c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	621a      	str	r2, [r3, #32]
        break;
 800932a:	e007      	b.n	800933c <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	621a      	str	r2, [r3, #32]
        break;
 8009338:	e000      	b.n	800933c <FMC_NORSRAM_Init+0x18c>
    }
  }
 800933a:	bf00      	nop

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	0008fb7f 	.word	0x0008fb7f

08009350 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	431a      	orrs	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	431a      	orrs	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	079b      	lsls	r3, r3, #30
 8009380:	431a      	orrs	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	041b      	lsls	r3, r3, #16
 8009388:	431a      	orrs	r2, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	3b01      	subs	r3, #1
 8009390:	051b      	lsls	r3, r3, #20
 8009392:	431a      	orrs	r2, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	3b02      	subs	r3, #2
 800939a:	061b      	lsls	r3, r3, #24
 800939c:	ea42 0103 	orr.w	r1, r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	3201      	adds	r2, #1
 80093a8:	4319      	orrs	r1, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093bc:	d113      	bne.n	80093e6 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	051b      	lsls	r3, r3, #20
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	431a      	orrs	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009408:	d121      	bne.n	800944e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	4319      	orrs	r1, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	4319      	orrs	r1, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	079b      	lsls	r3, r3, #30
 8009430:	4319      	orrs	r1, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	4319      	orrs	r1, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	041b      	lsls	r3, r3, #16
 800943e:	430b      	orrs	r3, r1
 8009440:	ea42 0103 	orr.w	r1, r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800944c:	e005      	b.n	800945a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009468:	b480      	push	{r7}
 800946a:	b08b      	sub	sp, #44	; 0x2c
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	fa93 f3a3 	rbit	r3, r3
 8009482:	613b      	str	r3, [r7, #16]
  return result;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800948e:	2320      	movs	r3, #32
 8009490:	e003      	b.n	800949a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	fab3 f383 	clz	r3, r3
 8009498:	b2db      	uxtb	r3, r3
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	2103      	movs	r1, #3
 800949e:	fa01 f303 	lsl.w	r3, r1, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	401a      	ands	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	fa93 f3a3 	rbit	r3, r3
 80094b0:	61fb      	str	r3, [r7, #28]
  return result;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80094bc:	2320      	movs	r3, #32
 80094be:	e003      	b.n	80094c8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	fab3 f383 	clz	r3, r3
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	372c      	adds	r7, #44	; 0x2c
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	43db      	mvns	r3, r3
 80094f6:	401a      	ands	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	431a      	orrs	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	605a      	str	r2, [r3, #4]
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009512:	b480      	push	{r7}
 8009514:	b08b      	sub	sp, #44	; 0x2c
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	fa93 f3a3 	rbit	r3, r3
 800952c:	613b      	str	r3, [r7, #16]
  return result;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009538:	2320      	movs	r3, #32
 800953a:	e003      	b.n	8009544 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	fab3 f383 	clz	r3, r3
 8009542:	b2db      	uxtb	r3, r3
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	2103      	movs	r1, #3
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	43db      	mvns	r3, r3
 800954e:	401a      	ands	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	fa93 f3a3 	rbit	r3, r3
 800955a:	61fb      	str	r3, [r7, #28]
  return result;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009566:	2320      	movs	r3, #32
 8009568:	e003      	b.n	8009572 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	fab3 f383 	clz	r3, r3
 8009570:	b2db      	uxtb	r3, r3
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	fa01 f303 	lsl.w	r3, r1, r3
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009580:	bf00      	nop
 8009582:	372c      	adds	r7, #44	; 0x2c
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800958c:	b480      	push	{r7}
 800958e:	b08b      	sub	sp, #44	; 0x2c
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	fa93 f3a3 	rbit	r3, r3
 80095a6:	613b      	str	r3, [r7, #16]
  return result;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80095b2:	2320      	movs	r3, #32
 80095b4:	e003      	b.n	80095be <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	fab3 f383 	clz	r3, r3
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	2103      	movs	r1, #3
 80095c2:	fa01 f303 	lsl.w	r3, r1, r3
 80095c6:	43db      	mvns	r3, r3
 80095c8:	401a      	ands	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	fa93 f3a3 	rbit	r3, r3
 80095d4:	61fb      	str	r3, [r7, #28]
  return result;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80095e0:	2320      	movs	r3, #32
 80095e2:	e003      	b.n	80095ec <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	fab3 f383 	clz	r3, r3
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	fa01 f303 	lsl.w	r3, r1, r3
 80095f4:	431a      	orrs	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60da      	str	r2, [r3, #12]
}
 80095fa:	bf00      	nop
 80095fc:	372c      	adds	r7, #44	; 0x2c
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009606:	b480      	push	{r7}
 8009608:	b08b      	sub	sp, #44	; 0x2c
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1a      	ldr	r2, [r3, #32]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	fa93 f3a3 	rbit	r3, r3
 8009620:	613b      	str	r3, [r7, #16]
  return result;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800962c:	2320      	movs	r3, #32
 800962e:	e003      	b.n	8009638 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	fab3 f383 	clz	r3, r3
 8009636:	b2db      	uxtb	r3, r3
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	210f      	movs	r1, #15
 800963c:	fa01 f303 	lsl.w	r3, r1, r3
 8009640:	43db      	mvns	r3, r3
 8009642:	401a      	ands	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	fa93 f3a3 	rbit	r3, r3
 800964e:	61fb      	str	r3, [r7, #28]
  return result;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800965a:	2320      	movs	r3, #32
 800965c:	e003      	b.n	8009666 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	fab3 f383 	clz	r3, r3
 8009664:	b2db      	uxtb	r3, r3
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	431a      	orrs	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009674:	bf00      	nop
 8009676:	372c      	adds	r7, #44	; 0x2c
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009680:	b480      	push	{r7}
 8009682:	b08b      	sub	sp, #44	; 0x2c
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	fa93 f3a3 	rbit	r3, r3
 800969c:	613b      	str	r3, [r7, #16]
  return result;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80096a8:	2320      	movs	r3, #32
 80096aa:	e003      	b.n	80096b4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	fab3 f383 	clz	r3, r3
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	210f      	movs	r1, #15
 80096b8:	fa01 f303 	lsl.w	r3, r1, r3
 80096bc:	43db      	mvns	r3, r3
 80096be:	401a      	ands	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	fa93 f3a3 	rbit	r3, r3
 80096cc:	61fb      	str	r3, [r7, #28]
  return result;
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80096d8:	2320      	movs	r3, #32
 80096da:	e003      	b.n	80096e4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	fab3 f383 	clz	r3, r3
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ec:	431a      	orrs	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80096f2:	bf00      	nop
 80096f4:	372c      	adds	r7, #44	; 0x2c
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b088      	sub	sp, #32
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	fa93 f3a3 	rbit	r3, r3
 8009714:	60fb      	str	r3, [r7, #12]
  return result;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <LL_GPIO_Init+0x26>
    return 32U;
 8009720:	2320      	movs	r3, #32
 8009722:	e003      	b.n	800972c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800972e:	e047      	b.n	80097c0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	2101      	movs	r1, #1
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	fa01 f303 	lsl.w	r3, r1, r3
 800973c:	4013      	ands	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d039      	beq.n	80097ba <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d003      	beq.n	8009756 <LL_GPIO_Init+0x58>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d10d      	bne.n	8009772 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	461a      	mov	r2, r3
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fed7 	bl	8009512 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	461a      	mov	r2, r3
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff feb8 	bl	80094e2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	461a      	mov	r2, r3
 8009778:	69b9      	ldr	r1, [r7, #24]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff ff06 	bl	800958c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d111      	bne.n	80097ac <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	2bff      	cmp	r3, #255	; 0xff
 800978c:	d807      	bhi.n	800979e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	461a      	mov	r2, r3
 8009794:	69b9      	ldr	r1, [r7, #24]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff ff35 	bl	8009606 <LL_GPIO_SetAFPin_0_7>
 800979c:	e006      	b.n	80097ac <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	461a      	mov	r2, r3
 80097a4:	69b9      	ldr	r1, [r7, #24]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff6a 	bl	8009680 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	461a      	mov	r2, r3
 80097b2:	69b9      	ldr	r1, [r7, #24]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fe57 	bl	8009468 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	3301      	adds	r3, #1
 80097be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1b0      	bne.n	8009730 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80097e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	43db      	mvns	r3, r3
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4013      	ands	r3, r2
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800980e:	b084      	sub	sp, #16
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	f107 0014 	add.w	r0, r7, #20
 800981c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	b004      	add	sp, #16
 800984e:	4770      	bx	lr

08009850 <HAL_TIM_PeriodElapsedCallback>:
#include "lib_led.h"
#include "tim.h"

static LED_STEPS_E_T s_CurrentStep = STEP_NO_LED_E;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM4){
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a2d      	ldr	r2, [pc, #180]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d153      	bne.n	800990a <HAL_TIM_PeriodElapsedCallback+0xba>
		  	if(STEP_NO_LED_E == s_CurrentStep%STEP_MAX_E){
 8009862:	4b2d      	ldr	r3, [pc, #180]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10b      	bne.n	8009888 <HAL_TIM_PeriodElapsedCallback+0x38>
		  	  	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009870:	2201      	movs	r2, #1
 8009872:	2108      	movs	r1, #8
 8009874:	4829      	ldr	r0, [pc, #164]	; (800991c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8009876:	f7f9 ff1d 	bl	80036b4 <HAL_GPIO_WritePin>
		  	  	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800987a:	2201      	movs	r2, #1
 800987c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009880:	4827      	ldr	r0, [pc, #156]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8009882:	f7f9 ff17 	bl	80036b4 <HAL_GPIO_WritePin>
 8009886:	e037      	b.n	80098f8 <HAL_TIM_PeriodElapsedCallback+0xa8>
		  	}
		  	else if(STEP_RED_LED_E == s_CurrentStep%STEP_MAX_E){
 8009888:	4b23      	ldr	r3, [pc, #140]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d10b      	bne.n	80098ae <HAL_TIM_PeriodElapsedCallback+0x5e>
		  		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8009896:	2200      	movs	r2, #0
 8009898:	2108      	movs	r1, #8
 800989a:	4820      	ldr	r0, [pc, #128]	; (800991c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800989c:	f7f9 ff0a 	bl	80036b4 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80098a0:	2201      	movs	r2, #1
 80098a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098a6:	481e      	ldr	r0, [pc, #120]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80098a8:	f7f9 ff04 	bl	80036b4 <HAL_GPIO_WritePin>
 80098ac:	e024      	b.n	80098f8 <HAL_TIM_PeriodElapsedCallback+0xa8>
		  	}
	  		else if(STEP_GREEN_LED_E == s_CurrentStep%STEP_MAX_E){
 80098ae:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d10b      	bne.n	80098d4 <HAL_TIM_PeriodElapsedCallback+0x84>
	  			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80098bc:	2201      	movs	r2, #1
 80098be:	2108      	movs	r1, #8
 80098c0:	4816      	ldr	r0, [pc, #88]	; (800991c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80098c2:	f7f9 fef7 	bl	80036b4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80098c6:	2200      	movs	r2, #0
 80098c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098cc:	4814      	ldr	r0, [pc, #80]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80098ce:	f7f9 fef1 	bl	80036b4 <HAL_GPIO_WritePin>
 80098d2:	e011      	b.n	80098f8 <HAL_TIM_PeriodElapsedCallback+0xa8>
	  		}
	  		else if(STEP_BOTH_LED_E == s_CurrentStep%STEP_MAX_E){
 80098d4:	4b10      	ldr	r3, [pc, #64]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d10a      	bne.n	80098f8 <HAL_TIM_PeriodElapsedCallback+0xa8>
	  			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80098e2:	2200      	movs	r2, #0
 80098e4:	2108      	movs	r1, #8
 80098e6:	480d      	ldr	r0, [pc, #52]	; (800991c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80098e8:	f7f9 fee4 	bl	80036b4 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80098ec:	2200      	movs	r2, #0
 80098ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098f2:	480b      	ldr	r0, [pc, #44]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80098f4:	f7f9 fede 	bl	80036b4 <HAL_GPIO_WritePin>
	  		}
  			s_CurrentStep = (s_CurrentStep + 1u) % STEP_MAX_E;
 80098f8:	4b07      	ldr	r3, [pc, #28]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	3301      	adds	r3, #1
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	b2da      	uxtb	r2, r3
 8009906:	4b04      	ldr	r3, [pc, #16]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8009908:	701a      	strb	r2, [r3, #0]
	  }
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40000800 	.word	0x40000800
 8009918:	200008e4 	.word	0x200008e4
 800991c:	42020c00 	.word	0x42020c00
 8009920:	42021800 	.word	0x42021800

08009924 <__libc_init_array>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4d0d      	ldr	r5, [pc, #52]	; (800995c <__libc_init_array+0x38>)
 8009928:	2600      	movs	r6, #0
 800992a:	4c0d      	ldr	r4, [pc, #52]	; (8009960 <__libc_init_array+0x3c>)
 800992c:	1b64      	subs	r4, r4, r5
 800992e:	10a4      	asrs	r4, r4, #2
 8009930:	42a6      	cmp	r6, r4
 8009932:	d109      	bne.n	8009948 <__libc_init_array+0x24>
 8009934:	4d0b      	ldr	r5, [pc, #44]	; (8009964 <__libc_init_array+0x40>)
 8009936:	2600      	movs	r6, #0
 8009938:	4c0b      	ldr	r4, [pc, #44]	; (8009968 <__libc_init_array+0x44>)
 800993a:	f000 f81f 	bl	800997c <_init>
 800993e:	1b64      	subs	r4, r4, r5
 8009940:	10a4      	asrs	r4, r4, #2
 8009942:	42a6      	cmp	r6, r4
 8009944:	d105      	bne.n	8009952 <__libc_init_array+0x2e>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	f855 3b04 	ldr.w	r3, [r5], #4
 800994c:	3601      	adds	r6, #1
 800994e:	4798      	blx	r3
 8009950:	e7ee      	b.n	8009930 <__libc_init_array+0xc>
 8009952:	f855 3b04 	ldr.w	r3, [r5], #4
 8009956:	3601      	adds	r6, #1
 8009958:	4798      	blx	r3
 800995a:	e7f2      	b.n	8009942 <__libc_init_array+0x1e>
 800995c:	08009a1c 	.word	0x08009a1c
 8009960:	08009a1c 	.word	0x08009a1c
 8009964:	08009a1c 	.word	0x08009a1c
 8009968:	08009a20 	.word	0x08009a20

0800996c <memset>:
 800996c:	4402      	add	r2, r0
 800996e:	4603      	mov	r3, r0
 8009970:	4293      	cmp	r3, r2
 8009972:	d100      	bne.n	8009976 <memset+0xa>
 8009974:	4770      	bx	lr
 8009976:	f803 1b01 	strb.w	r1, [r3], #1
 800997a:	e7f9      	b.n	8009970 <memset+0x4>

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr
