
playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c0  080092c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c8  080092c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080092d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  2000000c  080092dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  080092dc  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b2e8  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058d6  00000000  00000000  0004b32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002420  00000000  00000000  00050c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021d0  00000000  00000000  00053020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bf7  00000000  00000000  000551f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8b1  00000000  00000000  00088de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ec14  00000000  00000000  000b7698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f62ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a0c  00000000  00000000  001f62fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08009228 	.word	0x08009228

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08009228 	.word	0x08009228

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
 8000574:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000578:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <MX_ADC1_Init+0xe4>)
 800057a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_ADC1_Init+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <MX_ADC1_Init+0xe0>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <MX_ADC1_Init+0xe0>)
 8000596:	2204      	movs	r2, #4
 8000598:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <MX_ADC1_Init+0xe0>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005d8:	f001 fe94 	bl	8002304 <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005e2:	f000 fd1f 	bl	8001024 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <MX_ADC1_Init+0xe0>)
 80005f2:	f002 fbe9 	bl	8002dc8 <HAL_ADCEx_MultiModeConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005fc:	f000 fd12 	bl	8001024 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_ADC1_Init+0xe8>)
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	2306      	movs	r3, #6
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060c:	237f      	movs	r3, #127	; 0x7f
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000610:	2304      	movs	r3, #4
 8000612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0xe0>)
 800061e:	f001 ffc3 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000628:	f000 fcfc 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	42028000 	.word	0x42028000
 800063c:	25b00200 	.word	0x25b00200

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <HAL_ADC_MspInit+0x74>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d123      	bne.n	80006aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0x78>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x7c>)
 80006a6:	f002 fdff 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42028000 	.word	0x42028000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	42020000 	.word	0x42020000

080006c0 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006c6:	4a49      	ldr	r2, [pc, #292]	; (80007ec <MX_DFSDM1_Init+0x12c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006d8:	2202      	movs	r2, #2
 80006da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006f0:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000704:	2201      	movs	r2, #1
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000710:	2200      	movs	r2, #0
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000714:	4834      	ldr	r0, [pc, #208]	; (80007e8 <MX_DFSDM1_Init+0x128>)
 8000716:	f002 fcdf 	bl	80030d8 <HAL_DFSDM_ChannelInit>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000720:	f000 fc80 	bl	8001024 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_DFSDM1_Init+0x134>)
 8000728:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800072c:	2201      	movs	r2, #1
 800072e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000738:	2202      	movs	r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000750:	2202      	movs	r2, #2
 8000752:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000762:	2201      	movs	r2, #1
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000772:	481f      	ldr	r0, [pc, #124]	; (80007f0 <MX_DFSDM1_Init+0x130>)
 8000774:	f002 fcb0 	bl	80030d8 <HAL_DFSDM_ChannelInit>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 800077e:	f000 fc51 	bl	8001024 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_DFSDM1_Init+0x13c>)
 8000786:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 800078a:	2201      	movs	r2, #1
 800078c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 8000796:	2202      	movs	r2, #2
 8000798:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 800079c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0x00;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_DFSDM1_Init+0x138>)
 80007d4:	f002 fc80 	bl	80030d8 <HAL_DFSDM_ChannelInit>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_DFSDM1_Init+0x122>
  {
    Error_Handler();
 80007de:	f000 fc21 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000090 	.word	0x20000090
 80007ec:	40016000 	.word	0x40016000
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	40016020 	.word	0x40016020
 80007f8:	20000100 	.word	0x20000100
 80007fc:	40016040 	.word	0x40016040

08000800 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0b0      	sub	sp, #192	; 0xc0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	2294      	movs	r2, #148	; 0x94
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f008 fcf9 	bl	8009218 <memset>
  if(DFSDM1_Init == 0)
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d165      	bne.n	80008fa <HAL_DFSDM_ChannelMspInit+0xfa>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f004 fa70 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800084a:	f000 fbeb 	bl	8001024 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a27      	ldr	r2, [pc, #156]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800087e:	f003 fa5b 	bl	8003d38 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008b2:	2306      	movs	r3, #6
 80008b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008bc:	4619      	mov	r1, r3
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <HAL_DFSDM_ChannelMspInit+0x10c>)
 80008c0:	f002 fcf2 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008de:	2306      	movs	r3, #6
 80008e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_DFSDM_ChannelMspInit+0x110>)
 80008ec:	f002 fcdc 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a03      	ldr	r2, [pc, #12]	; (8000904 <HAL_DFSDM_ChannelMspInit+0x104>)
 80008f8:	6013      	str	r3, [r2, #0]
  }
}
 80008fa:	bf00      	nop
 80008fc:	37c0      	adds	r7, #192	; 0xc0
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000138 	.word	0x20000138
 8000908:	40021000 	.word	0x40021000
 800090c:	42021800 	.word	0x42021800
 8000910:	42020400 	.word	0x42020400

08000914 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2220      	movs	r2, #32
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f008 fc79 	bl	8009218 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_FMC_Init+0xc8>)
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <MX_FMC_Init+0xcc>)
 800092a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_FMC_Init+0xc8>)
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_FMC_Init+0xd0>)
 8000930:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_FMC_Init+0xc8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_FMC_Init+0xc8>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_FMC_Init+0xc8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_FMC_Init+0xc8>)
 8000946:	2210      	movs	r2, #16
 8000948:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_FMC_Init+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_FMC_Init+0xc8>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_FMC_Init+0xc8>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_FMC_Init+0xc8>)
 800095e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_FMC_Init+0xc8>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_FMC_Init+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_FMC_Init+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_FMC_Init+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_FMC_Init+0xc8>)
 800097e:	2200      	movs	r2, #0
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_FMC_Init+0xc8>)
 8000984:	2200      	movs	r2, #0
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_FMC_Init+0xc8>)
 800098a:	2200      	movs	r2, #0
 800098c:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_FMC_Init+0xc8>)
 8000990:	2200      	movs	r2, #0
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_FMC_Init+0xc8>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 800099c:	230f      	movs	r3, #15
 800099e:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80009a0:	230f      	movs	r3, #15
 80009a2:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009ac:	230f      	movs	r3, #15
 80009ae:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009b4:	2311      	movs	r3, #17
 80009b6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_FMC_Init+0xc8>)
 80009c4:	f006 faf7 	bl	8006fb6 <HAL_SRAM_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 80009ce:	f000 fb29 	bl	8001024 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000013c 	.word	0x2000013c
 80009e0:	44020000 	.word	0x44020000
 80009e4:	44020104 	.word	0x44020104

080009e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_FMC_MspInit+0xa4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d13e      	bne.n	8000a82 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_FMC_MspInit+0xa4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6513      	str	r3, [r2, #80]	; 0x50
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_FMC_MspInit+0xa8>)
 8000a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8000a22:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a34:	230c      	movs	r3, #12
 8000a36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <HAL_FMC_MspInit+0xac>)
 8000a3e:	f002 fc33 	bl	80032a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a42:	2301      	movs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <HAL_FMC_MspInit+0xb0>)
 8000a5c:	f002 fc24 	bl	80032a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8000a60:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <HAL_FMC_MspInit+0xb4>)
 8000a7c:	f002 fc14 	bl	80032a8 <HAL_GPIO_Init>
 8000a80:	e000      	b.n	8000a84 <HAL_FMC_MspInit+0x9c>
    return;
 8000a82:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000194 	.word	0x20000194
 8000a90:	40021000 	.word	0x40021000
 8000a94:	42020c00 	.word	0x42020c00
 8000a98:	42021400 	.word	0x42021400
 8000a9c:	42021000 	.word	0x42021000

08000aa0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000aa8:	f7ff ff9e 	bl	80009e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PC9   ------> SDMMC1_D1
     PC8   ------> SDMMC1_D0
*/
void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4b98      	ldr	r3, [pc, #608]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a97      	ldr	r2, [pc, #604]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a91      	ldr	r2, [pc, #580]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b8f      	ldr	r3, [pc, #572]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a8b      	ldr	r2, [pc, #556]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b89      	ldr	r3, [pc, #548]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000b12:	f003 f911 	bl	8003d38 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a84      	ldr	r2, [pc, #528]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b82      	ldr	r3, [pc, #520]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b7f      	ldr	r3, [pc, #508]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a7e      	ldr	r2, [pc, #504]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b79      	ldr	r3, [pc, #484]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b73      	ldr	r3, [pc, #460]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a72      	ldr	r2, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a6c      	ldr	r2, [pc, #432]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <MX_GPIO_Init+0x278>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f241 1102 	movw	r1, #4354	; 0x1102
 8000b94:	4866      	ldr	r0, [pc, #408]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000b96:	f002 fd07 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4865      	ldr	r0, [pc, #404]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000ba0:	f002 fd02 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4863      	ldr	r0, [pc, #396]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000baa:	f002 fcfd 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb4:	4861      	ldr	r0, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x288>)
 8000bb6:	f002 fcf7 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4860      	ldr	r0, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x28c>)
 8000bc0:	f002 fcf2 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 8000bca:	485e      	ldr	r0, [pc, #376]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000bcc:	f002 fcec 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 8000bd0:	f241 1302 	movw	r3, #4354	; 0x1102
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4851      	ldr	r0, [pc, #324]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000bea:	f002 fb5d 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	484a      	ldr	r0, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000c0a:	f002 fb4d 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 8000c0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c20:	230c      	movs	r3, #12
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x294>)
 8000c2c:	f002 fb3c 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4840      	ldr	r0, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x294>)
 8000c46:	f002 fb2f 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4834      	ldr	r0, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x280>)
 8000c62:	f002 fb21 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8000c66:	230e      	movs	r3, #14
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <MX_GPIO_Init+0x298>)
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4832      	ldr	r0, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000c7a:	f002 fb15 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4828      	ldr	r0, [pc, #160]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000c96:	f002 fb07 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_GPIO_Init+0x288>)
 8000cb4:	f002 faf8 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <MX_GPIO_Init+0x28c>)
 8000cd0:	f002 faea 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_GPIO_Init+0x298>)
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_GPIO_Init+0x27c>)
 8000ce8:	f002 fade 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8000cec:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0x290>)
 8000d06:	f002 facf 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_GPIO_Init+0x284>)
 8000d20:	f002 fac2 	bl	80032a8 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42021800 	.word	0x42021800
 8000d34:	42020c00 	.word	0x42020c00
 8000d38:	42020400 	.word	0x42020400
 8000d3c:	42020000 	.word	0x42020000
 8000d40:	42021c00 	.word	0x42021c00
 8000d44:	42021400 	.word	0x42021400
 8000d48:	42020800 	.word	0x42020800
 8000d4c:	10110000 	.word	0x10110000

08000d50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f002 fc24 	bl	80035d8 <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 f945 	bl	8001024 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f002 fcaa 	bl	80036f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 f93c 	bl	8001024 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f002 fcec 	bl	800378c <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 f933 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000198 	.word	0x20000198
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40505681 	.word	0x40505681

08000dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ae      	sub	sp, #184	; 0xb8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2294      	movs	r2, #148	; 0x94
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f008 fa11 	bl	8009218 <memset>
  if(i2cHandle->Instance==I2C1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_I2C_MspInit+0xb0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13a      	bne.n	8000e76 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 ff89 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f000 f904 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0xb8>)
 8000e5a:	f002 fa25 	bl	80032a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	37b8      	adds	r7, #184	; 0xb8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	42020400 	.word	0x42020400

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f001 f821 	bl	8001ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f830 	bl	8000ef8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e98:	f000 f894 	bl	8000fc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff fe0a 	bl	8000ab4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ea0:	f7ff fb58 	bl	8000554 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000ea4:	f7ff fc0c 	bl	80006c0 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8000ea8:	f7ff fd34 	bl	8000914 <MX_FMC_Init>
  MX_I2C1_Init();
 8000eac:	f7ff ff50 	bl	8000d50 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000eb0:	f000 fe20 	bl	8001af4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000eb4:	f000 fe6c 	bl	8001b90 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000eb8:	f000 f8ba 	bl	8001030 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8000ebc:	f000 f9b2 	bl	8001224 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000ec0:	f000 fab2 	bl	8001428 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000ec4:	f000 fc40 	bl	8001748 <MX_TIM4_Init>
  MX_TIM16_Init();
 8000ec8:	f000 fc8e 	bl	80017e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000ecc:	f000 fcb2 	bl	8001834 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000ed0:	f000 fdda 	bl	8001a88 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000ed4:	f000 ff4c 	bl	8001d70 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <main+0x64>)
 8000ee0:	f002 fb62 	bl	80035a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <main+0x68>)
 8000eea:	f002 fb5d 	bl	80035a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000eee:	e7f3      	b.n	8000ed8 <main+0x4c>
 8000ef0:	42021800 	.word	0x42021800
 8000ef4:	42020c00 	.word	0x42020c00

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b098      	sub	sp, #96	; 0x60
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	2248      	movs	r2, #72	; 0x48
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 f986 	bl	8009218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f002 feb0 	bl	8003c80 <HAL_PWREx_ControlVoltageScaling>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f26:	f000 f87d 	bl	8001024 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f2a:	f002 fe8b 	bl	8003c44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <SystemClock_Config+0xc8>)
 8000f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <SystemClock_Config+0xc8>)
 8000f36:	f023 0318 	bic.w	r3, r3, #24
 8000f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000f3e:	2316      	movs	r3, #22
 8000f40:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f42:	2381      	movs	r3, #129	; 0x81
 8000f44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f58:	23b0      	movs	r3, #176	; 0xb0
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f60:	2301      	movs	r3, #1
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f64:	230c      	movs	r3, #12
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000f68:	2337      	movs	r3, #55	; 0x37
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 ff0f 	bl	8003da0 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f88:	f000 f84c 	bl	8001024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fbdd 	bl	8004764 <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000fb0:	f000 f838 	bl	8001024 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fb4:	f005 f9dc 	bl	8006370 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fb8:	bf00      	nop
 8000fba:	3760      	adds	r7, #96	; 0x60
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a6      	sub	sp, #152	; 0x98
 8000fc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2294      	movs	r2, #148	; 0x94
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f008 f921 	bl	8009218 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8000fd6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000fda:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000ff0:	2330      	movs	r3, #48	; 0x30
 8000ff2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000ff4:	2311      	movs	r3, #17
 8000ff6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <PeriphCommonClock_Config+0x5c>)
 8001002:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fe8c 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001012:	f000 f807 	bl	8001024 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3798      	adds	r7, #152	; 0x98
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	01010000 	.word	0x01010000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_OCTOSPI1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800103c:	2201      	movs	r2, #1
 800103e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800104e:	2220      	movs	r2, #32
 8001050:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001084:	2208      	movs	r2, #8
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_OCTOSPI1_Init+0x74>)
 8001090:	f002 fbc8 	bl	8003824 <HAL_OSPI_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f7ff ffc3 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001e4 	.word	0x200001e4
 80010a8:	44021000 	.word	0x44021000

080010ac <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0b0      	sub	sp, #192	; 0xc0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	2294      	movs	r2, #148	; 0x94
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 f8a3 	bl	8009218 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_OSPI_MspInit+0x164>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	f040 8094 	bne.w	8001206 <HAL_OSPI_MspInit+0x15a>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80010de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fe18 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 80010fa:	f7ff ff93 	bl	8001024 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001102:	4a44      	ldr	r2, [pc, #272]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6513      	str	r3, [r2, #80]	; 0x50
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 800110c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a38      	ldr	r2, [pc, #224]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_OSPI_MspInit+0x168>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 800115e:	230e      	movs	r3, #14
 8001160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001176:	230a      	movs	r3, #10
 8001178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001180:	4619      	mov	r1, r3
 8001182:	4825      	ldr	r0, [pc, #148]	; (8001218 <HAL_OSPI_MspInit+0x16c>)
 8001184:	f002 f890 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001188:	2301      	movs	r3, #1
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011aa:	4619      	mov	r1, r3
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <HAL_OSPI_MspInit+0x16c>)
 80011ae:	f002 f87b 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 80011b2:	23cc      	movs	r3, #204	; 0xcc
 80011b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011ca:	230a      	movs	r3, #10
 80011cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <HAL_OSPI_MspInit+0x170>)
 80011d8:	f002 f866 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80011f4:	230a      	movs	r3, #10
 80011f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <HAL_OSPI_MspInit+0x174>)
 8001202:	f002 f851 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	37c0      	adds	r7, #192	; 0xc0
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	44021000 	.word	0x44021000
 8001214:	40021000 	.word	0x40021000
 8001218:	42020800 	.word	0x42020800
 800121c:	42020000 	.word	0x42020000
 8001220:	42020400 	.word	0x42020400

08001224 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <MX_SAI1_Init+0x124>)
 800122a:	4a48      	ldr	r2, [pc, #288]	; (800134c <MX_SAI1_Init+0x128>)
 800122c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <MX_SAI1_Init+0x124>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <MX_SAI1_Init+0x124>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800123a:	4b43      	ldr	r3, [pc, #268]	; (8001348 <MX_SAI1_Init+0x124>)
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001240:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MX_SAI1_Init+0x124>)
 8001242:	2200      	movs	r2, #0
 8001244:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <MX_SAI1_Init+0x124>)
 8001248:	2200      	movs	r2, #0
 800124a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <MX_SAI1_Init+0x124>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <MX_SAI1_Init+0x124>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MX_SAI1_Init+0x124>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <MX_SAI1_Init+0x124>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <MX_SAI1_Init+0x124>)
 8001266:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <MX_SAI1_Init+0x12c>)
 8001268:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <MX_SAI1_Init+0x124>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <MX_SAI1_Init+0x124>)
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_SAI1_Init+0x124>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <MX_SAI1_Init+0x124>)
 800127e:	2200      	movs	r2, #0
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <MX_SAI1_Init+0x124>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_SAI1_Init+0x124>)
 800128c:	2201      	movs	r2, #1
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_SAI1_Init+0x124>)
 8001292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_SAI1_Init+0x124>)
 800129a:	2208      	movs	r2, #8
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_SAI1_Init+0x124>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_SAI1_Init+0x124>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_SAI1_Init+0x124>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_SAI1_Init+0x124>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_SAI1_Init+0x124>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_SAI1_Init+0x124>)
 80012be:	2200      	movs	r2, #0
 80012c0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_SAI1_Init+0x124>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_SAI1_Init+0x124>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80012ce:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_SAI1_Init+0x124>)
 80012d0:	f005 fba4 	bl	8006a1c <HAL_SAI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 80012da:	f7ff fea3 	bl	8001024 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_SAI1_Init+0x130>)
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <MX_SAI1_Init+0x134>)
 80012e2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_SAI1_Init+0x130>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_SAI1_Init+0x130>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SAI1_Init+0x130>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_SAI1_Init+0x130>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_SAI1_Init+0x130>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_SAI1_Init+0x130>)
 8001304:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001308:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_SAI1_Init+0x130>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_SAI1_Init+0x130>)
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_SAI1_Init+0x130>)
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_SAI1_Init+0x130>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_SAI1_Init+0x130>)
 8001326:	2201      	movs	r2, #1
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_SAI1_Init+0x130>)
 800132c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_SAI1_Init+0x130>)
 8001334:	f005 fb72 	bl	8006a1c <HAL_SAI_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 800133e:	f7ff fe71 	bl	8001024 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000023c 	.word	0x2000023c
 800134c:	40015404 	.word	0x40015404
 8001350:	0002ee00 	.word	0x0002ee00
 8001354:	200002d4 	.word	0x200002d4
 8001358:	40015424 	.word	0x40015424

0800135c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_SAI_MspInit+0xb8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d124      	bne.n	80013b8 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10b      	bne.n	800138e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_SAI_MspInit+0xc0>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_SAI_MspInit+0xc0>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6613      	str	r3, [r2, #96]	; 0x60
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_SAI_MspInit+0xc0>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 8001396:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6;
 8001398:	2374      	movs	r3, #116	; 0x74
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013a8:	230d      	movs	r3, #13
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	481b      	ldr	r0, [pc, #108]	; (8001420 <HAL_SAI_MspInit+0xc4>)
 80013b4:	f001 ff78 	bl	80032a8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_SAI_MspInit+0xc8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d124      	bne.n	800140c <HAL_SAI_MspInit+0xb0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_SAI_MspInit+0xc0>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_SAI_MspInit+0xc0>)
 80013d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d4:	6613      	str	r3, [r2, #96]	; 0x60
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_SAI_MspInit+0xc0>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_SAI_MspInit+0xbc>)
 80013ea:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013fc:	230d      	movs	r3, #13
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <HAL_SAI_MspInit+0xc4>)
 8001408:	f001 ff4e 	bl	80032a8 <HAL_GPIO_Init>

    }
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40015404 	.word	0x40015404
 8001418:	2000036c 	.word	0x2000036c
 800141c:	40021000 	.word	0x40021000
 8001420:	42021000 	.word	0x42021000
 8001424:	40015424 	.word	0x40015424

08001428 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_SPI1_Init+0x70>)
 800142e:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_SPI1_Init+0x74>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_SPI1_Init+0x70>)
 8001434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_SPI1_Init+0x70>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_SPI1_Init+0x70>)
 8001442:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_SPI1_Init+0x70>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SPI1_Init+0x70>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_SPI1_Init+0x70>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI1_Init+0x70>)
 800145c:	2210      	movs	r2, #16
 800145e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_SPI1_Init+0x70>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI1_Init+0x70>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_SPI1_Init+0x70>)
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI1_Init+0x70>)
 8001474:	2207      	movs	r2, #7
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_SPI1_Init+0x70>)
 800147a:	2200      	movs	r2, #0
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI1_Init+0x70>)
 8001480:	2208      	movs	r2, #8
 8001482:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_SPI1_Init+0x70>)
 8001486:	f005 fcf3 	bl	8006e70 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8001490:	f7ff fdc8 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000370 	.word	0x20000370
 800149c:	40013000 	.word	0x40013000

080014a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_SPI_MspInit+0x80>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d129      	bne.n	8001516 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014cc:	6613      	str	r3, [r2, #96]	; 0x60
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_SPI_MspInit+0x84>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80014f2:	f002 fc21 	bl	8003d38 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80014f6:	233c      	movs	r3, #60	; 0x3c
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001506:	2305      	movs	r3, #5
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_SPI_MspInit+0x88>)
 8001512:	f001 fec9 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40013000 	.word	0x40013000
 8001524:	40021000 	.word	0x40021000
 8001528:	42021800 	.word	0x42021800

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 fce0 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <SystemCoreClockUpdate+0x144>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e005      	b.n	800161a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <SystemCoreClockUpdate+0x148>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d866      	bhi.n	80016fe <SystemCoreClockUpdate+0x112>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <SystemCoreClockUpdate+0x4c>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	0800166d 	.word	0x0800166d
 800163c:	080016ff 	.word	0x080016ff
 8001640:	080016ff 	.word	0x080016ff
 8001644:	080016ff 	.word	0x080016ff
 8001648:	08001675 	.word	0x08001675
 800164c:	080016ff 	.word	0x080016ff
 8001650:	080016ff 	.word	0x080016ff
 8001654:	080016ff 	.word	0x080016ff
 8001658:	0800167d 	.word	0x0800167d
 800165c:	080016ff 	.word	0x080016ff
 8001660:	080016ff 	.word	0x080016ff
 8001664:	080016ff 	.word	0x080016ff
 8001668:	08001685 	.word	0x08001685
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	6013      	str	r3, [r2, #0]
      break;
 8001672:	e048      	b.n	8001706 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 8001676:	4a31      	ldr	r2, [pc, #196]	; (800173c <SystemCoreClockUpdate+0x150>)
 8001678:	601a      	str	r2, [r3, #0]
      break;
 800167a:	e044      	b.n	8001706 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 800167e:	4a30      	ldr	r2, [pc, #192]	; (8001740 <SystemCoreClockUpdate+0x154>)
 8001680:	601a      	str	r2, [r3, #0]
      break;
 8001682:	e040      	b.n	8001706 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	3301      	adds	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <SystemCoreClockUpdate+0xbe>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d006      	beq.n	80016b6 <SystemCoreClockUpdate+0xca>
 80016a8:	e00b      	b.n	80016c2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80016aa:	4a24      	ldr	r2, [pc, #144]	; (800173c <SystemCoreClockUpdate+0x150>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	613b      	str	r3, [r7, #16]
          break;
 80016b4:	e00b      	b.n	80016ce <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <SystemCoreClockUpdate+0x154>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
          break;
 80016c0:	e005      	b.n	80016ce <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	613b      	str	r3, [r7, #16]
          break;
 80016cc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <SystemCoreClockUpdate+0x144>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <SystemCoreClockUpdate+0x144>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0e5b      	lsrs	r3, r3, #25
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	3301      	adds	r3, #1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 80016fa:	6013      	str	r3, [r2, #0]
      break;
 80016fc:	e003      	b.n	8001706 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	6013      	str	r3, [r2, #0]
      break;
 8001704:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <SystemCoreClockUpdate+0x144>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <SystemCoreClockUpdate+0x158>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemCoreClockUpdate+0x14c>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	08009258 	.word	0x08009258
 8001738:	20000000 	.word	0x20000000
 800173c:	00f42400 	.word	0x00f42400
 8001740:	007a1200 	.word	0x007a1200
 8001744:	08009240 	.word	0x08009240

08001748 <MX_TIM4_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM4_Init+0x98>)
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <MX_TIM4_Init+0x9c>)
 800176c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_TIM4_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM4_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM4_Init+0x98>)
 800177c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001780:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_TIM4_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM4_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <MX_TIM4_Init+0x98>)
 8001790:	f005 fc59 	bl	8007046 <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800179a:	f7ff fc43 	bl	8001024 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800179e:	2307      	movs	r3, #7
 80017a0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80017a2:	2310      	movs	r3, #16
 80017a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM4_Init+0x98>)
 80017ae:	f005 fe13 	bl	80073d8 <HAL_TIM_SlaveConfigSynchro>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80017b8:	f7ff fc34 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_TIM4_Init+0x98>)
 80017ca:	f006 fac9 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80017d4:	f7ff fc26 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200003d4 	.word	0x200003d4
 80017e4:	40000800 	.word	0x40000800

080017e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_TIM16_Init+0x44>)
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <MX_TIM16_Init+0x48>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_TIM16_Init+0x44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_TIM16_Init+0x44>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_TIM16_Init+0x44>)
 8001800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001804:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_TIM16_Init+0x44>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_TIM16_Init+0x44>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_TIM16_Init+0x44>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_TIM16_Init+0x44>)
 800181a:	f005 fc14 	bl	8007046 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001824:	f7ff fbfe 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000420 	.word	0x20000420
 8001830:	40014400 	.word	0x40014400

08001834 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2234      	movs	r2, #52	; 0x34
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f007 fcdf 	bl	8009218 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <MX_TIM17_Init+0xec>)
 800185c:	4a31      	ldr	r2, [pc, #196]	; (8001924 <MX_TIM17_Init+0xf0>)
 800185e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <MX_TIM17_Init+0xec>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_TIM17_Init+0xec>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <MX_TIM17_Init+0xec>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_TIM17_Init+0xec>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_TIM17_Init+0xec>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_TIM17_Init+0xec>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <MX_TIM17_Init+0xec>)
 8001888:	f005 fbdd 	bl	8007046 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001892:	f7ff fbc7 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001896:	4822      	ldr	r0, [pc, #136]	; (8001920 <MX_TIM17_Init+0xec>)
 8001898:	f005 fc2c 	bl	80070f4 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80018a2:	f7ff fbbf 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4815      	ldr	r0, [pc, #84]	; (8001920 <MX_TIM17_Init+0xec>)
 80018cc:	f005 fc74 	bl	80071b8 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80018d6:	f7ff fba5 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80018fc:	463b      	mov	r3, r7
 80018fe:	4619      	mov	r1, r3
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM17_Init+0xec>)
 8001902:	f006 fab5 	bl	8007e70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800190c:	f7ff fb8a 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM17_Init+0xec>)
 8001912:	f000 f851 	bl	80019b8 <HAL_TIM_MspPostInit>

}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000046c 	.word	0x2000046c
 8001924:	40014800 	.word	0x40014800

08001928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_TIM_Base_MspInit+0x80>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10c      	bne.n	8001954 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001952:	e022      	b.n	800199a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_TIM_Base_MspInit+0x88>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10c      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	6613      	str	r3, [r2, #96]	; 0x60
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
}
 8001976:	e010      	b.n	800199a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM17)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_TIM_Base_MspInit+0x8c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10b      	bne.n	800199a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <HAL_TIM_Base_MspInit+0x84>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40000800 	.word	0x40000800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40014400 	.word	0x40014400
 80019b4:	40014800 	.word	0x40014800

080019b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_TIM_MspPostInit+0x64>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11b      	bne.n	8001a12 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_TIM_MspPostInit+0x68>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_TIM_MspPostInit+0x68>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_TIM_MspPostInit+0x68>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80019f2:	2302      	movs	r3, #2
 80019f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001a02:	230e      	movs	r3, #14
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_TIM_MspPostInit+0x6c>)
 8001a0e:	f001 fc4b 	bl	80032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40014800 	.word	0x40014800
 8001a20:	40021000 	.word	0x40021000
 8001a24:	42021000 	.word	0x42021000

08001a28 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	463b      	mov	r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a9e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001aa2:	f7ff ffd9 	bl	8001a58 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff ffbe 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7ff ffbb 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <MX_UCPD1_Init+0x64>)
 8001ac6:	f007 fada 	bl	800907e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ace:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_UCPD1_Init+0x68>)
 8001ade:	f007 face 	bl	800907e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	42020000 	.word	0x42020000
 8001af0:	42020400 	.word	0x42020400

08001af4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MX_LPUART1_UART_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <MX_LPUART1_UART_Init+0x98>)
 8001b02:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b18:	220c      	movs	r2, #12
 8001b1a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b3a:	4812      	ldr	r0, [pc, #72]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b3c:	f006 fa38 	bl	8007fb0 <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001b46:	f7ff fa6d 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b4e:	f006 ff25 	bl	800899c <HAL_UARTEx_SetTxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001b58:	f7ff fa64 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b60:	f006 ff5a 	bl	8008a18 <HAL_UARTEx_SetRxFifoThreshold>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001b6a:	f7ff fa5b 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_LPUART1_UART_Init+0x90>)
 8001b70:	f006 fedb 	bl	800892a <HAL_UARTEx_DisableFifoMode>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001b7a:	f7ff fa53 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200004b8 	.word	0x200004b8
 8001b88:	40008000 	.word	0x40008000
 8001b8c:	00033324 	.word	0x00033324

08001b90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <MX_USART1_UART_Init+0x94>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bda:	f006 f9e9 	bl	8007fb0 <HAL_UART_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001be4:	f7ff fa1e 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bec:	f006 fed6 	bl	800899c <HAL_UARTEx_SetTxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f7ff fa15 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bfe:	f006 ff0b 	bl	8008a18 <HAL_UARTEx_SetRxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f7ff fa0c 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_USART1_UART_Init+0x90>)
 8001c0e:	f006 fe8c 	bl	800892a <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f7ff fa04 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000548 	.word	0x20000548
 8001c24:	40013800 	.word	0x40013800

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b0      	sub	sp, #192	; 0xc0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2294      	movs	r2, #148	; 0x94
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f007 fae5 	bl	8009218 <memset>
  if(uartHandle->Instance==LPUART1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <HAL_UART_MspInit+0x134>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d13c      	bne.n	8001cd2 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f85d 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c70:	f7ff f9d8 	bl	8001024 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	4a33      	ldr	r2, [pc, #204]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c98:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ca4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4826      	ldr	r0, [pc, #152]	; (8001d64 <HAL_UART_MspInit+0x13c>)
 8001ccc:	f001 faec 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cd0:	e040      	b.n	8001d54 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_UART_MspInit+0x140>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d13b      	bne.n	8001d54 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 f81b 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001cf4:	f7ff f996 	bl	8001024 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6613      	str	r3, [r2, #96]	; 0x60
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_UART_MspInit+0x138>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001d28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d42:	2307      	movs	r3, #7
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <HAL_UART_MspInit+0x144>)
 8001d50:	f001 faaa 	bl	80032a8 <HAL_GPIO_Init>
}
 8001d54:	bf00      	nop
 8001d56:	37c0      	adds	r7, #192	; 0xc0
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40008000 	.word	0x40008000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	42020400 	.word	0x42020400
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	42020000 	.word	0x42020000

08001d70 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <MX_USB_PCD_Init+0x4c>)
 8001d78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d82:	2202      	movs	r2, #2
 8001d84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_USB_PCD_Init+0x48>)
 8001da6:	f001 fe3d 	bl	8003a24 <HAL_PCD_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001db0:	f7ff f938 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200005d8 	.word	0x200005d8
 8001dbc:	4000d400 	.word	0x4000d400

08001dc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0ae      	sub	sp, #184	; 0xb8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	2294      	movs	r2, #148	; 0x94
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f007 fa19 	bl	8009218 <memset>
  if(pcdHandle->Instance==USB)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_PCD_MspInit+0xb8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d13e      	bne.n	8001e6e <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001df6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 ff8e 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001e0e:	f7ff f909 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001e2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e44:	230a      	movs	r3, #10
 8001e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_PCD_MspInit+0xc0>)
 8001e52:	f001 fa29 	bl	80032a8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e60:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_PCD_MspInit+0xbc>)
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	37b8      	adds	r7, #184	; 0xb8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	4000d400 	.word	0x4000d400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42020000 	.word	0x42020000

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e88:	f7ff fb9e 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e8e:	e003      	b.n	8001e98 <LoopCopyDataInit>

08001e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e96:	3104      	adds	r1, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ea0:	d3f6      	bcc.n	8001e90 <CopyDataInit>
	ldr	r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ea4:	e002      	b.n	8001eac <LoopFillZerobss>

08001ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ea8:	f842 3b04 	str.w	r3, [r2], #4

08001eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LoopForever+0x16>)
	cmp	r2, r3
 8001eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001eb0:	d3f9      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eb2:	f007 f98d 	bl	80091d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7fe ffe9 	bl	8000e8c <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001ebc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001ec0:	080092d0 	.word	0x080092d0
	ldr	r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ec8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001ecc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ed0:	200008e4 	.word	0x200008e4

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>

08001ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ee0:	2004      	movs	r0, #4
 8001ee2:	f001 f8c7 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001ee6:	f7ff fb81 	bl	80015ec <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f80e 	bl	8001f0c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efc:	f7ff fb16 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_InitTick+0x6c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_InitTick+0x70>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_InitTick+0x6c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 f8c1 	bl	80030be <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d809      	bhi.n	8001f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f001 f89b 	bl	800308a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_InitTick+0x74>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e004      	b.n	8001f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e001      	b.n	8001f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	200008cc 	.word	0x200008cc

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200008cc 	.word	0x200008cc

08001fc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3360      	adds	r3, #96	; 0x60
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <LL_ADC_SetOffset+0x44>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	4313      	orrs	r3, r2
 800205c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	03fff000 	.word	0x03fff000

08002074 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3360      	adds	r3, #96	; 0x60
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3360      	adds	r3, #96	; 0x60
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	615a      	str	r2, [r3, #20]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3330      	adds	r3, #48	; 0x30
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	211f      	movs	r1, #31
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 011f 	and.w	r1, r3, #31
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0d1b      	lsrs	r3, r3, #20
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0318 	and.w	r3, r3, #24
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	400b      	ands	r3, r1
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	0007ffff 	.word	0x0007ffff

080021f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d101      	bne.n	8002232 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_IsEnabled+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_IsEnabled+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d101      	bne.n	80022ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e134      	b.n	8002588 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe f987 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff67 	bl	8002218 <LL_ADC_IsDeepPowerDownEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff4d 	bl	80021f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff82 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d115      	bne.n	8002396 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff66 	bl	8002240 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_ADC_Init+0x28c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	4a86      	ldr	r2, [pc, #536]	; (8002594 <HAL_ADC_Init+0x290>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002388:	e002      	b.n	8002390 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3b01      	subs	r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f9      	bne.n	800238a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff64 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff75 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 80023cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 80cd 	bne.w	8002576 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 80c9 	bne.w	8002576 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023ec:	f043 0202 	orr.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff49 	bl	8002290 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d110      	bne.n	8002426 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002404:	4864      	ldr	r0, [pc, #400]	; (8002598 <HAL_ADC_Init+0x294>)
 8002406:	f7ff ff43 	bl	8002290 <LL_ADC_IsEnabled>
 800240a:	4604      	mov	r4, r0
 800240c:	4863      	ldr	r0, [pc, #396]	; (800259c <HAL_ADC_Init+0x298>)
 800240e:	f7ff ff3f 	bl	8002290 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	4323      	orrs	r3, r4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4619      	mov	r1, r3
 8002420:	485f      	ldr	r0, [pc, #380]	; (80025a0 <HAL_ADC_Init+0x29c>)
 8002422:	f7ff fdcf 	bl	8001fc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
 800242a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002430:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002436:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800243c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	3b01      	subs	r3, #1
 800245a:	045b      	lsls	r3, r3, #17
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_ADC_Init+0x2a0>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	430b      	orrs	r3, r1
 8002490:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff0d 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 800249c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff1a 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 80024a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d140      	bne.n	8002532 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d13d      	bne.n	8002532 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e1b      	ldrb	r3, [r3, #24]
 80024be:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c0:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d8:	f023 0306 	bic.w	r3, r3, #6
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	69b9      	ldr	r1, [r7, #24]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d118      	bne.n	8002522 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002512:	430a      	orrs	r2, r1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	e007      	b.n	8002532 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10c      	bne.n	8002554 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f023 010f 	bic.w	r1, r3, #15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
 8002552:	e007      	b.n	8002564 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020f 	bic.w	r2, r2, #15
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f023 0303 	bic.w	r3, r3, #3
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
 8002574:	e007      	b.n	8002586 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002586:	7ffb      	ldrb	r3, [r7, #31]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	20000000 	.word	0x20000000
 8002594:	053e2d63 	.word	0x053e2d63
 8002598:	42028000 	.word	0x42028000
 800259c:	42028100 	.word	0x42028100
 80025a0:	42028300 	.word	0x42028300
 80025a4:	fff0c007 	.word	0xfff0c007

080025a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b0b7      	sub	sp, #220	; 0xdc
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x22>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e3c1      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x7a6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fe6d 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 83a6 	bne.w	8002d30 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f7ff fd83 	bl	80020fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe5b 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 8002600:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe67 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 800260e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 81c1 	bne.w	800299e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 81bc 	bne.w	800299e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800262e:	d10f      	bne.n	8002650 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	4619      	mov	r1, r3
 800263c:	f7ff fd8a 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd44 	bl	80020d6 <LL_ADC_SetSamplingTimeCommonConfig>
 800264e:	e00e      	b.n	800266e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	461a      	mov	r2, r3
 800265e:	f7ff fd79 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fd34 	bl	80020d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d00a      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a0:	f7ff fcc4 	bl	800202c <LL_ADC_SetOffset>
 80026a4:	e17b      	b.n	800299e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fce1 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x12a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fcd6 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x168>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fccb 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e004      	b.n	800270e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x180>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	e018      	b.n	800275a <HAL_ADC_ConfigChannel+0x1b2>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800273c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275a:	429a      	cmp	r2, r3
 800275c:	d106      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fc9a 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fc7e 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1f0>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fc73 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	e01e      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x22e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc68 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80027ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x246>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	e018      	b.n	8002820 <HAL_ADC_ConfigChannel+0x278>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800280a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc37 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2102      	movs	r1, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fc1b 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x2b6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fc10 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e01e      	b.n	800289c <HAL_ADC_ConfigChannel+0x2f4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2102      	movs	r1, #2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fc05 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800287c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x30c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	e016      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x33a>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e004      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80028d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fbd6 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2103      	movs	r1, #3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fbba 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x378>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2103      	movs	r1, #3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fbaf 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	e017      	b.n	8002950 <HAL_ADC_ConfigChannel+0x3a8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2103      	movs	r1, #3
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fba4 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800293a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800293c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x3c0>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	e011      	b.n	800298c <HAL_ADC_ConfigChannel+0x3e4>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	2103      	movs	r1, #3
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fb81 	bl	80020a0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fc74 	bl	8002290 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 81c9 	bne.w	8002d42 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff fbf5 	bl	80021ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a8f      	ldr	r2, [pc, #572]	; (8002c04 <HAL_ADC_ConfigChannel+0x65c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 8131 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x44e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	bf94      	ite	ls
 80029ee:	2301      	movls	r3, #1
 80029f0:	2300      	movhi	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e019      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x482>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e003      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d079      	beq.n	8002b22 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x4a2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	3301      	adds	r3, #1
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a48:	e015      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4ce>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e003      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	069b      	lsls	r3, r3, #26
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x4ee>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	e017      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x51e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x544>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 021f 	and.w	r2, r3, #31
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	e018      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x576>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f003 021f 	and.w	r2, r3, #31
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	e081      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x596>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3c:	e015      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5c2>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x5e2>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x612>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61fb      	str	r3, [r7, #28]
  return result;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x63e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	051b      	lsls	r3, r3, #20
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be4:	e01e      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x67c>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	613b      	str	r3, [r7, #16]
  return result;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e006      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x668>
 8002c02:	bf00      	nop
 8002c04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b1e      	subs	r3, #30
 8002c1e:	051b      	lsls	r3, r3, #20
 8002c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	430b      	orrs	r3, r1
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7ff fa92 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b48      	ldr	r3, [pc, #288]	; (8002d58 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8082 	beq.w	8002d42 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3e:	4847      	ldr	r0, [pc, #284]	; (8002d5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c40:	f7ff f9e6 	bl	8002010 <LL_ADC_GetCommonPathInternalCh>
 8002c44:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c48:	4845      	ldr	r0, [pc, #276]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c4a:	f7ff fb21 	bl	8002290 <LL_ADC_IsEnabled>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4844      	ldr	r0, [pc, #272]	; (8002d64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c52:	f7ff fb1d 	bl	8002290 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4323      	orrs	r3, r4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15e      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d127      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d121      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d161      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c86:	4619      	mov	r1, r3
 8002c88:	4834      	ldr	r0, [pc, #208]	; (8002d5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c8a:	f7ff f9ae 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	4a36      	ldr	r2, [pc, #216]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb6:	e044      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2d      	ldr	r2, [pc, #180]	; (8002d74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x742>
 8002cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d134      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	481e      	ldr	r0, [pc, #120]	; (8002d5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002ce4:	f7ff f981 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce8:	e02b      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d126      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
 8002cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d120      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11b      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d12:	4619      	mov	r1, r3
 8002d14:	4811      	ldr	r0, [pc, #68]	; (8002d5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002d16:	f7ff f968 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
 8002d1a:	e012      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d2e:	e008      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	37dc      	adds	r7, #220	; 0xdc
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	bf00      	nop
 8002d58:	80080000 	.word	0x80080000
 8002d5c:	42028300 	.word	0x42028300
 8002d60:	42028000 	.word	0x42028000
 8002d64:	42028100 	.word	0x42028100
 8002d68:	c7520000 	.word	0xc7520000
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	cb840000 	.word	0xcb840000
 8002d78:	80000001 	.word	0x80000001

08002d7c <LL_ADC_IsEnabled>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_IsEnabled+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_IsEnabled+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d101      	bne.n	8002dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b0a1      	sub	sp, #132	; 0x84
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e089      	b.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002dee:	2300      	movs	r3, #0
 8002df0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002df2:	2300      	movs	r3, #0
 8002df4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e001      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e068      	b.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffb9 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ffb3 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d14a      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d147      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e4a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d027      	beq.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e66:	035b      	lsls	r3, r3, #13
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e70:	4824      	ldr	r0, [pc, #144]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e72:	f7ff ff83 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e76:	4604      	mov	r4, r0
 8002e78:	4823      	ldr	r0, [pc, #140]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e7a:	f7ff ff7f 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4323      	orrs	r3, r4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d132      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e8e:	f023 030f 	bic.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	6811      	ldr	r1, [r2, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea2:	e023      	b.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb0:	4814      	ldr	r0, [pc, #80]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002eb2:	f7ff ff63 	bl	8002d7c <LL_ADC_IsEnabled>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	4813      	ldr	r0, [pc, #76]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eba:	f7ff ff5f 	bl	8002d7c <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4323      	orrs	r3, r4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d112      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ece:	f023 030f 	bic.w	r3, r3, #15
 8002ed2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ed4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed6:	e009      	b.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002eea:	e000      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ef6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3784      	adds	r7, #132	; 0x84
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd90      	pop	{r4, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	42028000 	.word	0x42028000
 8002f08:	42028100 	.word	0x42028100
 8002f0c:	42028300 	.word	0x42028300

08002f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	db0a      	blt.n	8002f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <__NVIC_SetPriority+0x4c>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	0152      	lsls	r2, r2, #5
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	440b      	add	r3, r1
 8002f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f9c:	e00a      	b.n	8002fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <__NVIC_SetPriority+0x50>)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3b04      	subs	r3, #4
 8002fac:	0152      	lsls	r2, r2, #5
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	761a      	strb	r2, [r3, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	bf28      	it	cs
 8002fe6:	2303      	movcs	r3, #3
 8002fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3303      	adds	r3, #3
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d902      	bls.n	8002ff8 <NVIC_EncodePriority+0x30>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3b04      	subs	r3, #4
 8002ff6:	e000      	b.n	8002ffa <NVIC_EncodePriority+0x32>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	401a      	ands	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003010:	f04f 31ff 	mov.w	r1, #4294967295
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43d9      	mvns	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	4313      	orrs	r3, r2
         );
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003040:	d301      	bcc.n	8003046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <SysTick_Config+0x40>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304e:	2107      	movs	r1, #7
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f7ff ff8e 	bl	8002f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x40>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff47 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff5e 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff90 	bl	8002fc8 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5f 	bl	8002f74 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffb2 	bl	8003030 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0ac      	b.n	8003244 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f8b2 	bl	8003258 <DFSDM_GetChannelFromInstance>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_DFSDM_ChannelInit+0x174>)
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e09f      	b.n	8003244 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd fb7b 	bl	8000800 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 8003112:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_DFSDM_ChannelInit+0x178>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d125      	bne.n	8003168 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003126:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4948      	ldr	r1, [pc, #288]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800313c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003140:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	493f      	ldr	r1, [pc, #252]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800315c:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_DFSDM_ChannelInit+0x17c>)
 8003162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003166:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003176:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003186:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800318c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020f 	bic.w	r2, r2, #15
 80031a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80031cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 0207 	and.w	r2, r2, #7
 80031f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003224:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f810 	bl	8003258 <DFSDM_GetChannelFromInstance>
 8003238:	4602      	mov	r2, r0
 800323a:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_DFSDM_ChannelInit+0x174>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200008d4 	.word	0x200008d4
 8003250:	200008d0 	.word	0x200008d0
 8003254:	40016000 	.word	0x40016000

08003258 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <DFSDM_GetChannelFromInstance+0x44>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d102      	bne.n	800326e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e00f      	b.n	800328e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <DFSDM_GetChannelFromInstance+0x48>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d102      	bne.n	800327c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e008      	b.n	800328e <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <DFSDM_GetChannelFromInstance+0x4c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d102      	bne.n	800328a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003284:	2302      	movs	r3, #2
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e001      	b.n	800328e <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800328a:	2303      	movs	r3, #3
 800328c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40016000 	.word	0x40016000
 80032a0:	40016020 	.word	0x40016020
 80032a4:	40016040 	.word	0x40016040

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032b6:	e158      	b.n	800356a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 814a 	beq.w	8003564 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d00b      	beq.n	80032f0 <HAL_GPIO_Init+0x48>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d007      	beq.n	80032f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003326:	2201      	movs	r2, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0201 	and.w	r2, r3, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0xea>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b12      	cmp	r3, #18
 8003390:	d123      	bne.n	80033da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80a4 	beq.w	8003564 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800341c:	4a5a      	ldr	r2, [pc, #360]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3318      	adds	r3, #24
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_GPIO_Init+0x2e4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d025      	beq.n	8003494 <HAL_GPIO_Init+0x1ec>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a51      	ldr	r2, [pc, #324]	; (8003590 <HAL_GPIO_Init+0x2e8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01f      	beq.n	8003490 <HAL_GPIO_Init+0x1e8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a50      	ldr	r2, [pc, #320]	; (8003594 <HAL_GPIO_Init+0x2ec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d019      	beq.n	800348c <HAL_GPIO_Init+0x1e4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4f      	ldr	r2, [pc, #316]	; (8003598 <HAL_GPIO_Init+0x2f0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_GPIO_Init+0x1e0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a4e      	ldr	r2, [pc, #312]	; (800359c <HAL_GPIO_Init+0x2f4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00d      	beq.n	8003484 <HAL_GPIO_Init+0x1dc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <HAL_GPIO_Init+0x2f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <HAL_GPIO_Init+0x1d8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4c      	ldr	r2, [pc, #304]	; (80035a4 <HAL_GPIO_Init+0x2fc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_GPIO_Init+0x1d4>
 8003478:	2306      	movs	r3, #6
 800347a:	e00c      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 800347c:	2307      	movs	r3, #7
 800347e:	e00a      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 8003480:	2305      	movs	r3, #5
 8003482:	e008      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 8003484:	2304      	movs	r3, #4
 8003486:	e006      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 8003488:	2303      	movs	r3, #3
 800348a:	e004      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 800348c:	2302      	movs	r3, #2
 800348e:	e002      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_GPIO_Init+0x1ee>
 8003494:	2300      	movs	r3, #0
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	f002 0203 	and.w	r2, r2, #3
 800349c:	00d2      	lsls	r2, r2, #3
 800349e:	4093      	lsls	r3, r2
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80034a6:	4938      	ldr	r1, [pc, #224]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3318      	adds	r3, #24
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034b4:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 80034e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_GPIO_Init+0x2e0>)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f ae9f 	bne.w	80032b8 <HAL_GPIO_Init+0x10>
  }
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	4002f400 	.word	0x4002f400
 800358c:	42020000 	.word	0x42020000
 8003590:	42020400 	.word	0x42020400
 8003594:	42020800 	.word	0x42020800
 8003598:	42020c00 	.word	0x42020c00
 800359c:	42021000 	.word	0x42021000
 80035a0:	42021400 	.word	0x42021400
 80035a4:	42021800 	.word	0x42021800

080035a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
 80035b4:	4613      	mov	r3, r2
 80035b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035b8:	787b      	ldrb	r3, [r7, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035c4:	e002      	b.n	80035cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e081      	b.n	80036ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fbe6 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e006      	b.n	8003660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800365e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d104      	bne.n	8003672 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003684:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003694:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	ea42 0103 	orr.w	r1, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69d9      	ldr	r1, [r3, #28]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d138      	bne.n	800377e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003716:	2302      	movs	r3, #2
 8003718:	e032      	b.n	8003780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2224      	movs	r2, #36	; 0x24
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003748:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d139      	bne.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e033      	b.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7fe fbbc 	bl	8001fac <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e0a2      	b.n	8003988 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 809b 	bne.w	8003988 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fc2a 	bl	80010ac <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003858:	f241 3188 	movw	r1, #5000	; 0x1388
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f89b 	bl	8003998 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <HAL_OSPI_Init+0x170>)
 800386a:	4013      	ands	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68d1      	ldr	r1, [r2, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	3a01      	subs	r2, #1
 8003876:	0412      	lsls	r2, r2, #16
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6952      	ldr	r2, [r2, #20]
 800387e:	3a01      	subs	r2, #1
 8003880:	0212      	lsls	r2, r2, #8
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	69d2      	ldr	r2, [r2, #28]
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	430b      	orrs	r3, r1
 8003896:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1a      	ldr	r2, [r3, #32]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0412      	lsls	r2, r2, #16
 80038b8:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c2:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2120      	movs	r1, #32
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f863 	bl	80039b6 <OSPI_WaitFlagStateUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d146      	bne.n	8003988 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003930:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d107      	bne.n	8003970 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0202 	orr.w	r2, r2, #2
 800396e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003978:	d103      	bne.n	8003982 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003980:	e002      	b.n	8003988 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	f8e0f8f4 	.word	0xf8e0f8f4

08003998 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039c6:	e01a      	b.n	80039fe <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d016      	beq.n	80039fe <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe faec 	bl	8001fac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d1d6      	bne.n	80039c8 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af06      	add	r7, sp, #24
 8003a2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0d7      	b.n	8003be6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f9b8 	bl	8001dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f005 fb7b 	bl	8009158 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e04c      	b.n	8003b02 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	3301      	adds	r3, #1
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	b298      	uxth	r0, r3
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3336      	adds	r3, #54	; 0x36
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	3303      	adds	r3, #3
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	3338      	adds	r3, #56	; 0x38
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	333c      	adds	r3, #60	; 0x3c
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	3340      	adds	r3, #64	; 0x40
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	3301      	adds	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3ad      	bcc.n	8003a68 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e044      	b.n	8003b9c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b5      	bcc.n	8003b12 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	687e      	ldr	r6, [r7, #4]
 8003bae:	466d      	mov	r5, sp
 8003bb0:	f106 0410 	add.w	r4, r6, #16
 8003bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	1d33      	adds	r3, r6, #4
 8003bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc0:	6838      	ldr	r0, [r7, #0]
 8003bc2:	f005 fae4 	bl	800918e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f805 	bl	8003bee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40007000 	.word	0x40007000

08003c64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40007000 	.word	0x40007000

08003c80 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c90:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003c92:	f000 f861 	bl	8003d58 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e03e      	b.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cae:	d101      	bne.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e035      	b.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d101      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e02f      	b.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003cc8:	4917      	ldr	r1, [pc, #92]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	09db      	lsrs	r3, r3, #7
 8003cde:	2232      	movs	r2, #50	; 0x32
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	08db      	lsrs	r3, r3, #3
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf0:	e002      	b.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d102      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f2      	bne.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d101      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e000      	b.n	8003d20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d34:	cccccccd 	.word	0xcccccccd

08003d38 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d46:	6053      	str	r3, [r2, #4]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000

08003d58 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	e00a      	b.n	8003d8c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e001      	b.n	8003d8c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40007000 	.word	0x40007000

08003da0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f000 bcd0 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db4:	4b99      	ldr	r3, [pc, #612]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbe:	4b97      	ldr	r3, [pc, #604]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80e9 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <HAL_RCC_OscConfig+0x4a>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	f040 8083 	bne.w	8003eea <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d17f      	bne.n	8003eea <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dea:	4b8c      	ldr	r3, [pc, #560]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <HAL_RCC_OscConfig+0x64>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f000 bca8 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e08:	4b84      	ldr	r3, [pc, #528]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCC_OscConfig+0x7e>
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	e005      	b.n	8003e2a <HAL_RCC_OscConfig+0x8a>
 8003e1e:	4b7f      	ldr	r3, [pc, #508]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d224      	bcs.n	8003e78 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fe98 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f000 bc88 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e44:	4b75      	ldr	r3, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a74      	ldr	r2, [pc, #464]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	496f      	ldr	r1, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	4b6e      	ldr	r3, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	496a      	ldr	r1, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e026      	b.n	8003ec6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a67      	ldr	r2, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	4962      	ldr	r1, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	495d      	ldr	r1, [pc, #372]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fe57 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f000 bc47 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ec6:	f000 fe13 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <HAL_RCC_OscConfig+0x280>)
 8003ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ed0:	4b54      	ldr	r3, [pc, #336]	; (8004024 <HAL_RCC_OscConfig+0x284>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe f819 	bl	8001f0c <HAL_InitTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d060      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	f000 bc35 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d039      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a49      	ldr	r2, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efe:	f7fe f855 	bl	8001fac <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f04:	e00f      	b.n	8003f26 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f06:	f7fe f851 	bl	8001fac <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d908      	bls.n	8003f26 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f14:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f000 bc17 	b.w	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f26:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0e9      	beq.n	8003f06 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	4934      	ldr	r1, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	492f      	ldr	r1, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
 8003f64:	e020      	b.n	8003fa8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f66:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f72:	f7fe f81b 	bl	8001fac <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f78:	e00e      	b.n	8003f98 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7a:	f7fe f817 	bl	8001fac <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d907      	bls.n	8003f98 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e3dd      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ea      	bne.n	8003f7a <HAL_RCC_OscConfig+0x1da>
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d07e      	beq.n	80040b2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x226>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d10e      	bne.n	8003fde <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d06e      	beq.n	80040b0 <HAL_RCC_OscConfig+0x310>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d16a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e3ba      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x256>
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0b      	ldr	r2, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e024      	b.n	8004040 <HAL_RCC_OscConfig+0x2a0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffe:	d113      	bne.n	8004028 <HAL_RCC_OscConfig+0x288>
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a05      	ldr	r2, [pc, #20]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8004006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCC_OscConfig+0x27c>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e012      	b.n	8004040 <HAL_RCC_OscConfig+0x2a0>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004
 8004028:	4b8b      	ldr	r3, [pc, #556]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8a      	ldr	r2, [pc, #552]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a87      	ldr	r2, [pc, #540]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800403a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d019      	beq.n	800407c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd ffb0 	bl	8001fac <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	e00e      	b.n	800406e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004050:	f7fd ffac 	bl	8001fac <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d907      	bls.n	800406e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405e:	4b7e      	ldr	r3, [pc, #504]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e372      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406e:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ea      	beq.n	8004050 <HAL_RCC_OscConfig+0x2b0>
 800407a:	e01a      	b.n	80040b2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd ff96 	bl	8001fac <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004082:	e00e      	b.n	80040a2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fd ff92 	bl	8001fac <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d907      	bls.n	80040a2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004092:	4b71      	ldr	r3, [pc, #452]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e358      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ea      	bne.n	8004084 <HAL_RCC_OscConfig+0x2e4>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06c      	beq.n	8004198 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x330>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d116      	bne.n	80040fe <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x348>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e335      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	4958      	ldr	r1, [pc, #352]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fc:	e04c      	b.n	8004198 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d029      	beq.n	800415a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a53      	ldr	r2, [pc, #332]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd ff4b 	bl	8001fac <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	e00e      	b.n	8004138 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411a:	f7fd ff47 	bl	8001fac <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d907      	bls.n	8004138 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e30d      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ea      	beq.n	800411a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b44      	ldr	r3, [pc, #272]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4941      	ldr	r1, [pc, #260]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	e01e      	b.n	8004198 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd ff21 	bl	8001fac <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416c:	e00e      	b.n	800418c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416e:	f7fd ff1d 	bl	8001fac <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d907      	bls.n	800418c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e2e3      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ea      	bne.n	800416e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d062      	beq.n	800426a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d038      	beq.n	800421e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041c4:	e007      	b.n	80041d6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f043 0310 	orr.w	r3, r3, #16
 80041d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fd fee1 	bl	8001fac <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ec:	e00f      	b.n	800420e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fd fedd 	bl	8001fac <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b07      	cmp	r3, #7
 80041fa:	d908      	bls.n	800420e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e2a2      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0e8      	beq.n	80041ee <HAL_RCC_OscConfig+0x44e>
 800421c:	e025      	b.n	800426a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004224:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fd febd 	bl	8001fac <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004234:	e012      	b.n	800425c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fd feb9 	bl	8001fac <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b07      	cmp	r3, #7
 8004242:	d90b      	bls.n	800425c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e27e      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425c:	4ba8      	ldr	r3, [pc, #672]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 812d 	beq.w	80044d2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800427c:	4ba0      	ldr	r3, [pc, #640]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b9d      	ldr	r3, [pc, #628]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4a9c      	ldr	r2, [pc, #624]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
 8004294:	4b9a      	ldr	r3, [pc, #616]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a4:	4b97      	ldr	r3, [pc, #604]	; (8004504 <HAL_RCC_OscConfig+0x764>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11e      	bne.n	80042ee <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b94      	ldr	r3, [pc, #592]	; (8004504 <HAL_RCC_OscConfig+0x764>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a93      	ldr	r2, [pc, #588]	; (8004504 <HAL_RCC_OscConfig+0x764>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042bc:	f7fd fe76 	bl	8001fac <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	e00e      	b.n	80042e2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fd fe72 	bl	8001fac <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d907      	bls.n	80042e2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	4b8c      	ldr	r3, [pc, #560]	; (8004504 <HAL_RCC_OscConfig+0x764>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e238      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x764>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ea      	beq.n	80042c4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01f      	beq.n	800433a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004306:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	4a7c      	ldr	r2, [pc, #496]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004316:	4b7a      	ldr	r3, [pc, #488]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	4a78      	ldr	r2, [pc, #480]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004326:	e018      	b.n	800435a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004328:	4b75      	ldr	r3, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a74      	ldr	r2, [pc, #464]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004338:	e00f      	b.n	800435a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800433a:	4b71      	ldr	r3, [pc, #452]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	4a6f      	ldr	r2, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d068      	beq.n	8004434 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fe23 	bl	8001fac <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004368:	e011      	b.n	800438e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd fe1f 	bl	8001fac <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d908      	bls.n	800438e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	4b60      	ldr	r3, [pc, #384]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1e2      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0e6      	beq.n	800436a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d022      	beq.n	80043ee <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043a8:	4b55      	ldr	r3, [pc, #340]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a54      	ldr	r2, [pc, #336]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043b8:	e011      	b.n	80043de <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fd fdf7 	bl	8001fac <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d908      	bls.n	80043de <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043cc:	4b4c      	ldr	r3, [pc, #304]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1ba      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043de:	4b48      	ldr	r3, [pc, #288]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0e6      	beq.n	80043ba <HAL_RCC_OscConfig+0x61a>
 80043ec:	e068      	b.n	80044c0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	4a42      	ldr	r2, [pc, #264]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80043f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043fe:	e011      	b.n	8004424 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fd fdd4 	bl	8001fac <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d908      	bls.n	8004424 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e197      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <HAL_RCC_OscConfig+0x660>
 8004432:	e045      	b.n	80044c0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fd fdba 	bl	8001fac <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800443a:	e011      	b.n	8004460 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fdb6 	bl	8001fac <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d908      	bls.n	8004460 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800444e:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e179      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e6      	bne.n	800443c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d021      	beq.n	80044c0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 8004484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800448c:	e011      	b.n	80044b2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd fd8d 	bl	8001fac <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d908      	bls.n	80044b2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e150      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d105      	bne.n	80044d2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d04f      	beq.n	800457e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <HAL_RCC_OscConfig+0x760>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd fd59 	bl	8001fac <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044fc:	e014      	b.n	8004528 <HAL_RCC_OscConfig+0x788>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004508:	f7fd fd50 	bl	8001fac <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d908      	bls.n	8004528 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004516:	4b91      	ldr	r3, [pc, #580]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e115      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004528:	4b8c      	ldr	r3, [pc, #560]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800452a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0e8      	beq.n	8004508 <HAL_RCC_OscConfig+0x768>
 8004536:	e022      	b.n	800457e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004538:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800453a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800453e:	4a87      	ldr	r2, [pc, #540]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fd30 	bl	8001fac <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800454e:	e00f      	b.n	8004570 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004550:	f7fd fd2c 	bl	8001fac <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d908      	bls.n	8004570 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800455e:	4b7f      	ldr	r3, [pc, #508]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0f1      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004570:	4b7a      	ldr	r3, [pc, #488]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e8      	bne.n	8004550 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80e5 	beq.w	8004752 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	4b74      	ldr	r3, [pc, #464]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b0c      	cmp	r3, #12
 8004592:	f000 809f 	beq.w	80046d4 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	2b02      	cmp	r3, #2
 800459c:	d166      	bne.n	800466c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80045a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd fcff 	bl	8001fac <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b0:	e00e      	b.n	80045d0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd fcfb 	bl	8001fac <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d907      	bls.n	80045d0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0c1      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	4b62      	ldr	r3, [pc, #392]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ea      	bne.n	80045b2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_OscConfig+0x9c0>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f6:	0212      	lsls	r2, r2, #8
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0552      	lsls	r2, r2, #21
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004616:	06d2      	lsls	r2, r2, #27
 8004618:	430a      	orrs	r2, r1
 800461a:	4950      	ldr	r1, [pc, #320]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004620:	4b4e      	ldr	r3, [pc, #312]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a4d      	ldr	r2, [pc, #308]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a4a      	ldr	r2, [pc, #296]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004636:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fcb8 	bl	8001fac <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	e00e      	b.n	800465e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd fcb4 	bl	8001fac <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d907      	bls.n	800465e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	4b43      	ldr	r3, [pc, #268]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e07a      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	4b3f      	ldr	r3, [pc, #252]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ea      	beq.n	8004640 <HAL_RCC_OscConfig+0x8a0>
 800466a:	e072      	b.n	8004752 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3a      	ldr	r2, [pc, #232]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004678:	4b38      	ldr	r3, [pc, #224]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a34      	ldr	r2, [pc, #208]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a31      	ldr	r2, [pc, #196]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 8004696:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd fc84 	bl	8001fac <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a6:	e00e      	b.n	80046c6 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fd fc80 	bl	8001fac <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d907      	bls.n	80046c6 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e046      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c6:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ea      	bne.n	80046a8 <HAL_RCC_OscConfig+0x908>
 80046d2:	e03e      	b.n	8004752 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e039      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x9bc>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d12c      	bne.n	800474e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d123      	bne.n	800474e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11b      	bne.n	800474e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d113      	bne.n	800474e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d109      	bne.n	800474e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	019f800c 	.word	0x019f800c

08004764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e10d      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 020f 	bic.w	r2, r3, #15
 8004792:	4983      	ldr	r1, [pc, #524]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0f5      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8094 	beq.w	80048e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d134      	bne.n	800482c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	4b78      	ldr	r3, [pc, #480]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0e2      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047d2:	f000 fa2d 	bl	8004c30 <RCC_GetSysClockFreqFromPLLSource>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4a73      	ldr	r2, [pc, #460]	; (80049a8 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d956      	bls.n	800488e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047e0:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ec:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f4:	4a6b      	ldr	r2, [pc, #428]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80047f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e045      	b.n	800488e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03f      	beq.n	800488e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d13b      	bne.n	800488e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004816:	4b63      	ldr	r3, [pc, #396]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481e:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e030      	b.n	800488e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d107      	bne.n	8004844 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004834:	4b5b      	ldr	r3, [pc, #364]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d115      	bne.n	800486c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0a9      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800484c:	4b55      	ldr	r3, [pc, #340]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e09d      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e095      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800486c:	f000 f8a2 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004870:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <HAL_RCC_ClockConfig+0x244>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d909      	bls.n	800488e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004882:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004888:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4942      	ldr	r1, [pc, #264]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fd fb84 	bl	8001fac <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e013      	b.n	80048d0 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd fb80 	bl	8001fac <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d90a      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e063      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 020c 	and.w	r2, r3, #12
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	429a      	cmp	r2, r3
 80048e0:	d1e2      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	492a      	ldr	r1, [pc, #168]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]
 8004900:	e008      	b.n	8004914 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d105      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004908:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800490e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004912:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	491d      	ldr	r1, [pc, #116]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_ClockConfig+0x23c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e029      	b.n	8004998 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4911      	ldr	r1, [pc, #68]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4909      	ldr	r1, [pc, #36]	; (80049a4 <HAL_RCC_ClockConfig+0x240>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004982:	f000 f8b5 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004986:	4603      	mov	r3, r0
 8004988:	4a08      	ldr	r2, [pc, #32]	; (80049ac <HAL_RCC_ClockConfig+0x248>)
 800498a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_RCC_ClockConfig+0x24c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd fabb 	bl	8001f0c <HAL_InitTick>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	04c4b400 	.word	0x04c4b400
 80049ac:	20000000 	.word	0x20000000
 80049b0:	20000004 	.word	0x20000004

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c2:	4b47      	ldr	r3, [pc, #284]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049cc:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x34>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d121      	bne.n	8004a26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d11e      	bne.n	8004a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049e8:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049f4:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a10:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d102      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	e004      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 8004a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d146      	bne.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d003      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0xb4>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d00d      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0xce>
 8004a66:	e019      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	0a12      	lsrs	r2, r2, #8
 8004a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
        break;
 8004a80:	e019      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	0a12      	lsrs	r2, r2, #8
 8004a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
        break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004aa6:	68d2      	ldr	r2, [r2, #12]
 8004aa8:	0a12      	lsrs	r2, r2, #8
 8004aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	617b      	str	r3, [r7, #20]
        break;
 8004ab4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	0e5b      	lsrs	r3, r3, #25
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	08009258 	.word	0x08009258
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	007a1200 	.word	0x007a1200

08004af0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004af4:	f7ff ff5e 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08009240 	.word	0x08009240

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff ffe8 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	08009250 	.word	0x08009250

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffd4 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0adb      	lsrs	r3, r3, #11
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08009250 	.word	0x08009250

08004b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b80:	f7ff f870 	bl	8003c64 <HAL_PWREx_GetVoltageRange>
 8004b84:	6138      	str	r0, [r7, #16]
 8004b86:	e014      	b.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7ff f860 	bl	8003c64 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bbe:	d10b      	bne.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d919      	bls.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2ba0      	cmp	r3, #160	; 0xa0
 8004bca:	d902      	bls.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bcc:	2302      	movs	r3, #2
 8004bce:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004bd0:	e013      	b.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004bd6:	e010      	b.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d902      	bls.n	8004be4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bde:	2303      	movs	r3, #3
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e00a      	b.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d102      	bne.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bea:	2302      	movs	r3, #2
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e004      	b.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b70      	cmp	r3, #112	; 0x70
 8004bf4:	d101      	bne.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 020f 	bic.w	r2, r3, #15
 8004c02:	490a      	ldr	r1, [pc, #40]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d118      	bne.n	8004c78 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c46:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d107      	bne.n	8004c62 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c52:	4b30      	ldr	r3, [pc, #192]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e005      	b.n	8004c6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c62:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004c6e:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c78:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c82:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d003      	beq.n	8004c9e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d00d      	beq.n	8004cb8 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004c9c:	e019      	b.n	8004cd2 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	0a12      	lsrs	r2, r2, #8
 8004cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	613b      	str	r3, [r7, #16]
      break;
 8004cb6:	e019      	b.n	8004cec <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004cc2:	68d2      	ldr	r2, [r2, #12]
 8004cc4:	0a12      	lsrs	r2, r2, #8
 8004cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	613b      	str	r3, [r7, #16]
      break;
 8004cd0:	e00c      	b.n	8004cec <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	0a12      	lsrs	r2, r2, #8
 8004ce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	613b      	str	r3, [r7, #16]
      break;
 8004cea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0e5b      	lsrs	r3, r3, #25
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d06:	683b      	ldr	r3, [r7, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08009258 	.word	0x08009258
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d040      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d02a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d825      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d026      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d50:	2b60      	cmp	r3, #96	; 0x60
 8004d52:	d821      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d006      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d81d      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d010      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d64:	e018      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d66:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a8e      	ldr	r2, [pc, #568]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d72:	e015      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fb08 	bl	8006390 <RCCEx_PLLSAI1_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d84:	e00c      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3320      	adds	r3, #32
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fbe5 	bl	800655c <RCCEx_PLLSAI2_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77fb      	strb	r3, [r7, #31]
        break;
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da6:	4b7f      	ldr	r3, [pc, #508]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db4:	497b      	ldr	r1, [pc, #492]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004dbc:	e001      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbe:	7ffb      	ldrb	r3, [r7, #31]
 8004dc0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d047      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d030      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ddc:	d82a      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d02a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de8:	d824      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d008      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d81e      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e00:	e018      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e02:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a67      	ldr	r2, [pc, #412]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e0e:	e015      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 faba 	bl	8006390 <RCCEx_PLLSAI1_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e20:	e00c      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3320      	adds	r3, #32
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fb97 	bl	800655c <RCCEx_PLLSAI2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	77fb      	strb	r3, [r7, #31]
        break;
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3c:	7ffb      	ldrb	r3, [r7, #31]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e42:	4b58      	ldr	r3, [pc, #352]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	4954      	ldr	r1, [pc, #336]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7ffb      	ldrb	r3, [r7, #31]
 8004e5c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80ab 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a48      	ldr	r2, [pc, #288]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
 8004e88:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e98:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a42      	ldr	r2, [pc, #264]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea4:	f7fd f882 	bl	8001fac <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fd f87e 	bl	8001fac <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d908      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0e9      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004eda:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d164      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ee2:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eec:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d019      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	4a24      	ldr	r2, [pc, #144]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01f      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fd f835 	bl	8001fac <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f44:	e012      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fd f831 	bl	8001fac <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d909      	bls.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004f6a:	e007      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0e5      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004f7a:	e000      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004f7c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	77bb      	strb	r3, [r7, #30]
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7ffb      	ldrb	r3, [r7, #31]
 8004fae:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b9c      	ldr	r3, [pc, #624]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	4a9b      	ldr	r2, [pc, #620]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fce:	4b96      	ldr	r3, [pc, #600]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 0203 	bic.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	4992      	ldr	r1, [pc, #584]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff0:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	498a      	ldr	r1, [pc, #552]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005012:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	4981      	ldr	r1, [pc, #516]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005034:	4b7c      	ldr	r3, [pc, #496]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	4979      	ldr	r1, [pc, #484]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005056:	4b74      	ldr	r3, [pc, #464]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	4970      	ldr	r1, [pc, #448]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005078:	4b6b      	ldr	r3, [pc, #428]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005086:	4968      	ldr	r1, [pc, #416]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800509a:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a8:	495f      	ldr	r1, [pc, #380]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050bc:	4b5a      	ldr	r3, [pc, #360]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	4957      	ldr	r1, [pc, #348]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80050de:	4b52      	ldr	r3, [pc, #328]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	494e      	ldr	r1, [pc, #312]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d031      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005108:	d00e      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800510a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800510e:	d814      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005118:	d10f      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4a42      	ldr	r2, [pc, #264]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005124:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005126:	e00c      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f001 f92e 	bl	8006390 <RCCEx_PLLSAI1_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005138:	e003      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77fb      	strb	r3, [r7, #31]
        break;
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005148:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005156:	4934      	ldr	r1, [pc, #208]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800515e:	e001      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	7ffb      	ldrb	r3, [r7, #31]
 8005162:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005170:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	492a      	ldr	r1, [pc, #168]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a0:	4921      	ldr	r1, [pc, #132]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	4919      	ldr	r1, [pc, #100]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051dc:	f023 0203 	bic.w	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	4910      	ldr	r1, [pc, #64]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005216:	d109      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a02      	ldr	r2, [pc, #8]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005222:	60d3      	str	r3, [r2, #12]
 8005224:	e014      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f001 f8a7 	bl	8006390 <RCCEx_PLLSAI1_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d04a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005264:	d108      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005266:	4b70      	ldr	r3, [pc, #448]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526c:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800526e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005272:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005276:	e012      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005278:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005286:	4968      	ldr	r1, [pc, #416]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800528e:	4b66      	ldr	r3, [pc, #408]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005294:	4a64      	ldr	r2, [pc, #400]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 f86e 	bl	8006390 <RCCEx_PLLSAI1_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d019      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	77bb      	strb	r3, [r7, #30]
 80052c2:	e016      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d106      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ce:	4b56      	ldr	r3, [pc, #344]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a55      	ldr	r2, [pc, #340]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d8:	60d3      	str	r3, [r2, #12]
 80052da:	e00a      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e4:	d105      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052e6:	4b50      	ldr	r3, [pc, #320]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a4f      	ldr	r2, [pc, #316]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530c:	4946      	ldr	r1, [pc, #280]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800531c:	d106      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531e:	4b42      	ldr	r3, [pc, #264]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f001 f827 	bl	8006390 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005346:	7ffb      	ldrb	r3, [r7, #31]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800534c:	7ffb      	ldrb	r3, [r7, #31]
 800534e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800535c:	4b32      	ldr	r3, [pc, #200]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536c:	492e      	ldr	r1, [pc, #184]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537e:	d10c      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f802 	bl	8006390 <RCCEx_PLLSAI1_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005390:	7ffb      	ldrb	r3, [r7, #31]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ac:	f023 0204 	bic.w	r2, r3, #4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b6:	491c      	ldr	r1, [pc, #112]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d0:	f023 0218 	bic.w	r2, r3, #24
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	4913      	ldr	r1, [pc, #76]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d017      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053ee:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fe:	490a      	ldr	r1, [pc, #40]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005410:	d105      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4a04      	ldr	r2, [pc, #16]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800541e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000

0800542c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543e:	d13e      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d028      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	f200 8773 	bhi.w	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005464:	d005      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d00e      	beq.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800546e:	f000 bf69 	b.w	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	f040 8763 	bne.w	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	f000 bf5e 	b.w	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800548e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b02      	cmp	r3, #2
 8005498:	f040 8758 	bne.w	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800549c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80054a0:	61fb      	str	r3, [r7, #28]
        break;
 80054a2:	f000 bf53 	b.w	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054a6:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b2:	f040 874d 	bne.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 80054b6:	4b29      	ldr	r3, [pc, #164]	; (800555c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 80054b8:	61fb      	str	r3, [r7, #28]
        break;
 80054ba:	f000 bf49 	b.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d036      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d84b      	bhi.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d003      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d020      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80054e0:	e044      	b.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d116      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80054fa:	4b17      	ldr	r3, [pc, #92]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	e005      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8005514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005518:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800551a:	e02a      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
        break;
 8005520:	e027      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d102      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 8005532:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8005534:	e01d      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
        break;
 800553a:	e01a      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005548:	d102      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 800554c:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800554e:	e010      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
        break;
 8005554:	e00d      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	0003d090 	.word	0x0003d090
 8005560:	08009258 	.word	0x08009258
 8005564:	00f42400 	.word	0x00f42400
 8005568:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
        break;
 8005570:	bf00      	nop
    }

    switch (PeriphClk)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005578:	f000 8659 	beq.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005582:	f200 86e7 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558c:	f000 8605 	beq.w	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005596:	f200 86dd 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	f000 8468 	beq.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055aa:	f200 86d3 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b4:	f000 8530 	beq.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055be:	f200 86c9 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c8:	f000 8180 	beq.w	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055d2:	f200 86bf 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055dc:	f000 80c2 	beq.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e6:	f200 86b5 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	f000 842f 	beq.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	f200 86ab 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005604:	f000 83e7 	beq.w	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560e:	f200 86a1 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005618:	f000 80a4 	beq.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005622:	f200 8697 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	f000 8092 	beq.w	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	f200 868d 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	f000 8080 	beq.w	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	f200 8683 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	f000 8553 	beq.w	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565e:	f200 8679 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005668:	f000 84ff 	beq.w	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005672:	f200 866f 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567c:	f000 84a0 	beq.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	f200 8665 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	f000 846b 	beq.w	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	f200 865d 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b20      	cmp	r3, #32
 800569e:	d84b      	bhi.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 8656 	beq.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	2b1f      	cmp	r3, #31
 80056ae:	f200 8651 	bhi.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	08005ad1 	.word	0x08005ad1
 80056bc:	08005b45 	.word	0x08005b45
 80056c0:	08006355 	.word	0x08006355
 80056c4:	08005bd7 	.word	0x08005bd7
 80056c8:	08006355 	.word	0x08006355
 80056cc:	08006355 	.word	0x08006355
 80056d0:	08006355 	.word	0x08006355
 80056d4:	08005c4f 	.word	0x08005c4f
 80056d8:	08006355 	.word	0x08006355
 80056dc:	08006355 	.word	0x08006355
 80056e0:	08006355 	.word	0x08006355
 80056e4:	08006355 	.word	0x08006355
 80056e8:	08006355 	.word	0x08006355
 80056ec:	08006355 	.word	0x08006355
 80056f0:	08006355 	.word	0x08006355
 80056f4:	08005cd3 	.word	0x08005cd3
 80056f8:	08006355 	.word	0x08006355
 80056fc:	08006355 	.word	0x08006355
 8005700:	08006355 	.word	0x08006355
 8005704:	08006355 	.word	0x08006355
 8005708:	08006355 	.word	0x08006355
 800570c:	08006355 	.word	0x08006355
 8005710:	08006355 	.word	0x08006355
 8005714:	08006355 	.word	0x08006355
 8005718:	08006355 	.word	0x08006355
 800571c:	08006355 	.word	0x08006355
 8005720:	08006355 	.word	0x08006355
 8005724:	08006355 	.word	0x08006355
 8005728:	08006355 	.word	0x08006355
 800572c:	08006355 	.word	0x08006355
 8005730:	08006355 	.word	0x08006355
 8005734:	08005d55 	.word	0x08005d55
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	f000 83e8 	beq.w	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 8005740:	f000 be08 	b.w	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800574a:	f001 f867 	bl	800681c <RCCEx_GetSAIxPeriphCLKFreq>
 800574e:	61f8      	str	r0, [r7, #28]
        break;
 8005750:	f000 be03 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800575a:	f001 f85f 	bl	800681c <RCCEx_GetSAIxPeriphCLKFreq>
 800575e:	61f8      	str	r0, [r7, #28]
        break;
 8005760:	f000 bdfb 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005764:	4b9c      	ldr	r3, [pc, #624]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005776:	d015      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800577e:	f200 8096 	bhi.w	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005788:	d02a      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005790:	f200 808d 	bhi.w	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d07f      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a0:	d04b      	beq.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80057a2:	e084      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80057a4:	4b8c      	ldr	r3, [pc, #560]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	f040 8081 	bne.w	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80057b2:	4b89      	ldr	r3, [pc, #548]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80057be:	4b86      	ldr	r3, [pc, #536]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	e005      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80057ca:	4b83      	ldr	r3, [pc, #524]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	4a81      	ldr	r2, [pc, #516]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80057d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057dc:	61fb      	str	r3, [r7, #28]
            break;
 80057de:	e069      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057e0:	4b7d      	ldr	r3, [pc, #500]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ec:	d165      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057ee:	4b7a      	ldr	r3, [pc, #488]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d15e      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057fc:	4b76      	ldr	r3, [pc, #472]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	3301      	adds	r3, #1
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005810:	4b71      	ldr	r3, [pc, #452]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	fb03 f202 	mul.w	r2, r3, r2
 8005824:	4b6c      	ldr	r3, [pc, #432]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	0d5b      	lsrs	r3, r3, #21
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	3301      	adds	r3, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	61fb      	str	r3, [r7, #28]
            break;
 8005838:	e03f      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800583a:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005846:	d13b      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005848:	4b63      	ldr	r3, [pc, #396]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005854:	d134      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005856:	f000 ff2d 	bl	80066b4 <RCCEx_PLLSAI1_GetVCOFreq>
 800585a:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800585c:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	3301      	adds	r3, #1
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	fb03 f202 	mul.w	r2, r3, r2
 8005884:	4b54      	ldr	r3, [pc, #336]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	0d5b      	lsrs	r3, r3, #21
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	61fb      	str	r3, [r7, #28]
            break;
 8005898:	e012      	b.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800589a:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800589c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d10e      	bne.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 80058a8:	4b4d      	ldr	r3, [pc, #308]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80058aa:	61fb      	str	r3, [r7, #28]
            break;
 80058ac:	e00b      	b.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 80058ae:	bf00      	nop
 80058b0:	f000 bd53 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058b4:	bf00      	nop
 80058b6:	f000 bd50 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058ba:	bf00      	nop
 80058bc:	f000 bd4d 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058c0:	bf00      	nop
 80058c2:	f000 bd4a 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058c6:	bf00      	nop
        break;
 80058c8:	f000 bd47 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 80058cc:	4b42      	ldr	r3, [pc, #264]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058da:	d13d      	bne.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058dc:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e8:	f040 8536 	bne.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	f040 852e 	bne.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3301      	adds	r3, #1
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005910:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	0a1b      	lsrs	r3, r3, #8
 8005916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591a:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800591c:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0edb      	lsrs	r3, r3, #27
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800592e:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 800593a:	2311      	movs	r3, #17
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e001      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8005940:	2307      	movs	r3, #7
 8005942:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	fb03 f202 	mul.w	r2, r3, r2
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	61fb      	str	r3, [r7, #28]
        break;
 8005954:	f000 bd00 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800596a:	d016      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005972:	f200 809e 	bhi.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597c:	d032      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005984:	f200 8095 	bhi.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8087 	beq.w	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005996:	d052      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005998:	e08b      	b.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	f040 8088 	bne.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	e005      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	4a03      	ldr	r2, [pc, #12]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80059ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d2:	61fb      	str	r3, [r7, #28]
              break;
 80059d4:	e070      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08009258 	.word	0x08009258
 80059e0:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059e4:	4baa      	ldr	r3, [pc, #680]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f0:	d165      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059f2:	4ba7      	ldr	r3, [pc, #668]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059fe:	d15e      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a00:	4ba3      	ldr	r3, [pc, #652]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a14:	4b9e      	ldr	r3, [pc, #632]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	fb03 f202 	mul.w	r2, r3, r2
 8005a28:	4b99      	ldr	r3, [pc, #612]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0d5b      	lsrs	r3, r3, #21
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
              break;
 8005a3c:	e03f      	b.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a3e:	4b94      	ldr	r3, [pc, #592]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4a:	d13b      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a4c:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a58:	d134      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005a5a:	f000 fe2b 	bl	80066b4 <RCCEx_PLLSAI1_GetVCOFreq>
 8005a5e:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a60:	4b8b      	ldr	r3, [pc, #556]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a74:	4b86      	ldr	r3, [pc, #536]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	fb03 f202 	mul.w	r2, r3, r2
 8005a88:	4b81      	ldr	r3, [pc, #516]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	0d5b      	lsrs	r3, r3, #21
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	3301      	adds	r3, #1
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	61fb      	str	r3, [r7, #28]
              break;
 8005a9c:	e012      	b.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005a9e:	4b7c      	ldr	r3, [pc, #496]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d10e      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005aac:	4b79      	ldr	r3, [pc, #484]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005aae:	61fb      	str	r3, [r7, #28]
              break;
 8005ab0:	e00b      	b.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8005ab2:	bf00      	nop
 8005ab4:	f000 bc50 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005ab8:	bf00      	nop
 8005aba:	f000 bc4d 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005abe:	bf00      	nop
 8005ac0:	f000 bc4a 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005ac4:	bf00      	nop
 8005ac6:	f000 bc47 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005aca:	bf00      	nop
        break;
 8005acc:	f000 bc44 	b.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d827      	bhi.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b01 	.word	0x08005b01
 8005af0:	08005b09 	.word	0x08005b09
 8005af4:	08005b1d 	.word	0x08005b1d
            frequency = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7ff f822 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
            break;
 8005afe:	e01f      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005b00:	f7fe ff58 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005b04:	61f8      	str	r0, [r7, #28]
            break;
 8005b06:	e01b      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b08:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d110      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8005b16:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005b18:	61fb      	str	r3, [r7, #28]
            break;
 8005b1a:	e00d      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b1c:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d109      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	61fb      	str	r3, [r7, #28]
            break;
 8005b30:	e005      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8005b32:	bf00      	nop
 8005b34:	f000 bc11 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005b38:	bf00      	nop
 8005b3a:	f000 bc0e 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005b3e:	bf00      	nop
        break;
 8005b40:	f000 bc0b 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b44:	4b52      	ldr	r3, [pc, #328]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d839      	bhi.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b91 	.word	0x08005b91
 8005b60:	08005bcb 	.word	0x08005bcb
 8005b64:	08005bcb 	.word	0x08005bcb
 8005b68:	08005bcb 	.word	0x08005bcb
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005bcb 	.word	0x08005bcb
 8005b74:	08005bcb 	.word	0x08005bcb
 8005b78:	08005bcb 	.word	0x08005bcb
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005bcb 	.word	0x08005bcb
 8005b84:	08005bcb 	.word	0x08005bcb
 8005b88:	08005bcb 	.word	0x08005bcb
 8005b8c:	08005bb5 	.word	0x08005bb5
            frequency = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe ffc2 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61f8      	str	r0, [r7, #28]
            break;
 8005b96:	e01d      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005b98:	f7fe ff0c 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005b9c:	61f8      	str	r0, [r7, #28]
            break;
 8005b9e:	e019      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ba0:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d10f      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005bae:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005bb0:	61fb      	str	r3, [r7, #28]
            break;
 8005bb2:	e00c      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bb4:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8005bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc6:	61fb      	str	r3, [r7, #28]
            break;
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005bca:	bf00      	nop
 8005bcc:	e3c5      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bce:	bf00      	nop
 8005bd0:	e3c3      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bd2:	bf00      	nop
        break;
 8005bd4:	e3c1      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005bd6:	4b2e      	ldr	r3, [pc, #184]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d021      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d829      	bhi.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d011      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d823      	bhi.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d004      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8005c06:	e01c      	b.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c08:	f7fe ff86 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005c0c:	61f8      	str	r0, [r7, #28]
            break;
 8005c0e:	e01d      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c10:	f7fe fed0 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005c14:	61f8      	str	r0, [r7, #28]
            break;
 8005c16:	e019      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c18:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d10f      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005c28:	61fb      	str	r3, [r7, #28]
            break;
 8005c2a:	e00c      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c2c:	4b18      	ldr	r3, [pc, #96]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d107      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	61fb      	str	r3, [r7, #28]
            break;
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8005c42:	bf00      	nop
 8005c44:	e389      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c46:	bf00      	nop
 8005c48:	e387      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c4a:	bf00      	nop
        break;
 8005c4c:	e385      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2bc0      	cmp	r3, #192	; 0xc0
 8005c5e:	d027      	beq.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2bc0      	cmp	r3, #192	; 0xc0
 8005c64:	d82f      	bhi.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d017      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d829      	bhi.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d004      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8005c7e:	e022      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe ff4a 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005c84:	61f8      	str	r0, [r7, #28]
            break;
 8005c86:	e023      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c88:	f7fe fe94 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005c8c:	61f8      	str	r0, [r7, #28]
            break;
 8005c8e:	e01f      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005c90:	40021000 	.word	0x40021000
 8005c94:	02dc6c00 	.word	0x02dc6c00
 8005c98:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c9c:	4b99      	ldr	r3, [pc, #612]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca8:	d10f      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005caa:	4b97      	ldr	r3, [pc, #604]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005cac:	61fb      	str	r3, [r7, #28]
            break;
 8005cae:	e00c      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cb0:	4b94      	ldr	r3, [pc, #592]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d107      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61fb      	str	r3, [r7, #28]
            break;
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005cc6:	bf00      	nop
 8005cc8:	e347      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cca:	bf00      	nop
 8005ccc:	e345      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cce:	bf00      	nop
        break;
 8005cd0:	e343      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005cd2:	4b8c      	ldr	r3, [pc, #560]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce4:	d025      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cec:	d82c      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf4:	d013      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfc:	d824      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0a:	d004      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fe ff03 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005d12:	61f8      	str	r0, [r7, #28]
            break;
 8005d14:	e01d      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fe4d 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005d1a:	61f8      	str	r0, [r7, #28]
            break;
 8005d1c:	e019      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d1e:	4b79      	ldr	r3, [pc, #484]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d10f      	bne.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005d2c:	4b76      	ldr	r3, [pc, #472]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005d2e:	61fb      	str	r3, [r7, #28]
            break;
 8005d30:	e00c      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d32:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d44:	61fb      	str	r3, [r7, #28]
            break;
 8005d46:	e003      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005d48:	bf00      	nop
 8005d4a:	e306      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d4c:	bf00      	nop
 8005d4e:	e304      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d50:	bf00      	nop
        break;
 8005d52:	e302      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d54:	4b6b      	ldr	r3, [pc, #428]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d66:	d025      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6e:	d82c      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d76:	d013      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7e:	d824      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8c:	d004      	beq.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005d8e:	e01c      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fec2 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005d94:	61f8      	str	r0, [r7, #28]
            break;
 8005d96:	e01d      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d98:	f7fe fe0c 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005d9c:	61f8      	str	r0, [r7, #28]
            break;
 8005d9e:	e019      	b.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da0:	4b58      	ldr	r3, [pc, #352]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	d10f      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005dae:	4b56      	ldr	r3, [pc, #344]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005db0:	61fb      	str	r3, [r7, #28]
            break;
 8005db2:	e00c      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61fb      	str	r3, [r7, #28]
            break;
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005dca:	bf00      	nop
 8005dcc:	e2c5      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dce:	bf00      	nop
 8005dd0:	e2c3      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dd2:	bf00      	nop
        break;
 8005dd4:	e2c1      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005dd6:	4b4b      	ldr	r3, [pc, #300]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de8:	d007      	beq.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005df0:	d12b      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe fddf 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005df6:	61f8      	str	r0, [r7, #28]
            break;
 8005df8:	e02a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005dfa:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d023      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005e06:	f000 fc55 	bl	80066b4 <RCCEx_PLLSAI1_GetVCOFreq>
 8005e0a:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005e0c:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3301      	adds	r3, #1
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e20:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	fb03 f202 	mul.w	r2, r3, r2
 8005e34:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	0e5b      	lsrs	r3, r3, #25
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e46:	61fb      	str	r3, [r7, #28]
            break;
 8005e48:	e001      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005e4a:	bf00      	nop
 8005e4c:	e285      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e4e:	bf00      	nop
        break;
 8005e50:	e283      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e52:	4b2c      	ldr	r3, [pc, #176]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e64:	f7fe fe6c 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e276      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e6c:	f7fe fda2 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005e70:	61f8      	str	r0, [r7, #28]
        break;
 8005e72:	e272      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005e74:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e7a:	f003 0318 	and.w	r3, r3, #24
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d834      	bhi.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d024      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005e98:	e02d      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005e9a:	69b9      	ldr	r1, [r7, #24]
 8005e9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ea0:	f000 fcbc 	bl	800681c <RCCEx_GetSAIxPeriphCLKFreq>
 8005ea4:	61f8      	str	r0, [r7, #28]
            break;
 8005ea6:	e02b      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ea8:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d122      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005eb4:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ede:	61fb      	str	r3, [r7, #28]
            break;
 8005ee0:	e00b      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d106      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005ef2:	61fb      	str	r3, [r7, #28]
            break;
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8005ef6:	bf00      	nop
 8005ef8:	e22f      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efa:	bf00      	nop
 8005efc:	e22d      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e22b      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	00f42400 	.word	0x00f42400
 8005f0c:	08009258 	.word	0x08009258
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f10:	4b96      	ldr	r3, [pc, #600]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f22:	d013      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	d819      	bhi.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f38:	d004      	beq.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8005f3a:	e011      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7fe fdec 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005f40:	61f8      	str	r0, [r7, #28]
            break;
 8005f42:	e010      	b.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005f44:	f7fe fd36 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005f48:	61f8      	str	r0, [r7, #28]
            break;
 8005f4a:	e00c      	b.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f4c:	4b87      	ldr	r3, [pc, #540]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d104      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 8005f5a:	4b85      	ldr	r3, [pc, #532]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005f5c:	61fb      	str	r3, [r7, #28]
            break;
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8005f60:	bf00      	nop
 8005f62:	e1fa      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005f64:	bf00      	nop
        break;
 8005f66:	e1f8      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f68:	4b80      	ldr	r3, [pc, #512]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	d013      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f82:	d819      	bhi.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f90:	d004      	beq.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8005f92:	e011      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fe fdc0 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005f98:	61f8      	str	r0, [r7, #28]
            break;
 8005f9a:	e010      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 8005f9c:	f7fe fd0a 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005fa0:	61f8      	str	r0, [r7, #28]
            break;
 8005fa2:	e00c      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa4:	4b71      	ldr	r3, [pc, #452]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d104      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005fb4:	61fb      	str	r3, [r7, #28]
            break;
 8005fb6:	e001      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8005fb8:	bf00      	nop
 8005fba:	e1ce      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005fbc:	bf00      	nop
        break;
 8005fbe:	e1cc      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005fc0:	4b6a      	ldr	r3, [pc, #424]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fda:	d819      	bhi.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe8:	d004      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe fd94 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
            break;
 8005ff2:	e010      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ff4:	f7fe fcde 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005ff8:	61f8      	str	r0, [r7, #28]
            break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ffc:	4b5b      	ldr	r3, [pc, #364]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800600c:	61fb      	str	r3, [r7, #28]
            break;
 800600e:	e001      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8006010:	bf00      	nop
 8006012:	e1a2      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006014:	bf00      	nop
        break;
 8006016:	e1a0      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006018:	4b54      	ldr	r3, [pc, #336]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800601a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d011      	beq.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d818      	bhi.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d004      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 800603c:	e011      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 800603e:	f7fe fd6b 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8006042:	61f8      	str	r0, [r7, #28]
            break;
 8006044:	e010      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8006046:	f7fe fcb5 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 800604a:	61f8      	str	r0, [r7, #28]
            break;
 800604c:	e00c      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800604e:	4b47      	ldr	r3, [pc, #284]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605a:	d104      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800605c:	4b44      	ldr	r3, [pc, #272]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800605e:	61fb      	str	r3, [r7, #28]
            break;
 8006060:	e001      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8006062:	bf00      	nop
 8006064:	e179      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006066:	bf00      	nop
        break;
 8006068:	e177      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800607c:	d02c      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006084:	d833      	bhi.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800608c:	d01a      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006094:	d82b      	bhi.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060a2:	d004      	beq.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 80060a4:	e023      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060a6:	f7fe fd37 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80060aa:	61f8      	str	r0, [r7, #28]
            break;
 80060ac:	e026      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060ae:	4b2f      	ldr	r3, [pc, #188]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d11a      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 80060bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060c0:	61fb      	str	r3, [r7, #28]
            break;
 80060c2:	e016      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c4:	4b29      	ldr	r3, [pc, #164]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d0:	d111      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 80060d2:	4b27      	ldr	r3, [pc, #156]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80060d4:	61fb      	str	r3, [r7, #28]
            break;
 80060d6:	e00e      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060d8:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d109      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ea:	61fb      	str	r3, [r7, #28]
            break;
 80060ec:	e005      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 80060ee:	bf00      	nop
 80060f0:	e133      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060f2:	bf00      	nop
 80060f4:	e131      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060f6:	bf00      	nop
 80060f8:	e12f      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060fa:	bf00      	nop
        break;
 80060fc:	e12d      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060fe:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006110:	d030      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006118:	d837      	bhi.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006120:	d01a      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006128:	d82f      	bhi.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d004      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8006138:	e027      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 800613a:	f7fe fced 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 800613e:	61f8      	str	r0, [r7, #28]
            break;
 8006140:	e02a      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11e      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8006150:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006154:	61fb      	str	r3, [r7, #28]
            break;
 8006156:	e01a      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d115      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8006166:	4b02      	ldr	r3, [pc, #8]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006168:	61fb      	str	r3, [r7, #28]
            break;
 800616a:	e012      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800616c:	40021000 	.word	0x40021000
 8006170:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006174:	4b7b      	ldr	r3, [pc, #492]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	d109      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8006182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006186:	61fb      	str	r3, [r7, #28]
            break;
 8006188:	e005      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800618a:	bf00      	nop
 800618c:	e0e5      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800618e:	bf00      	nop
 8006190:	e0e3      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006192:	bf00      	nop
 8006194:	e0e1      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006196:	bf00      	nop
        break;
 8006198:	e0df      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800619a:	4b72      	ldr	r3, [pc, #456]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061ac:	d02c      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061b4:	d833      	bhi.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061bc:	d01a      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c4:	d82b      	bhi.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d2:	d004      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 80061d4:	e023      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80061d6:	f7fe fc9f 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80061da:	61f8      	str	r0, [r7, #28]
            break;
 80061dc:	e026      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061de:	4b61      	ldr	r3, [pc, #388]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11a      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 80061ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061f0:	61fb      	str	r3, [r7, #28]
            break;
 80061f2:	e016      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f4:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006200:	d111      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 8006202:	4b59      	ldr	r3, [pc, #356]	; (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8006204:	61fb      	str	r3, [r7, #28]
            break;
 8006206:	e00e      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006208:	4b56      	ldr	r3, [pc, #344]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d109      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8006216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621a:	61fb      	str	r3, [r7, #28]
            break;
 800621c:	e005      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 800621e:	bf00      	nop
 8006220:	e09b      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006222:	bf00      	nop
 8006224:	e099      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006226:	bf00      	nop
 8006228:	e097      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800622a:	bf00      	nop
        break;
 800622c:	e095      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800622e:	4b4d      	ldr	r3, [pc, #308]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006240:	d042      	beq.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006248:	d874      	bhi.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8006258:	e06c      	b.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800625a:	4b42      	ldr	r3, [pc, #264]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006266:	d167      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8006268:	4b40      	ldr	r3, [pc, #256]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800626a:	61fb      	str	r3, [r7, #28]
            break;
 800626c:	e064      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800626e:	4b3d      	ldr	r3, [pc, #244]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627a:	d15f      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800627c:	4b39      	ldr	r3, [pc, #228]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006288:	d158      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800628a:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	091b      	lsrs	r3, r3, #4
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	3301      	adds	r3, #1
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	fbb2 f3f3 	udiv	r3, r2, r3
 800629c:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a8:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	fb03 f202 	mul.w	r2, r3, r2
 80062b2:	4b2c      	ldr	r3, [pc, #176]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	0d5b      	lsrs	r3, r3, #21
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	3301      	adds	r3, #1
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	61fb      	str	r3, [r7, #28]
            break;
 80062c6:	e039      	b.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80062c8:	4b26      	ldr	r3, [pc, #152]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d035      	beq.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80062d4:	f000 f9ee 	bl	80066b4 <RCCEx_PLLSAI1_GetVCOFreq>
 80062d8:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80062da:	4b22      	ldr	r3, [pc, #136]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	3301      	adds	r3, #1
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f8:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80062fa:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	0edb      	lsrs	r3, r3, #27
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800630c:	4b15      	ldr	r3, [pc, #84]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8006318:	2311      	movs	r3, #17
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e001      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 800631e:	2307      	movs	r3, #7
 8006320:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	fb03 f202 	mul.w	r2, r3, r2
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	61fb      	str	r3, [r7, #28]
            break;
 8006332:	e005      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8006334:	bf00      	nop
 8006336:	e010      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006338:	bf00      	nop
 800633a:	e00e      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800633c:	bf00      	nop
 800633e:	e00c      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006340:	bf00      	nop
        break;
 8006342:	e00a      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006344:	bf00      	nop
 8006346:	e008      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006348:	bf00      	nop
 800634a:	e006      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800634c:	bf00      	nop
 800634e:	e004      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006350:	bf00      	nop
 8006352:	e002      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006358:	bf00      	nop
    }
  }

  return (frequency);
 800635a:	69fb      	ldr	r3, [r7, #28]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000
 8006368:	00f42400 	.word	0x00f42400
 800636c:	007a1200 	.word	0x007a1200

08006370 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a04      	ldr	r2, [pc, #16]	; (800638c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800637a:	f043 0304 	orr.w	r3, r3, #4
 800637e:	6013      	str	r3, [r2, #0]
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40021000 	.word	0x40021000

08006390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d018      	beq.n	80063d8 <RCCEx_PLLSAI1_Config+0x48>
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d81f      	bhi.n	80063ea <RCCEx_PLLSAI1_Config+0x5a>
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d002      	beq.n	80063b4 <RCCEx_PLLSAI1_Config+0x24>
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d009      	beq.n	80063c6 <RCCEx_PLLSAI1_Config+0x36>
 80063b2:	e01a      	b.n	80063ea <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d117      	bne.n	80063f0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c4:	e014      	b.n	80063f0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063c6:	4b61      	ldr	r3, [pc, #388]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d6:	e00d      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80063d8:	4b5c      	ldr	r3, [pc, #368]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e8:	e006      	b.n	80063f8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
      break;
 80063ee:	e004      	b.n	80063fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80063f0:	bf00      	nop
 80063f2:	e002      	b.n	80063fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80063f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 809f 	bne.w	8006540 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006402:	4b52      	ldr	r3, [pc, #328]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a51      	ldr	r2, [pc, #324]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800640c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640e:	f7fb fdcd 	bl	8001fac <HAL_GetTick>
 8006412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006414:	e00f      	b.n	8006436 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006416:	f7fb fdc9 	bl	8001fac <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d908      	bls.n	8006436 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006424:	4b49      	ldr	r3, [pc, #292]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006434:	e006      	b.n	8006444 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006436:	4b45      	ldr	r3, [pc, #276]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e9      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0x86>
 8006442:	e000      	b.n	8006446 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006444:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d179      	bne.n	8006540 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6892      	ldr	r2, [r2, #8]
 800645e:	0211      	lsls	r1, r2, #8
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68d2      	ldr	r2, [r2, #12]
 8006464:	06d2      	lsls	r2, r2, #27
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6852      	ldr	r2, [r2, #4]
 800646c:	3a01      	subs	r2, #1
 800646e:	0112      	lsls	r2, r2, #4
 8006470:	4311      	orrs	r1, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	4934      	ldr	r1, [pc, #208]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
 800647e:	e033      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d118      	bne.n	80064b8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	4b32      	ldr	r3, [pc, #200]	; (8006554 <RCCEx_PLLSAI1_Config+0x1c4>)
 800648c:	4013      	ands	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6892      	ldr	r2, [r2, #8]
 8006492:	0211      	lsls	r1, r2, #8
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6912      	ldr	r2, [r2, #16]
 8006498:	0852      	lsrs	r2, r2, #1
 800649a:	3a01      	subs	r2, #1
 800649c:	0552      	lsls	r2, r2, #21
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6852      	ldr	r2, [r2, #4]
 80064a4:	3a01      	subs	r2, #1
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	4311      	orrs	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	4926      	ldr	r1, [pc, #152]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]
 80064b6:	e017      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <RCCEx_PLLSAI1_Config+0x1c8>)
 80064be:	4013      	ands	r3, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6892      	ldr	r2, [r2, #8]
 80064c4:	0211      	lsls	r1, r2, #8
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6952      	ldr	r2, [r2, #20]
 80064ca:	0852      	lsrs	r2, r2, #1
 80064cc:	3a01      	subs	r2, #1
 80064ce:	0652      	lsls	r2, r2, #25
 80064d0:	4311      	orrs	r1, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6852      	ldr	r2, [r2, #4]
 80064d6:	3a01      	subs	r2, #1
 80064d8:	0112      	lsls	r2, r2, #4
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	491a      	ldr	r1, [pc, #104]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a17      	ldr	r2, [pc, #92]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 80064ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f4:	f7fb fd5a 	bl	8001fac <HAL_GetTick>
 80064f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064fa:	e00f      	b.n	800651c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064fc:	f7fb fd56 	bl	8001fac <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d908      	bls.n	800651c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800651a:	e006      	b.n	800652a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0e9      	beq.n	80064fc <RCCEx_PLLSAI1_Config+0x16c>
 8006528:	e000      	b.n	800652c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800652a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	4904      	ldr	r1, [pc, #16]	; (800654c <RCCEx_PLLSAI1_Config+0x1bc>)
 800653c:	4313      	orrs	r3, r2
 800653e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40021000 	.word	0x40021000
 8006550:	07ff800c 	.word	0x07ff800c
 8006554:	ff9f800c 	.word	0xff9f800c
 8006558:	f9ff800c 	.word	0xf9ff800c

0800655c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d018      	beq.n	80065a4 <RCCEx_PLLSAI2_Config+0x48>
 8006572:	2b03      	cmp	r3, #3
 8006574:	d81f      	bhi.n	80065b6 <RCCEx_PLLSAI2_Config+0x5a>
 8006576:	2b01      	cmp	r3, #1
 8006578:	d002      	beq.n	8006580 <RCCEx_PLLSAI2_Config+0x24>
 800657a:	2b02      	cmp	r3, #2
 800657c:	d009      	beq.n	8006592 <RCCEx_PLLSAI2_Config+0x36>
 800657e:	e01a      	b.n	80065b6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006580:	4b4a      	ldr	r3, [pc, #296]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d117      	bne.n	80065bc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006590:	e014      	b.n	80065bc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006592:	4b46      	ldr	r3, [pc, #280]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659a:	2b00      	cmp	r3, #0
 800659c:	d110      	bne.n	80065c0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a2:	e00d      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80065a4:	4b41      	ldr	r3, [pc, #260]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b4:	e006      	b.n	80065c4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
      break;
 80065ba:	e004      	b.n	80065c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065bc:	bf00      	nop
 80065be:	e002      	b.n	80065c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80065c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d169      	bne.n	80066a0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a36      	ldr	r2, [pc, #216]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 80065d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d8:	f7fb fce8 	bl	8001fac <HAL_GetTick>
 80065dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065de:	e00f      	b.n	8006600 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065e0:	f7fb fce4 	bl	8001fac <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d908      	bls.n	8006600 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065ee:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065fe:	e006      	b.n	800660e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006600:	4b2a      	ldr	r3, [pc, #168]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e9      	bne.n	80065e0 <RCCEx_PLLSAI2_Config+0x84>
 800660c:	e000      	b.n	8006610 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800660e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d144      	bne.n	80066a0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d115      	bne.n	8006648 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800661c:	4b23      	ldr	r3, [pc, #140]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <RCCEx_PLLSAI2_Config+0x154>)
 8006622:	4013      	ands	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68d2      	ldr	r2, [r2, #12]
 800662e:	06d2      	lsls	r2, r2, #27
 8006630:	4311      	orrs	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6852      	ldr	r2, [r2, #4]
 8006636:	3a01      	subs	r2, #1
 8006638:	0112      	lsls	r2, r2, #4
 800663a:	4311      	orrs	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	491a      	ldr	r1, [pc, #104]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 8006644:	4313      	orrs	r3, r2
 8006646:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006648:	4b18      	ldr	r3, [pc, #96]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a17      	ldr	r2, [pc, #92]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fb fcaa 	bl	8001fac <HAL_GetTick>
 8006658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800665a:	e00f      	b.n	800667c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800665c:	f7fb fca6 	bl	8001fac <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d908      	bls.n	800667c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800667a:	e006      	b.n	800668a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0e9      	beq.n	800665c <RCCEx_PLLSAI2_Config+0x100>
 8006688:	e000      	b.n	800668c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800668a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	4904      	ldr	r1, [pc, #16]	; (80066ac <RCCEx_PLLSAI2_Config+0x150>)
 800669c:	4313      	orrs	r3, r2
 800669e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000
 80066b0:	07ff800c 	.word	0x07ff800c

080066b4 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80066be:	4b26      	ldr	r3, [pc, #152]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d02d      	beq.n	8006726 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d835      	bhi.n	800673a <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d002      	beq.n	80066d8 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d01d      	beq.n	8006712 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80066d6:	e030      	b.n	800673a <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066d8:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d12c      	bne.n	800673e <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80066f0:	4b19      	ldr	r3, [pc, #100]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	e005      	b.n	8006708 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006702:	0a1b      	lsrs	r3, r3, #8
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	4a14      	ldr	r2, [pc, #80]	; (800675c <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 800670a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670e:	607b      	str	r3, [r7, #4]
      break;
 8006710:	e015      	b.n	800673e <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006712:	4b11      	ldr	r3, [pc, #68]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d110      	bne.n	8006742 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8006722:	607b      	str	r3, [r7, #4]
      break;
 8006724:	e00d      	b.n	8006742 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006732:	d108      	bne.n	8006746 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8006736:	607b      	str	r3, [r7, #4]
      break;
 8006738:	e005      	b.n	8006746 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 800673a:	bf00      	nop
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8006746:	bf00      	nop
  }

  return pllvco;
 8006748:	687b      	ldr	r3, [r7, #4]
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	08009258 	.word	0x08009258
 8006760:	00f42400 	.word	0x00f42400
 8006764:	007a1200 	.word	0x007a1200

08006768 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8006772:	4b26      	ldr	r3, [pc, #152]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d02d      	beq.n	80067da <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800677e:	2b03      	cmp	r3, #3
 8006780:	d835      	bhi.n	80067ee <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d01d      	beq.n	80067c6 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800678a:	e030      	b.n	80067ee <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800678c:	4b1f      	ldr	r3, [pc, #124]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d12c      	bne.n	80067f2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006798:	4b1c      	ldr	r3, [pc, #112]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80067a4:	4b19      	ldr	r3, [pc, #100]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	e005      	b.n	80067bc <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80067b0:	4b16      	ldr	r3, [pc, #88]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80067b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	4a14      	ldr	r2, [pc, #80]	; (8006810 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80067be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c2:	607b      	str	r3, [r7, #4]
      break;
 80067c4:	e015      	b.n	80067f2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d2:	d110      	bne.n	80067f6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 80067d6:	607b      	str	r3, [r7, #4]
      break;
 80067d8:	e00d      	b.n	80067f6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e6:	d108      	bne.n	80067fa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 80067ea:	607b      	str	r3, [r7, #4]
      break;
 80067ec:	e005      	b.n	80067fa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80067fa:	bf00      	nop
  }

  return pllvco;
 80067fc:	687b      	ldr	r3, [r7, #4]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	08009258 	.word	0x08009258
 8006814:	00f42400 	.word	0x00f42400
 8006818:	007a1200 	.word	0x007a1200

0800681c <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006830:	d10c      	bne.n	800684c <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006832:	4b78      	ldr	r3, [pc, #480]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006838:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800683c:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b60      	cmp	r3, #96	; 0x60
 8006842:	d110      	bne.n	8006866 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006844:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e00c      	b.n	8006866 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800684c:	4b71      	ldr	r3, [pc, #452]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800684e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006852:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006856:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800685e:	d102      	bne.n	8006866 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006860:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006864:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 80cd 	bne.w	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d003      	beq.n	8006880 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687e:	d13b      	bne.n	80068f8 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006880:	4b64      	ldr	r3, [pc, #400]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688c:	f040 80bb 	bne.w	8006a06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006890:	4b60      	ldr	r3, [pc, #384]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80b4 	beq.w	8006a06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800689e:	4b5d      	ldr	r3, [pc, #372]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	3301      	adds	r3, #1
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068b2:	4b58      	ldr	r3, [pc, #352]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068bc:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80068be:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	0edb      	lsrs	r3, r3, #27
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80068d0:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 80068dc:	2311      	movs	r3, #17
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e001      	b.n	80068e6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 80068e2:	2307      	movs	r3, #7
 80068e4:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	fb03 f202 	mul.w	r2, r3, r2
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068f6:	e086      	b.n	8006a06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d003      	beq.n	8006906 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d109      	bne.n	800691a <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d179      	bne.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8006914:	4b40      	ldr	r3, [pc, #256]	; (8006a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006916:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006918:	e076      	b.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d135      	bne.n	800698c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006920:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d06d      	beq.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800692c:	f7ff fec2 	bl	80066b4 <RCCEx_PLLSAI1_GetVCOFreq>
 8006930:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	3301      	adds	r3, #1
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006946:	4b33      	ldr	r3, [pc, #204]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006950:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	0edb      	lsrs	r3, r3, #27
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006964:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8006970:	2311      	movs	r3, #17
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e001      	b.n	800697a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8006976:	2307      	movs	r3, #7
 8006978:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	fb03 f202 	mul.w	r2, r3, r2
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e03d      	b.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b20      	cmp	r3, #32
 8006990:	d003      	beq.n	800699a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d136      	bne.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800699a:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d030      	beq.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80069a6:	f7ff fedf 	bl	8006768 <RCCEx_PLLSAI2_GetVCOFreq>
 80069aa:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	3301      	adds	r3, #1
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80069c0:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80069cc:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	0edb      	lsrs	r3, r3, #27
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80069de:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80069ea:	2311      	movs	r3, #17
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e001      	b.n	80069f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80069f0:	2307      	movs	r3, #7
 80069f2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	fb03 f202 	mul.w	r2, r3, r2
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e000      	b.n	8006a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a06:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006a08:	69fb      	ldr	r3, [r7, #28]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000
 8006a18:	00f42400 	.word	0x00f42400

08006a1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1da      	b.n	8006de4 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10e      	bne.n	8006a56 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a87      	ldr	r2, [pc, #540]	; (8006c5c <HAL_SAI_Init+0x240>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d107      	bne.n	8006a52 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d103      	bne.n	8006a52 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e1c6      	b.n	8006de4 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fc76 	bl	800135c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9c3 	bl	8006dfc <SAI_Disable>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e1b1      	b.n	8006de4 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d00c      	beq.n	8006aaa <HAL_SAI_Init+0x8e>
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d80d      	bhi.n	8006ab0 <HAL_SAI_Init+0x94>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_SAI_Init+0x82>
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d003      	beq.n	8006aa4 <HAL_SAI_Init+0x88>
 8006a9c:	e008      	b.n	8006ab0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aa2:	e008      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aa8:	e005      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006aaa:	2320      	movs	r3, #32
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ab4:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d81d      	bhi.n	8006afa <HAL_SAI_Init+0xde>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_SAI_Init+0xa8>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006adb 	.word	0x08006adb
 8006acc:	08006ae3 	.word	0x08006ae3
 8006ad0:	08006aeb 	.word	0x08006aeb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
      break;
 8006ad8:	e012      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	61fb      	str	r3, [r7, #28]
      break;
 8006ae0:	e00e      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ae6:	61fb      	str	r3, [r7, #28]
      break;
 8006ae8:	e00a      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aee:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006af8:	e002      	b.n	8006b00 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
      break;
 8006afe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a55      	ldr	r2, [pc, #340]	; (8006c5c <HAL_SAI_Init+0x240>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_SAI_Init+0xf8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a54      	ldr	r2, [pc, #336]	; (8006c60 <HAL_SAI_Init+0x244>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b14:	4a53      	ldr	r2, [pc, #332]	; (8006c64 <HAL_SAI_Init+0x248>)
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e002      	b.n	8006b22 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <HAL_SAI_Init+0x24c>)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d07e      	beq.n	8006c28 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4a      	ldr	r2, [pc, #296]	; (8006c5c <HAL_SAI_Init+0x240>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_SAI_Init+0x126>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a48      	ldr	r2, [pc, #288]	; (8006c60 <HAL_SAI_Init+0x244>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d104      	bne.n	8006b4c <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b46:	f7fe fc71 	bl	800542c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b4a:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a46      	ldr	r2, [pc, #280]	; (8006c6c <HAL_SAI_Init+0x250>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_SAI_Init+0x144>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a45      	ldr	r2, [pc, #276]	; (8006c70 <HAL_SAI_Init+0x254>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d104      	bne.n	8006b6a <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b64:	f7fe fc62 	bl	800542c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b68:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b72:	d120      	bne.n	8006bb6 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d102      	bne.n	8006b82 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	e00a      	b.n	8006b98 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d103      	bne.n	8006b92 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	e002      	b.n	8006b98 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e017      	b.n	8006be6 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bbe:	d101      	bne.n	8006bc4 <HAL_SAI_Init+0x1a8>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e000      	b.n	8006bc6 <HAL_SAI_Init+0x1aa>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006be4:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <HAL_SAI_Init+0x258>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	08da      	lsrs	r2, r3, #3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006bf4:	6979      	ldr	r1, [r7, #20]
 8006bf6:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <HAL_SAI_Init+0x258>)
 8006bf8:	fba3 2301 	umull	r2, r3, r3, r1
 8006bfc:	08da      	lsrs	r2, r3, #3
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	1aca      	subs	r2, r1, r3
 8006c08:	2a08      	cmp	r2, #8
 8006c0a:	d904      	bls.n	8006c16 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d104      	bne.n	8006c28 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	085a      	lsrs	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_SAI_Init+0x21c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d109      	bne.n	8006c4c <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_SAI_Init+0x228>
 8006c40:	2300      	movs	r3, #0
 8006c42:	e001      	b.n	8006c48 <HAL_SAI_Init+0x22c>
 8006c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	e017      	b.n	8006c7c <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d111      	bne.n	8006c78 <HAL_SAI_Init+0x25c>
 8006c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c58:	e00f      	b.n	8006c7a <HAL_SAI_Init+0x25e>
 8006c5a:	bf00      	nop
 8006c5c:	40015404 	.word	0x40015404
 8006c60:	40015424 	.word	0x40015424
 8006c64:	40015400 	.word	0x40015400
 8006c68:	40015800 	.word	0x40015800
 8006c6c:	40015804 	.word	0x40015804
 8006c70:	40015824 	.word	0x40015824
 8006c74:	cccccccd 	.word	0xcccccccd
 8006c78:	2300      	movs	r3, #0
 8006c7a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b59      	ldr	r3, [pc, #356]	; (8006dec <HAL_SAI_Init+0x3d0>)
 8006c88:	400b      	ands	r3, r1
 8006c8a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ca0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006cb4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cc0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cce:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006cec:	f023 030f 	bic.w	r3, r3, #15
 8006cf0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6859      	ldr	r1, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6899      	ldr	r1, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <HAL_SAI_Init+0x3d4>)
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d30:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006d36:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006d3c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	3b01      	subs	r3, #1
 8006d44:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d46:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68d9      	ldr	r1, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d5e:	400b      	ands	r3, r1
 8006d60:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68d9      	ldr	r1, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d70:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d76:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d78:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <HAL_SAI_Init+0x3d8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d119      	bne.n	8006dca <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006d96:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <HAL_SAI_Init+0x3dc>)
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_SAI_Init+0x3dc>)
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d10e      	bne.n	8006dca <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	3b01      	subs	r3, #1
 8006db6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006db8:	490f      	ldr	r1, [pc, #60]	; (8006df8 <HAL_SAI_Init+0x3dc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <HAL_SAI_Init+0x3dc>)
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <HAL_SAI_Init+0x3dc>)
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3728      	adds	r7, #40	; 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	f005c010 	.word	0xf005c010
 8006df0:	fff88000 	.word	0xfff88000
 8006df4:	40015404 	.word	0x40015404
 8006df8:	40015400 	.word	0x40015400

08006dfc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006e04:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <SAI_Disable+0x6c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <SAI_Disable+0x70>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	0b1b      	lsrs	r3, r3, #12
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e26:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	72fb      	strb	r3, [r7, #11]
      break;
 8006e42:	e009      	b.n	8006e58 <SAI_Disable+0x5c>
    }
    count--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e7      	bne.n	8006e28 <SAI_Disable+0x2c>

  return status;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000000 	.word	0x20000000
 8006e6c:	95cbec1b 	.word	0x95cbec1b

08006e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e095      	b.n	8006fae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d108      	bne.n	8006e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e92:	d009      	beq.n	8006ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	61da      	str	r2, [r3, #28]
 8006e9a:	e005      	b.n	8006ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa faec 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ee8:	d902      	bls.n	8006ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e002      	b.n	8006ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006efe:	d007      	beq.n	8006f10 <HAL_SPI_Init+0xa0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f08:	d002      	beq.n	8006f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	ea42 0103 	orr.w	r1, r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	f003 0204 	and.w	r2, r3, #4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f8c:	ea42 0103 	orr.w	r1, r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e038      	b.n	800703e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7f9 fd5d 	bl	8000aa0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3308      	adds	r3, #8
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f001 fd9d 	bl	8008b30 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	461a      	mov	r2, r3
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	f001 fe65 	bl	8008cd0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6858      	ldr	r0, [r3, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	f001 feae 	bl	8008d74 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	6892      	ldr	r2, [r2, #8]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	6892      	ldr	r2, [r2, #8]
 800702c:	f041 0101 	orr.w	r1, r1, #1
 8007030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e049      	b.n	80070ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fa fc5b 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f000 f9e9 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e049      	b.n	800719a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f841 	bl	80071a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 f992 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e0fd      	b.n	80073ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b14      	cmp	r3, #20
 80071de:	f200 80f0 	bhi.w	80073c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080073c3 	.word	0x080073c3
 80071f0:	080073c3 	.word	0x080073c3
 80071f4:	080073c3 	.word	0x080073c3
 80071f8:	0800727d 	.word	0x0800727d
 80071fc:	080073c3 	.word	0x080073c3
 8007200:	080073c3 	.word	0x080073c3
 8007204:	080073c3 	.word	0x080073c3
 8007208:	080072bf 	.word	0x080072bf
 800720c:	080073c3 	.word	0x080073c3
 8007210:	080073c3 	.word	0x080073c3
 8007214:	080073c3 	.word	0x080073c3
 8007218:	080072ff 	.word	0x080072ff
 800721c:	080073c3 	.word	0x080073c3
 8007220:	080073c3 	.word	0x080073c3
 8007224:	080073c3 	.word	0x080073c3
 8007228:	08007341 	.word	0x08007341
 800722c:	080073c3 	.word	0x080073c3
 8007230:	080073c3 	.word	0x080073c3
 8007234:	080073c3 	.word	0x080073c3
 8007238:	08007381 	.word	0x08007381
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f9a4 	bl	8007590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0208 	orr.w	r2, r2, #8
 8007256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0204 	bic.w	r2, r2, #4
 8007266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	619a      	str	r2, [r3, #24]
      break;
 800727a:	e0a3      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fa14 	bl	80076b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6999      	ldr	r1, [r3, #24]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	021a      	lsls	r2, r3, #8
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	619a      	str	r2, [r3, #24]
      break;
 80072bc:	e082      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fa7d 	bl	80077c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0208 	orr.w	r2, r2, #8
 80072d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0204 	bic.w	r2, r2, #4
 80072e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	61da      	str	r2, [r3, #28]
      break;
 80072fc:	e062      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fae5 	bl	80078d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69d9      	ldr	r1, [r3, #28]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	021a      	lsls	r2, r3, #8
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	61da      	str	r2, [r3, #28]
      break;
 800733e:	e041      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fb2e 	bl	80079a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0208 	orr.w	r2, r2, #8
 800735a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0204 	bic.w	r2, r2, #4
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	691a      	ldr	r2, [r3, #16]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800737e:	e021      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fb72 	bl	8007a70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800739a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	021a      	lsls	r2, r3, #8
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073c0:	e000      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80073c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop

080073d8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e031      	b.n	8007454 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb9a 	bl	8007b3c <TIM_SlaveTimer_SetConfig>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e018      	b.n	8007454 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007430:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007440:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a40      	ldr	r2, [pc, #256]	; (8007570 <TIM_Base_SetConfig+0x114>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a3d      	ldr	r2, [pc, #244]	; (8007574 <TIM_Base_SetConfig+0x118>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3c      	ldr	r2, [pc, #240]	; (8007578 <TIM_Base_SetConfig+0x11c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3b      	ldr	r2, [pc, #236]	; (800757c <TIM_Base_SetConfig+0x120>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3a      	ldr	r2, [pc, #232]	; (8007580 <TIM_Base_SetConfig+0x124>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <TIM_Base_SetConfig+0x114>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01f      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074bc:	d01b      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2c      	ldr	r2, [pc, #176]	; (8007574 <TIM_Base_SetConfig+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d017      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2b      	ldr	r2, [pc, #172]	; (8007578 <TIM_Base_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2a      	ldr	r2, [pc, #168]	; (800757c <TIM_Base_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00f      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a29      	ldr	r2, [pc, #164]	; (8007580 <TIM_Base_SetConfig+0x124>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00b      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a28      	ldr	r2, [pc, #160]	; (8007584 <TIM_Base_SetConfig+0x128>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d007      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a27      	ldr	r2, [pc, #156]	; (8007588 <TIM_Base_SetConfig+0x12c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_Base_SetConfig+0x9a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a26      	ldr	r2, [pc, #152]	; (800758c <TIM_Base_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d108      	bne.n	8007508 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a10      	ldr	r2, [pc, #64]	; (8007570 <TIM_Base_SetConfig+0x114>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00f      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a12      	ldr	r2, [pc, #72]	; (8007580 <TIM_Base_SetConfig+0x124>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00b      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a11      	ldr	r2, [pc, #68]	; (8007584 <TIM_Base_SetConfig+0x128>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d007      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <TIM_Base_SetConfig+0x12c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a0f      	ldr	r2, [pc, #60]	; (800758c <TIM_Base_SetConfig+0x130>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d103      	bne.n	800755c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	615a      	str	r2, [r3, #20]
}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40012c00 	.word	0x40012c00
 8007574:	40000400 	.word	0x40000400
 8007578:	40000800 	.word	0x40000800
 800757c:	40000c00 	.word	0x40000c00
 8007580:	40013400 	.word	0x40013400
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800

08007590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f023 0302 	bic.w	r3, r3, #2
 80075dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a2c      	ldr	r2, [pc, #176]	; (800769c <TIM_OC1_SetConfig+0x10c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00f      	beq.n	8007610 <TIM_OC1_SetConfig+0x80>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a2b      	ldr	r2, [pc, #172]	; (80076a0 <TIM_OC1_SetConfig+0x110>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_OC1_SetConfig+0x80>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2a      	ldr	r2, [pc, #168]	; (80076a4 <TIM_OC1_SetConfig+0x114>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_OC1_SetConfig+0x80>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <TIM_OC1_SetConfig+0x118>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_OC1_SetConfig+0x80>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a28      	ldr	r2, [pc, #160]	; (80076ac <TIM_OC1_SetConfig+0x11c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10c      	bne.n	800762a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0308 	bic.w	r3, r3, #8
 8007616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f023 0304 	bic.w	r3, r3, #4
 8007628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a1b      	ldr	r2, [pc, #108]	; (800769c <TIM_OC1_SetConfig+0x10c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00f      	beq.n	8007652 <TIM_OC1_SetConfig+0xc2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a1a      	ldr	r2, [pc, #104]	; (80076a0 <TIM_OC1_SetConfig+0x110>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_OC1_SetConfig+0xc2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a19      	ldr	r2, [pc, #100]	; (80076a4 <TIM_OC1_SetConfig+0x114>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_OC1_SetConfig+0xc2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <TIM_OC1_SetConfig+0x118>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC1_SetConfig+0xc2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <TIM_OC1_SetConfig+0x11c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d111      	bne.n	8007676 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40013400 	.word	0x40013400
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40014400 	.word	0x40014400
 80076ac:	40014800 	.word	0x40014800

080076b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0210 	bic.w	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <TIM_OC2_SetConfig+0x100>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC2_SetConfig+0x6c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <TIM_OC2_SetConfig+0x104>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10d      	bne.n	8007738 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <TIM_OC2_SetConfig+0x100>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_OC2_SetConfig+0xb0>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <TIM_OC2_SetConfig+0x104>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_OC2_SetConfig+0xb0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <TIM_OC2_SetConfig+0x108>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_OC2_SetConfig+0xb0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <TIM_OC2_SetConfig+0x10c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC2_SetConfig+0xb0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <TIM_OC2_SetConfig+0x110>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d113      	bne.n	8007788 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40013400 	.word	0x40013400
 80077b8:	40014000 	.word	0x40014000
 80077bc:	40014400 	.word	0x40014400
 80077c0:	40014800 	.word	0x40014800

080077c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <TIM_OC3_SetConfig+0xfc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d003      	beq.n	800782e <TIM_OC3_SetConfig+0x6a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a26      	ldr	r2, [pc, #152]	; (80078c4 <TIM_OC3_SetConfig+0x100>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d10d      	bne.n	800784a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <TIM_OC3_SetConfig+0xfc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00f      	beq.n	8007872 <TIM_OC3_SetConfig+0xae>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <TIM_OC3_SetConfig+0x100>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00b      	beq.n	8007872 <TIM_OC3_SetConfig+0xae>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <TIM_OC3_SetConfig+0x104>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d007      	beq.n	8007872 <TIM_OC3_SetConfig+0xae>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <TIM_OC3_SetConfig+0x108>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC3_SetConfig+0xae>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <TIM_OC3_SetConfig+0x10c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d113      	bne.n	800789a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40012c00 	.word	0x40012c00
 80078c4:	40013400 	.word	0x40013400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40014400 	.word	0x40014400
 80078d0:	40014800 	.word	0x40014800

080078d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a18      	ldr	r2, [pc, #96]	; (8007994 <TIM_OC4_SetConfig+0xc0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00f      	beq.n	8007958 <TIM_OC4_SetConfig+0x84>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a17      	ldr	r2, [pc, #92]	; (8007998 <TIM_OC4_SetConfig+0xc4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_OC4_SetConfig+0x84>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a16      	ldr	r2, [pc, #88]	; (800799c <TIM_OC4_SetConfig+0xc8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_OC4_SetConfig+0x84>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <TIM_OC4_SetConfig+0xcc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_OC4_SetConfig+0x84>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a14      	ldr	r2, [pc, #80]	; (80079a4 <TIM_OC4_SetConfig+0xd0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d109      	bne.n	800796c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800

080079a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <TIM_OC5_SetConfig+0xb4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00f      	beq.n	8007a22 <TIM_OC5_SetConfig+0x7a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <TIM_OC5_SetConfig+0xb8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00b      	beq.n	8007a22 <TIM_OC5_SetConfig+0x7a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <TIM_OC5_SetConfig+0xbc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <TIM_OC5_SetConfig+0x7a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <TIM_OC5_SetConfig+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_OC5_SetConfig+0x7a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC5_SetConfig+0xc4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d109      	bne.n	8007a36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	621a      	str	r2, [r3, #32]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	40012c00 	.word	0x40012c00
 8007a60:	40013400 	.word	0x40013400
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800

08007a70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	051b      	lsls	r3, r3, #20
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <TIM_OC6_SetConfig+0xb8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00f      	beq.n	8007aec <TIM_OC6_SetConfig+0x7c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <TIM_OC6_SetConfig+0xbc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_OC6_SetConfig+0x7c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a16      	ldr	r2, [pc, #88]	; (8007b30 <TIM_OC6_SetConfig+0xc0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_OC6_SetConfig+0x7c>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <TIM_OC6_SetConfig+0xc4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_OC6_SetConfig+0x7c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <TIM_OC6_SetConfig+0xc8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d109      	bne.n	8007b00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40013400 	.word	0x40013400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800

08007b3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b58:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6a:	f023 0307 	bic.w	r3, r3, #7
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b70      	cmp	r3, #112	; 0x70
 8007b88:	d01a      	beq.n	8007bc0 <TIM_SlaveTimer_SetConfig+0x84>
 8007b8a:	2b70      	cmp	r3, #112	; 0x70
 8007b8c:	d860      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007b8e:	2b60      	cmp	r3, #96	; 0x60
 8007b90:	d054      	beq.n	8007c3c <TIM_SlaveTimer_SetConfig+0x100>
 8007b92:	2b60      	cmp	r3, #96	; 0x60
 8007b94:	d85c      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007b96:	2b50      	cmp	r3, #80	; 0x50
 8007b98:	d046      	beq.n	8007c28 <TIM_SlaveTimer_SetConfig+0xec>
 8007b9a:	2b50      	cmp	r3, #80	; 0x50
 8007b9c:	d858      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d019      	beq.n	8007bd6 <TIM_SlaveTimer_SetConfig+0x9a>
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d854      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007ba6:	2b30      	cmp	r3, #48	; 0x30
 8007ba8:	d054      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x118>
 8007baa:	2b30      	cmp	r3, #48	; 0x30
 8007bac:	d850      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d050      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x118>
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d84c      	bhi.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d04c      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x118>
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d04a      	beq.n	8007c54 <TIM_SlaveTimer_SetConfig+0x118>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007bbe:	e047      	b.n	8007c50 <TIM_SlaveTimer_SetConfig+0x114>
      TIM_ETR_SetConfig(htim->Instance,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68d9      	ldr	r1, [r3, #12]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f000 f8a5 	bl	8007d1e <TIM_ETR_SetConfig>
      break;
 8007bd4:	e03f      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x11a>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d101      	bne.n	8007be2 <TIM_SlaveTimer_SetConfig+0xa6>
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e03a      	b.n	8007c58 <TIM_SlaveTimer_SetConfig+0x11c>
      tmpccer = htim->Instance->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	621a      	str	r2, [r3, #32]
      break;
 8007c26:	e016      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6899      	ldr	r1, [r3, #8]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	461a      	mov	r2, r3
 8007c36:	f000 f813 	bl	8007c60 <TIM_TI1_ConfigInputStage>
      break;
 8007c3a:	e00c      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	6899      	ldr	r1, [r3, #8]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f000 f838 	bl	8007cbe <TIM_TI2_ConfigInputStage>
      break;
 8007c4e:	e002      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x11a>
      break;
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <TIM_SlaveTimer_SetConfig+0x11a>
        break;
 8007c54:	bf00      	nop
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f023 0201 	bic.w	r2, r3, #1
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 030a 	bic.w	r3, r3, #10
 8007c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b087      	sub	sp, #28
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	f023 0210 	bic.w	r2, r3, #16
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	031b      	lsls	r3, r3, #12
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	021a      	lsls	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	609a      	str	r2, [r3, #8]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e068      	b.n	8007e4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2e      	ldr	r2, [pc, #184]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2d      	ldr	r2, [pc, #180]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d108      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1e      	ldr	r2, [pc, #120]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01d      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dea:	d018      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1b      	ldr	r2, [pc, #108]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d10c      	bne.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40013400 	.word	0x40013400
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40014000 	.word	0x40014000

08007e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e087      	b.n	8007f9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a27      	ldr	r2, [pc, #156]	; (8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d004      	beq.n	8007f1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a25      	ldr	r2, [pc, #148]	; (8007fac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d106      	bne.n	8007f28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1d      	ldr	r2, [pc, #116]	; (8007fac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d126      	bne.n	8007f8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	051b      	lsls	r3, r3, #20
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0e      	ldr	r2, [pc, #56]	; (8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d106      	bne.n	8007f8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	40012c00 	.word	0x40012c00
 8007fac:	40013400 	.word	0x40013400

08007fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e042      	b.n	8008048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7f9 fe27 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2224      	movs	r2, #36	; 0x24
 8007fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82c 	bl	8008050 <UART_SetConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e022      	b.n	8008048 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb20 	bl	8008650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800801e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800802e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fba7 	bl	8008794 <UART_CheckIdleState>
 8008046:	4603      	mov	r3, r0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008054:	b08c      	sub	sp, #48	; 0x30
 8008056:	af00      	add	r7, sp, #0
 8008058:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	431a      	orrs	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	431a      	orrs	r2, r3
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	4313      	orrs	r3, r2
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4baa      	ldr	r3, [pc, #680]	; (8008328 <UART_SetConfig+0x2d8>)
 8008080:	4013      	ands	r3, r2
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008088:	430b      	orrs	r3, r1
 800808a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a9f      	ldr	r2, [pc, #636]	; (800832c <UART_SetConfig+0x2dc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b8:	4313      	orrs	r3, r2
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	f023 010f 	bic.w	r1, r3, #15
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a90      	ldr	r2, [pc, #576]	; (8008330 <UART_SetConfig+0x2e0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d125      	bne.n	8008140 <UART_SetConfig+0xf0>
 80080f4:	4b8f      	ldr	r3, [pc, #572]	; (8008334 <UART_SetConfig+0x2e4>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d81a      	bhi.n	8008138 <UART_SetConfig+0xe8>
 8008102:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <UART_SetConfig+0xb8>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	08008119 	.word	0x08008119
 800810c:	08008129 	.word	0x08008129
 8008110:	08008121 	.word	0x08008121
 8008114:	08008131 	.word	0x08008131
 8008118:	2301      	movs	r3, #1
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e116      	b.n	800834e <UART_SetConfig+0x2fe>
 8008120:	2302      	movs	r3, #2
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e112      	b.n	800834e <UART_SetConfig+0x2fe>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e10e      	b.n	800834e <UART_SetConfig+0x2fe>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e10a      	b.n	800834e <UART_SetConfig+0x2fe>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e106      	b.n	800834e <UART_SetConfig+0x2fe>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a7c      	ldr	r2, [pc, #496]	; (8008338 <UART_SetConfig+0x2e8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d138      	bne.n	80081bc <UART_SetConfig+0x16c>
 800814a:	4b7a      	ldr	r3, [pc, #488]	; (8008334 <UART_SetConfig+0x2e4>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	f003 030c 	and.w	r3, r3, #12
 8008154:	2b0c      	cmp	r3, #12
 8008156:	d82d      	bhi.n	80081b4 <UART_SetConfig+0x164>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <UART_SetConfig+0x110>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008195 	.word	0x08008195
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081b5 	.word	0x080081b5
 800816c:	080081b5 	.word	0x080081b5
 8008170:	080081a5 	.word	0x080081a5
 8008174:	080081b5 	.word	0x080081b5
 8008178:	080081b5 	.word	0x080081b5
 800817c:	080081b5 	.word	0x080081b5
 8008180:	0800819d 	.word	0x0800819d
 8008184:	080081b5 	.word	0x080081b5
 8008188:	080081b5 	.word	0x080081b5
 800818c:	080081b5 	.word	0x080081b5
 8008190:	080081ad 	.word	0x080081ad
 8008194:	2300      	movs	r3, #0
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819a:	e0d8      	b.n	800834e <UART_SetConfig+0x2fe>
 800819c:	2302      	movs	r3, #2
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e0d4      	b.n	800834e <UART_SetConfig+0x2fe>
 80081a4:	2304      	movs	r3, #4
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e0d0      	b.n	800834e <UART_SetConfig+0x2fe>
 80081ac:	2308      	movs	r3, #8
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b2:	e0cc      	b.n	800834e <UART_SetConfig+0x2fe>
 80081b4:	2310      	movs	r3, #16
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ba:	e0c8      	b.n	800834e <UART_SetConfig+0x2fe>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a5e      	ldr	r2, [pc, #376]	; (800833c <UART_SetConfig+0x2ec>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d125      	bne.n	8008212 <UART_SetConfig+0x1c2>
 80081c6:	4b5b      	ldr	r3, [pc, #364]	; (8008334 <UART_SetConfig+0x2e4>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081d0:	2b30      	cmp	r3, #48	; 0x30
 80081d2:	d016      	beq.n	8008202 <UART_SetConfig+0x1b2>
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d818      	bhi.n	800820a <UART_SetConfig+0x1ba>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d00a      	beq.n	80081f2 <UART_SetConfig+0x1a2>
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d814      	bhi.n	800820a <UART_SetConfig+0x1ba>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <UART_SetConfig+0x19a>
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d008      	beq.n	80081fa <UART_SetConfig+0x1aa>
 80081e8:	e00f      	b.n	800820a <UART_SetConfig+0x1ba>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f0:	e0ad      	b.n	800834e <UART_SetConfig+0x2fe>
 80081f2:	2302      	movs	r3, #2
 80081f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f8:	e0a9      	b.n	800834e <UART_SetConfig+0x2fe>
 80081fa:	2304      	movs	r3, #4
 80081fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008200:	e0a5      	b.n	800834e <UART_SetConfig+0x2fe>
 8008202:	2308      	movs	r3, #8
 8008204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008208:	e0a1      	b.n	800834e <UART_SetConfig+0x2fe>
 800820a:	2310      	movs	r3, #16
 800820c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008210:	e09d      	b.n	800834e <UART_SetConfig+0x2fe>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a4a      	ldr	r2, [pc, #296]	; (8008340 <UART_SetConfig+0x2f0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d125      	bne.n	8008268 <UART_SetConfig+0x218>
 800821c:	4b45      	ldr	r3, [pc, #276]	; (8008334 <UART_SetConfig+0x2e4>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008222:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008226:	2bc0      	cmp	r3, #192	; 0xc0
 8008228:	d016      	beq.n	8008258 <UART_SetConfig+0x208>
 800822a:	2bc0      	cmp	r3, #192	; 0xc0
 800822c:	d818      	bhi.n	8008260 <UART_SetConfig+0x210>
 800822e:	2b80      	cmp	r3, #128	; 0x80
 8008230:	d00a      	beq.n	8008248 <UART_SetConfig+0x1f8>
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d814      	bhi.n	8008260 <UART_SetConfig+0x210>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <UART_SetConfig+0x1f0>
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0x200>
 800823e:	e00f      	b.n	8008260 <UART_SetConfig+0x210>
 8008240:	2300      	movs	r3, #0
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e082      	b.n	800834e <UART_SetConfig+0x2fe>
 8008248:	2302      	movs	r3, #2
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e07e      	b.n	800834e <UART_SetConfig+0x2fe>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e07a      	b.n	800834e <UART_SetConfig+0x2fe>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e076      	b.n	800834e <UART_SetConfig+0x2fe>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e072      	b.n	800834e <UART_SetConfig+0x2fe>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a35      	ldr	r2, [pc, #212]	; (8008344 <UART_SetConfig+0x2f4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d12a      	bne.n	80082c8 <UART_SetConfig+0x278>
 8008272:	4b30      	ldr	r3, [pc, #192]	; (8008334 <UART_SetConfig+0x2e4>)
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800827c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008280:	d01a      	beq.n	80082b8 <UART_SetConfig+0x268>
 8008282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008286:	d81b      	bhi.n	80082c0 <UART_SetConfig+0x270>
 8008288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828c:	d00c      	beq.n	80082a8 <UART_SetConfig+0x258>
 800828e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008292:	d815      	bhi.n	80082c0 <UART_SetConfig+0x270>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <UART_SetConfig+0x250>
 8008298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829c:	d008      	beq.n	80082b0 <UART_SetConfig+0x260>
 800829e:	e00f      	b.n	80082c0 <UART_SetConfig+0x270>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e052      	b.n	800834e <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e04e      	b.n	800834e <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e04a      	b.n	800834e <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e046      	b.n	800834e <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e042      	b.n	800834e <UART_SetConfig+0x2fe>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <UART_SetConfig+0x2dc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d13a      	bne.n	8008348 <UART_SetConfig+0x2f8>
 80082d2:	4b18      	ldr	r3, [pc, #96]	; (8008334 <UART_SetConfig+0x2e4>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e0:	d01a      	beq.n	8008318 <UART_SetConfig+0x2c8>
 80082e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e6:	d81b      	bhi.n	8008320 <UART_SetConfig+0x2d0>
 80082e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ec:	d00c      	beq.n	8008308 <UART_SetConfig+0x2b8>
 80082ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f2:	d815      	bhi.n	8008320 <UART_SetConfig+0x2d0>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <UART_SetConfig+0x2b0>
 80082f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fc:	d008      	beq.n	8008310 <UART_SetConfig+0x2c0>
 80082fe:	e00f      	b.n	8008320 <UART_SetConfig+0x2d0>
 8008300:	2300      	movs	r3, #0
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e022      	b.n	800834e <UART_SetConfig+0x2fe>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e01e      	b.n	800834e <UART_SetConfig+0x2fe>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e01a      	b.n	800834e <UART_SetConfig+0x2fe>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e016      	b.n	800834e <UART_SetConfig+0x2fe>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e012      	b.n	800834e <UART_SetConfig+0x2fe>
 8008328:	cfff69f3 	.word	0xcfff69f3
 800832c:	40008000 	.word	0x40008000
 8008330:	40013800 	.word	0x40013800
 8008334:	40021000 	.word	0x40021000
 8008338:	40004400 	.word	0x40004400
 800833c:	40004800 	.word	0x40004800
 8008340:	40004c00 	.word	0x40004c00
 8008344:	40005000 	.word	0x40005000
 8008348:	2310      	movs	r3, #16
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4ab0      	ldr	r2, [pc, #704]	; (8008614 <UART_SetConfig+0x5c4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	f040 809b 	bne.w	8008490 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800835a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800835e:	2b08      	cmp	r3, #8
 8008360:	d827      	bhi.n	80083b2 <UART_SetConfig+0x362>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0x318>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	0800838d 	.word	0x0800838d
 800836c:	08008395 	.word	0x08008395
 8008370:	0800839d 	.word	0x0800839d
 8008374:	080083b3 	.word	0x080083b3
 8008378:	080083a3 	.word	0x080083a3
 800837c:	080083b3 	.word	0x080083b3
 8008380:	080083b3 	.word	0x080083b3
 8008384:	080083b3 	.word	0x080083b3
 8008388:	080083ab 	.word	0x080083ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800838c:	f7fc fbc4 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8008390:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008392:	e014      	b.n	80083be <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008394:	f7fc fbd4 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8008398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800839a:	e010      	b.n	80083be <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800839c:	4b9e      	ldr	r3, [pc, #632]	; (8008618 <UART_SetConfig+0x5c8>)
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083a0:	e00d      	b.n	80083be <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a2:	f7fc fb07 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083a8:	e009      	b.n	80083be <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083b0:	e005      	b.n	80083be <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8130 	beq.w	8008626 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	4a94      	ldr	r2, [pc, #592]	; (800861c <UART_SetConfig+0x5cc>)
 80083cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	4413      	add	r3, r2
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d305      	bcc.n	80083f6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d903      	bls.n	80083fe <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083fc:	e113      	b.n	8008626 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	2200      	movs	r2, #0
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	60fa      	str	r2, [r7, #12]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	4a84      	ldr	r2, [pc, #528]	; (800861c <UART_SetConfig+0x5cc>)
 800840c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008410:	b29b      	uxth	r3, r3
 8008412:	2200      	movs	r2, #0
 8008414:	603b      	str	r3, [r7, #0]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008420:	f7f7 ff08 	bl	8000234 <__aeabi_uldivmod>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4610      	mov	r0, r2
 800842a:	4619      	mov	r1, r3
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	020b      	lsls	r3, r1, #8
 8008436:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800843a:	0202      	lsls	r2, r0, #8
 800843c:	6979      	ldr	r1, [r7, #20]
 800843e:	6849      	ldr	r1, [r1, #4]
 8008440:	0849      	lsrs	r1, r1, #1
 8008442:	2000      	movs	r0, #0
 8008444:	460c      	mov	r4, r1
 8008446:	4605      	mov	r5, r0
 8008448:	eb12 0804 	adds.w	r8, r2, r4
 800844c:	eb43 0905 	adc.w	r9, r3, r5
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	469a      	mov	sl, r3
 8008458:	4693      	mov	fp, r2
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	4640      	mov	r0, r8
 8008460:	4649      	mov	r1, r9
 8008462:	f7f7 fee7 	bl	8000234 <__aeabi_uldivmod>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4613      	mov	r3, r2
 800846c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008474:	d308      	bcc.n	8008488 <UART_SetConfig+0x438>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800847c:	d204      	bcs.n	8008488 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a3a      	ldr	r2, [r7, #32]
 8008484:	60da      	str	r2, [r3, #12]
 8008486:	e0ce      	b.n	8008626 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800848e:	e0ca      	b.n	8008626 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008498:	d167      	bne.n	800856a <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 800849a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800849e:	2b08      	cmp	r3, #8
 80084a0:	d827      	bhi.n	80084f2 <UART_SetConfig+0x4a2>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <UART_SetConfig+0x458>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084cd 	.word	0x080084cd
 80084ac:	080084d5 	.word	0x080084d5
 80084b0:	080084dd 	.word	0x080084dd
 80084b4:	080084f3 	.word	0x080084f3
 80084b8:	080084e3 	.word	0x080084e3
 80084bc:	080084f3 	.word	0x080084f3
 80084c0:	080084f3 	.word	0x080084f3
 80084c4:	080084f3 	.word	0x080084f3
 80084c8:	080084eb 	.word	0x080084eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084cc:	f7fc fb24 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80084d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d2:	e014      	b.n	80084fe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084d4:	f7fc fb34 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 80084d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084da:	e010      	b.n	80084fe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084dc:	4b4e      	ldr	r3, [pc, #312]	; (8008618 <UART_SetConfig+0x5c8>)
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e0:	e00d      	b.n	80084fe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084e2:	f7fc fa67 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80084e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084e8:	e009      	b.n	80084fe <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084f0:	e005      	b.n	80084fe <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 8090 	beq.w	8008626 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	4a44      	ldr	r2, [pc, #272]	; (800861c <UART_SetConfig+0x5cc>)
 800850c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008510:	461a      	mov	r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	fbb3 f3f2 	udiv	r3, r3, r2
 8008518:	005a      	lsls	r2, r3, #1
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	441a      	add	r2, r3
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	fbb2 f3f3 	udiv	r3, r2, r3
 800852a:	b29b      	uxth	r3, r3
 800852c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	2b0f      	cmp	r3, #15
 8008532:	d916      	bls.n	8008562 <UART_SetConfig+0x512>
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800853a:	d212      	bcs.n	8008562 <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f023 030f 	bic.w	r3, r3, #15
 8008544:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	b29a      	uxth	r2, r3
 8008552:	8bfb      	ldrh	r3, [r7, #30]
 8008554:	4313      	orrs	r3, r2
 8008556:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	8bfa      	ldrh	r2, [r7, #30]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	e061      	b.n	8008626 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008568:	e05d      	b.n	8008626 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800856a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800856e:	2b08      	cmp	r3, #8
 8008570:	d827      	bhi.n	80085c2 <UART_SetConfig+0x572>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <UART_SetConfig+0x528>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085c3 	.word	0x080085c3
 8008588:	080085b3 	.word	0x080085b3
 800858c:	080085c3 	.word	0x080085c3
 8008590:	080085c3 	.word	0x080085c3
 8008594:	080085c3 	.word	0x080085c3
 8008598:	080085bb 	.word	0x080085bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800859c:	f7fc fabc 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80085a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a2:	e014      	b.n	80085ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085a4:	f7fc facc 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085aa:	e010      	b.n	80085ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <UART_SetConfig+0x5c8>)
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b0:	e00d      	b.n	80085ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085b2:	f7fc f9ff 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80085b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b8:	e009      	b.n	80085ce <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c0:	e005      	b.n	80085ce <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085cc:	bf00      	nop
    }

    if (pclk != 0U)
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d028      	beq.n	8008626 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	4a10      	ldr	r2, [pc, #64]	; (800861c <UART_SetConfig+0x5cc>)
 80085da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085de:	461a      	mov	r2, r3
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	441a      	add	r2, r3
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	2b0f      	cmp	r3, #15
 80085fe:	d90f      	bls.n	8008620 <UART_SetConfig+0x5d0>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008606:	d20b      	bcs.n	8008620 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6a3a      	ldr	r2, [r7, #32]
 800860e:	60da      	str	r2, [r3, #12]
 8008610:	e009      	b.n	8008626 <UART_SetConfig+0x5d6>
 8008612:	bf00      	nop
 8008614:	40008000 	.word	0x40008000
 8008618:	00f42400 	.word	0x00f42400
 800861c:	08009298 	.word	0x08009298
      }
      else
      {
        ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2201      	movs	r2, #1
 800862a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2201      	movs	r2, #1
 8008632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008642:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008646:	4618      	mov	r0, r3
 8008648:	3730      	adds	r7, #48	; 0x30
 800864a:	46bd      	mov	sp, r7
 800864c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01a      	beq.n	8008766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800874e:	d10a      	bne.n	8008766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
  }
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af02      	add	r7, sp, #8
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087a4:	f7f9 fc02 	bl	8001fac <HAL_GetTick>
 80087a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d10e      	bne.n	80087d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f82f 	bl	800882a <UART_WaitOnFlagUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e025      	b.n	8008822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d10e      	bne.n	8008802 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f819 	bl	800882a <UART_WaitOnFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e00f      	b.n	8008822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883a:	e062      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d05e      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008844:	f7f9 fbb2 	bl	8001fac <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <UART_WaitOnFlagUntilTimeout+0x30>
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11d      	bne.n	8008896 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008868:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0201 	bic.w	r2, r2, #1
 8008878:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e045      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d02e      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b2:	d126      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0201 	bic.w	r2, r2, #1
 80088dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e00f      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4013      	ands	r3, r2
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	429a      	cmp	r2, r3
 800891e:	d08d      	beq.n	800883c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_UARTEx_DisableFifoMode+0x16>
 800893c:	2302      	movs	r3, #2
 800893e:	e027      	b.n	8008990 <HAL_UARTEx_DisableFifoMode+0x66>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2224      	movs	r2, #36	; 0x24
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0201 	bic.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800896e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e02d      	b.n	8008a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2224      	movs	r2, #36	; 0x24
 80089c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0201 	bic.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f84f 	bl	8008a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e02d      	b.n	8008a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2224      	movs	r2, #36	; 0x24
 8008a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f811 	bl	8008a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d108      	bne.n	8008ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ab4:	e031      	b.n	8008b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aba:	2308      	movs	r3, #8
 8008abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	0e5b      	lsrs	r3, r3, #25
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	0f5b      	lsrs	r3, r3, #29
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	7b3a      	ldrb	r2, [r7, #12]
 8008ae2:	4911      	ldr	r1, [pc, #68]	; (8008b28 <UARTEx_SetNbDataToProcess+0x94>)
 8008ae4:	5c8a      	ldrb	r2, [r1, r2]
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	7b3a      	ldrb	r2, [r7, #12]
 8008aec:	490f      	ldr	r1, [pc, #60]	; (8008b2c <UARTEx_SetNbDataToProcess+0x98>)
 8008aee:	5c8a      	ldrb	r2, [r1, r2]
 8008af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	7b7a      	ldrb	r2, [r7, #13]
 8008b00:	4909      	ldr	r1, [pc, #36]	; (8008b28 <UARTEx_SetNbDataToProcess+0x94>)
 8008b02:	5c8a      	ldrb	r2, [r1, r2]
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	7b7a      	ldrb	r2, [r7, #13]
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <UARTEx_SetNbDataToProcess+0x98>)
 8008b0c:	5c8a      	ldrb	r2, [r1, r2]
 8008b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	080092b0 	.word	0x080092b0
 8008b2c:	080092b8 	.word	0x080092b8

08008b30 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	f023 0101 	bic.w	r1, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d102      	bne.n	8008b60 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008b5a:	2340      	movs	r3, #64	; 0x40
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e001      	b.n	8008b64 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008b70:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008b76:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008b7c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008b82:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008b88:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008b8e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008b94:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008b9a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008ba0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008bd2:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <FMC_NORSRAM_Init+0x19c>)
 8008bd4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bdc:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008be4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008bec:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008bf4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	43db      	mvns	r3, r3
 8008c04:	ea02 0103 	and.w	r1, r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4319      	orrs	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d10c      	bne.n	8008c3a <FMC_NORSRAM_Init+0x10a>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d008      	beq.n	8008c3a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d12f      	bne.n	8008cba <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	0c1b      	lsrs	r3, r3, #16
 8008c60:	041b      	lsls	r3, r3, #16
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c66:	431a      	orrs	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d014      	beq.n	8008c9e <FMC_NORSRAM_Init+0x16e>
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d819      	bhi.n	8008cac <FMC_NORSRAM_Init+0x17c>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <FMC_NORSRAM_Init+0x152>
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d007      	beq.n	8008c90 <FMC_NORSRAM_Init+0x160>
 8008c80:	e014      	b.n	8008cac <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	621a      	str	r2, [r3, #32]
        break;
 8008c8e:	e015      	b.n	8008cbc <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	621a      	str	r2, [r3, #32]
        break;
 8008c9c:	e00e      	b.n	8008cbc <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	621a      	str	r2, [r3, #32]
        break;
 8008caa:	e007      	b.n	8008cbc <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	621a      	str	r2, [r3, #32]
        break;
 8008cb8:	e000      	b.n	8008cbc <FMC_NORSRAM_Init+0x18c>
    }
  }
 8008cba:	bf00      	nop

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	0008fb7f 	.word	0x0008fb7f

08008cd0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	079b      	lsls	r3, r3, #30
 8008d00:	431a      	orrs	r2, r3
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	431a      	orrs	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	3b02      	subs	r3, #2
 8008d1a:	061b      	lsls	r3, r3, #24
 8008d1c:	ea42 0103 	orr.w	r1, r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	3201      	adds	r2, #1
 8008d28:	4319      	orrs	r1, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3c:	d113      	bne.n	8008d66 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d46:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	051b      	lsls	r3, r3, #20
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d88:	d121      	bne.n	8008dce <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d92:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6819      	ldr	r1, [r3, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	4319      	orrs	r1, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	4319      	orrs	r1, r3
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	079b      	lsls	r3, r3, #30
 8008db0:	4319      	orrs	r1, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	4319      	orrs	r1, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	ea42 0103 	orr.w	r1, r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008dcc:	e005      	b.n	8008dda <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b08b      	sub	sp, #44	; 0x2c
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	fa93 f3a3 	rbit	r3, r3
 8008e02:	613b      	str	r3, [r7, #16]
  return result;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008e0e:	2320      	movs	r3, #32
 8008e10:	e003      	b.n	8008e1a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	fab3 f383 	clz	r3, r3
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	2103      	movs	r1, #3
 8008e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e22:	43db      	mvns	r3, r3
 8008e24:	401a      	ands	r2, r3
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	fa93 f3a3 	rbit	r3, r3
 8008e30:	61fb      	str	r3, [r7, #28]
  return result;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	e003      	b.n	8008e48 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	fab3 f383 	clz	r3, r3
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e50:	431a      	orrs	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]
}
 8008e56:	bf00      	nop
 8008e58:	372c      	adds	r7, #44	; 0x2c
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	43db      	mvns	r3, r3
 8008e76:	401a      	ands	r2, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b08b      	sub	sp, #44	; 0x2c
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	fa93 f3a3 	rbit	r3, r3
 8008eac:	613b      	str	r3, [r7, #16]
  return result;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008eb8:	2320      	movs	r3, #32
 8008eba:	e003      	b.n	8008ec4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	fab3 f383 	clz	r3, r3
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	fa93 f3a3 	rbit	r3, r3
 8008eda:	61fb      	str	r3, [r7, #28]
  return result;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008ee6:	2320      	movs	r3, #32
 8008ee8:	e003      	b.n	8008ef2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	fab3 f383 	clz	r3, r3
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8008efa:	431a      	orrs	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008f00:	bf00      	nop
 8008f02:	372c      	adds	r7, #44	; 0x2c
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b08b      	sub	sp, #44	; 0x2c
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	fa93 f3a3 	rbit	r3, r3
 8008f26:	613b      	str	r3, [r7, #16]
  return result;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008f32:	2320      	movs	r3, #32
 8008f34:	e003      	b.n	8008f3e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	fab3 f383 	clz	r3, r3
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	2103      	movs	r1, #3
 8008f42:	fa01 f303 	lsl.w	r3, r1, r3
 8008f46:	43db      	mvns	r3, r3
 8008f48:	401a      	ands	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	fa93 f3a3 	rbit	r3, r3
 8008f54:	61fb      	str	r3, [r7, #28]
  return result;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008f60:	2320      	movs	r3, #32
 8008f62:	e003      	b.n	8008f6c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	fab3 f383 	clz	r3, r3
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	fa01 f303 	lsl.w	r3, r1, r3
 8008f74:	431a      	orrs	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	60da      	str	r2, [r3, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	372c      	adds	r7, #44	; 0x2c
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b08b      	sub	sp, #44	; 0x2c
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1a      	ldr	r2, [r3, #32]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	fa93 f3a3 	rbit	r3, r3
 8008fa0:	613b      	str	r3, [r7, #16]
  return result;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008fac:	2320      	movs	r3, #32
 8008fae:	e003      	b.n	8008fb8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	fab3 f383 	clz	r3, r3
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	210f      	movs	r1, #15
 8008fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	fa93 f3a3 	rbit	r3, r3
 8008fce:	61fb      	str	r3, [r7, #28]
  return result;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008fda:	2320      	movs	r3, #32
 8008fdc:	e003      	b.n	8008fe6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	fab3 f383 	clz	r3, r3
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	fa01 f303 	lsl.w	r3, r1, r3
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008ff4:	bf00      	nop
 8008ff6:	372c      	adds	r7, #44	; 0x2c
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009000:	b480      	push	{r7}
 8009002:	b08b      	sub	sp, #44	; 0x2c
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	fa93 f3a3 	rbit	r3, r3
 800901c:	613b      	str	r3, [r7, #16]
  return result;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009028:	2320      	movs	r3, #32
 800902a:	e003      	b.n	8009034 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	fab3 f383 	clz	r3, r3
 8009032:	b2db      	uxtb	r3, r3
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	210f      	movs	r1, #15
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	fa93 f3a3 	rbit	r3, r3
 800904c:	61fb      	str	r3, [r7, #28]
  return result;
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009058:	2320      	movs	r3, #32
 800905a:	e003      	b.n	8009064 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	fab3 f383 	clz	r3, r3
 8009062:	b2db      	uxtb	r3, r3
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	431a      	orrs	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009072:	bf00      	nop
 8009074:	372c      	adds	r7, #44	; 0x2c
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	fa93 f3a3 	rbit	r3, r3
 8009094:	60fb      	str	r3, [r7, #12]
  return result;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <LL_GPIO_Init+0x26>
    return 32U;
 80090a0:	2320      	movs	r3, #32
 80090a2:	e003      	b.n	80090ac <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	fab3 f383 	clz	r3, r3
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80090ae:	e047      	b.n	8009140 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	2101      	movs	r1, #1
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	4013      	ands	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d039      	beq.n	800913a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d003      	beq.n	80090d6 <LL_GPIO_Init+0x58>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d10d      	bne.n	80090f2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	461a      	mov	r2, r3
 80090dc:	69b9      	ldr	r1, [r7, #24]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fed7 	bl	8008e92 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	461a      	mov	r2, r3
 80090ea:	69b9      	ldr	r1, [r7, #24]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff feb8 	bl	8008e62 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	461a      	mov	r2, r3
 80090f8:	69b9      	ldr	r1, [r7, #24]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ff06 	bl	8008f0c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d111      	bne.n	800912c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2bff      	cmp	r3, #255	; 0xff
 800910c:	d807      	bhi.n	800911e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	461a      	mov	r2, r3
 8009114:	69b9      	ldr	r1, [r7, #24]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff ff35 	bl	8008f86 <LL_GPIO_SetAFPin_0_7>
 800911c:	e006      	b.n	800912c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	461a      	mov	r2, r3
 8009124:	69b9      	ldr	r1, [r7, #24]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff ff6a 	bl	8009000 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	461a      	mov	r2, r3
 8009132:	69b9      	ldr	r1, [r7, #24]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff fe57 	bl	8008de8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1b0      	bne.n	80090b0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3720      	adds	r7, #32
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009160:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009164:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	b29b      	uxth	r3, r3
 8009172:	43db      	mvns	r3, r3
 8009174:	b29b      	uxth	r3, r3
 8009176:	4013      	ands	r3, r2
 8009178:	b29a      	uxth	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800918e:	b084      	sub	sp, #16
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	f107 0014 	add.w	r0, r7, #20
 800919c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	b004      	add	sp, #16
 80091ce:	4770      	bx	lr

080091d0 <__libc_init_array>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4d0d      	ldr	r5, [pc, #52]	; (8009208 <__libc_init_array+0x38>)
 80091d4:	2600      	movs	r6, #0
 80091d6:	4c0d      	ldr	r4, [pc, #52]	; (800920c <__libc_init_array+0x3c>)
 80091d8:	1b64      	subs	r4, r4, r5
 80091da:	10a4      	asrs	r4, r4, #2
 80091dc:	42a6      	cmp	r6, r4
 80091de:	d109      	bne.n	80091f4 <__libc_init_array+0x24>
 80091e0:	4d0b      	ldr	r5, [pc, #44]	; (8009210 <__libc_init_array+0x40>)
 80091e2:	2600      	movs	r6, #0
 80091e4:	4c0b      	ldr	r4, [pc, #44]	; (8009214 <__libc_init_array+0x44>)
 80091e6:	f000 f81f 	bl	8009228 <_init>
 80091ea:	1b64      	subs	r4, r4, r5
 80091ec:	10a4      	asrs	r4, r4, #2
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d105      	bne.n	80091fe <__libc_init_array+0x2e>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f8:	3601      	adds	r6, #1
 80091fa:	4798      	blx	r3
 80091fc:	e7ee      	b.n	80091dc <__libc_init_array+0xc>
 80091fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009202:	3601      	adds	r6, #1
 8009204:	4798      	blx	r3
 8009206:	e7f2      	b.n	80091ee <__libc_init_array+0x1e>
 8009208:	080092c8 	.word	0x080092c8
 800920c:	080092c8 	.word	0x080092c8
 8009210:	080092c8 	.word	0x080092c8
 8009214:	080092cc 	.word	0x080092cc

08009218 <memset>:
 8009218:	4402      	add	r2, r0
 800921a:	4603      	mov	r3, r0
 800921c:	4293      	cmp	r3, r2
 800921e:	d100      	bne.n	8009222 <memset+0xa>
 8009220:	4770      	bx	lr
 8009222:	f803 1b01 	strb.w	r1, [r3], #1
 8009226:	e7f9      	b.n	800921c <memset+0x4>

08009228 <_init>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr

08009234 <_fini>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr
